Programs with dynamic allocation are able to create and use an unbounded
number of fresh resources, such as references, objects, files, etc. We propose
History-Register Automata (HRA), a new automata-theoretic formalism for
modelling and verifying such programs. HRAs extend the expressiveness of
previous approaches and bring us to the limits of decidability for reachability
checks. The distinctive feature of our machines is their use of unbounded
memory sets (histories) where input symbols can be selectively stored and
compared with symbols to follow. In addition, stored symbols can be consumed or
deleted by reset. We show that the combination of consumption and reset
capabilities renders the automata powerful enough to imitate counter machines,
and in particular reset Petri nets, and yields closure under all regular
operations apart from complementation. We moreover examine weaker notions of
HRAs which strike different balances between expressiveness and effectiveness.