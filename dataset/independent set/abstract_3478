An important tool in the study of the complexity of Constraint Satisfaction
Problems (CSPs) is the notion of a relational clone, which is the set of all
relations expressible using primitive positive formulas over a particular set
of base relations. Post's lattice gives a complete classification of all
Boolean relational clones, and this has been used to classify the computational
difficulty of CSPs. Motivated by a desire to understand the computational
complexity of (weighted) counting CSPs, we develop an analogous notion of
functional clones and study the landscape of these clones. One of these clones
is the collection of log-supermodular (lsm) functions, which turns out to play
a significant role in classifying counting CSPs. In the conservative case
(where all nonnegative unary functions are available), we show that there are
no functional clones lying strictly between the clone of lsm functions and the
total clone (containing all functions). Thus, any counting CSP that contains a
single nontrivial non-lsm function is computationally as hard to approximate as
any problem in #P. Furthermore, we show that any non-trivial functional clone
(in a sense that will be made precise) contains the binary function "implies".
As a consequence, in the conservative case, all non-trivial counting CSPs are
as hard as #BIS, the problem of counting independent sets in a bipartite graph.
Given the complexity-theoretic results, it is natural to ask whether the
"implies" clone is equivalent to the clone of lsm functions. We use the Mobius
transform and the Fourier transform to show that these clones coincide
precisely up to arity 3. It is an intriguing open question whether the lsm
clone is finitely generated. Finally, we investigate functional clones in which
only restricted classes of unary functions are available.