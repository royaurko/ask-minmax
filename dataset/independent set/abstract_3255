In many real-world OpenFlow-based SDN deployments, the ability to program
heterogeneous forwarding elements built with different forwarding architectures
is a desirable capability. In this paper, we discuss a data plane programming
framework suitable for a flexible and protocol-oblivious data plane and show
how OpenFlow can evolve to provide a generic interface for platform-independent
programming and platform-specific compiling. We also show how an abstract
instruction set can play a pivotal role to support different programming styles
mapping to different forwarding chip architectures. As an example, we compare
the compiler-mode and interpreter-mode implementations for an NPU-based
forwarding element and conclude that the compiler-mode implementation can
achieve a performance similar to that of a conventional non-SDN implementation.
Built upon our protocol-oblivious forwarding (POF) vision, this work presents
our continuous efforts to complete the ecosystem and pave the SDN evolving
path. The programming framework could be considered as a proposal for the
OpenFlow 2.0 standard.