In this paper we investigate forgetting in disjunctive logic programs, where
forgetting an atom from a program amounts to a reduction in the signature of
that program. The goal is to provide an approach that is syntax-independent, in
that if two programs are strongly equivalent, then the results of forgetting an
atom in each program should also be strongly equivalent. Our central definition
of forgetting is impractical but satisfies this goal: Forgetting an atom is
characterised by the set of SE consequences of the program that do not mention
the atom to be forgotten. We then provide an equivalent, practical definition,
wherein forgetting an atom $p$ is given by those rules in the program that
don't mention $p$, together with rules obtained by a single inference step from
rules that do mention $p$. Forgetting is shown to have appropriate properties;
as well, the finite characterisation results in a modest (at worst quadratic)
blowup. Finally we have also obtained a prototype implementation of this
approach to forgetting.