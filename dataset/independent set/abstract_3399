Thread-level parallelism in irregular applications with mutable data
dependencies presents challenges because the underlying data is extensively
modified during execution of the algorithm and a high degree of parallelism
must be realized while keeping the code race-free. In this article we describe
a methodology for exploiting thread parallelism for a class of graph-mutating
worklist algorithms, which guarantees safe parallel execution via processing in
rounds of independent sets and using a deferred update strategy to commit
changes in the underlying data structures. Scalability is assisted by atomic
fetch-and-add operations to create worklists and work-stealing to balance the
shared-memory workload. This work is motivated by mesh adaptation algorithms,
for which we show a parallel efficiency of 60% and 50% on Intel(R) Xeon(R)
Sandy Bridge and AMD Opteron(tm) Magny-Cours systems, respectively, using these
techniques.