The distinction between strong negation and default negation has been useful
in answer set programming. We present an alternative account of strong
negation, which lets us view strong negation in terms of the functional stable
model semantics by Bartholomew and Lee. More specifically, we show that, under
complete interpretations, minimizing both positive and negative literals in the
traditional answer set semantics is essentially the same as ensuring the
uniqueness of Boolean function values under the functional stable model
semantics. The same account lets us view Lifschitz's two-valued logic programs
as a special case of the functional stable model semantics. In addition, we
show how non-Boolean intensional functions can be eliminated in favor of
Boolean intensional functions, and furthermore can be represented using strong
negation, which provides a way to compute the functional stable model semantics
using existing ASP solvers. We also note that similar results hold with the
functional stable model semantics by Cabalar.