Consider the problem of maintaining a family $F$ of dynamic sets subject to
insertions, deletions, and set-intersection reporting queries: given $S,S'\in
F$, report every member of $S\cap S'$ in any order. We show that in the word
RAM model, where $w$ is the word size, given a cap $d$ on the maximum size of
any set, we can support set intersection queries in $O(\frac{d}{w/\log^2 w})$
expected time, and updates in $O(\log w)$ expected time. Using this algorithm
we can list all $t$ triangles of a graph $G=(V,E)$ in
$O(m+\frac{m\alpha}{w/\log^2 w} +t)$ expected time, where $m=|E|$ and $\alpha$
is the arboricity of $G$. This improves a 30-year old triangle enumeration
algorithm of Chiba and Nishizeki running in $O(m \alpha)$ time.
  We provide an incremental data structure on $F$ that supports intersection
{\em witness} queries, where we only need to find {\em one} $e\in S\cap S'$.
Both queries and insertions take $O\paren{\sqrt \frac{N}{w/\log^2 w}}$ expected
time, where $N=\sum_{S\in F} |S|$. Finally, we provide time/space tradeoffs for
the fully dynamic set intersection reporting problem. Using $M$ words of space,
each update costs $O(\sqrt {M \log N})$ expected time, each reporting query
costs $O(\frac{N\sqrt{\log N}}{\sqrt M}\sqrt{op+1})$ expected time where $op$
is the size of the output, and each witness query costs $O(\frac{N\sqrt{\log
N}}{\sqrt M} + \log N)$ expected time.