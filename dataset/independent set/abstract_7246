Rules in logic programming encode information about mutual interdependencies
between literals that is not captured by any of the commonly used semantics.
This information becomes essential as soon as a program needs to be modified or
further manipulated.
  We argue that, in these cases, a program should not be viewed solely as the
set of its models. Instead, it should be viewed and manipulated as the set of
sets of models of each rule inside it. With this in mind, we investigate and
highlight relations between the SE-model semantics and individual rules. We
identify a set of representatives of rule equivalence classes induced by
SE-models, and so pinpoint the exact expressivity of this semantics with
respect to a single rule. We also characterise the class of sets of
SE-interpretations representable by a single rule. Finally, we discuss the
introduction of two notions of equivalence, both stronger than strong
equivalence [1] and weaker than strong update equivalence [2], which seem more
suitable whenever the dependency information found in rules is of interest.