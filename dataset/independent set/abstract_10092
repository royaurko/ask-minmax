We present a graph pattern engine, EmptyHeaded, that uses recent algorithmic
advances in join processing to compile patterns into Boolean algebra operations
that exploit SIMD parallelism. The EmptyHeaded engine demonstrates that
treating graph patterns as a general join processing problem can compete with
and often outperform both specialized approaches and existing OLAP systems on
graph queries. The core Boolean algebra operation performed in EmptyHeaded is
set intersection. Extracting SIMD parallelism during set intersections on graph
data is challenging because graph data can be skewed in several different ways.
Our contributions are a demonstration of this new type of engine with Boolean
algebra at its core, an exploration of set intersection representations and
algorithms for set intersections that are optimized for skew. We demonstrate
that EmptyHeaded outperforms specialized graph engines by over an order of
magnitude and relational systems by over two orders of magnitude. Our results
suggest that this new style of engine is a promising new direction for future
graph engines and accelerators.