This paper is concerned with the page migration (or file migration) problem (Black and Sleator, Technical Report CMU-CS-89-201, Department of Computer Science, Carnegie-Mellon University, 1989) as part of a large class of on-line problems. The page migration problem deals with the management of pages residing in a network of processors. In the classical problem there is only one copy of each page which is accessed by different processors over time. The page is allowed to be migrated between processors. However a migration incurs higher communication cost than an access (proportionally to the page size). The problem is that of deciding when and where to migrate the page in order to lower access costs. A more general setting is the k - page migration problem where we wish to maintain k copies of the page. The page migration problems are concerned with a dilemma common to many on-line problems: determining when it is beneficial to make configuration changes. We deal with the relaxed task systems model which captures a large class of problems of this type, that can be described as the generalization of some original task system problem (Borodin et al., J. ACM 39(4) (1992) 745–763). Given a c -competitive algorithm for a task system we show how to obtain a deterministic and randomized competitive algorithms for the corresponding relaxed task system. The result implies deterministic algorithms for k - page migration by using k -server (Manasse et al., J. Algorithms 11(2) (1990) 208–230) algorithms, and for network leasing by using generalized Steiner tree algorithms (Awerbuch et al., Proc 7th Ann. ACM-SIAM Symp. on Discrete Algorithms, January 1996, pp. 68–74), as well as providing solutions for natural generalizations of other problems (e.g. storage rearrangement (Fiat et al., Proc. 36th Ann. IEEE Symp. on Foundations of Computer Science, October 1995, pp. 392–403). We further study some special cases of the k -page migration problem and get optimal deterministic algorithms. For the classical page migration problem we present a deterministic algorithm that achieves a competitive ratio of ∼4.086 , improving upon the previously best competitive ratio of 7 (Awerbuch et al., Proc. 25th ACM Symp. on Theory of Computing, May 1993, pp. 164–173). (The current lower bound on the problem is ∼3.148 (Chrobak et al., J. Algorithms 24(1) (1997) 124–157).)