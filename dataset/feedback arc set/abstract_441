The concept of support is pervasive in constraint programming. Traditionally,
when a domain value ceases to have support, it may be removed because it takes
part in no solutions. Arc-consistency algorithms such as AC2001 make use of
support in the form of a single domain value. GAC algorithms such as GAC-Schema
use a tuple of values to support each literal. We generalize these notions of
support in two ways. First, we allow a set of tuples to act as support. Second,
the supported object is generalized from a set of literals (GAC-Schema) to an
entire constraint or any part of it.
  We design a methodology for developing correct propagators using generalized
support. A constraint is expressed as a family of support properties, which may
be proven correct against the formal semantics of the constraint. Using
Curry-Howard isomorphism to interpret constructive proofs as programs, we show
how to derive correct propagators from the constructive proofs of the support
properties. The framework is carefully designed to allow efficient algorithms
to be produced. Derived algorithms may make use of dynamic literal triggers or
watched literals for efficiency. Finally, two case studies of deriving
efficient algorithms are given.