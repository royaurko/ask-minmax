Background: Aspect-oriented programming (AOP) is an emerging programming
paradigm whose focus is about improving modularity, with an emphasis on the
modularization of crosscutting concerns.
  Objective: The goal of this paper is to assess the extent to which an AOP
language -ObjectTeams/Java (OT/J) -improves the modularity of a software
system. This improvement has been claimed but, to the best of our knowledge,
this paper is the first attempting to present quantitative evidence of it.
  Method: We compare functionally-equivalent implementations of the
Gang-of-Four design patterns, developed in Java and OT/J, using software
metrics.
  Results: The results of our comparison support the modularity improvement
claims made in the literature. For six of the seven metrics used, the OT/J
versions of the patterns obtained significantly better results.
  Limitations: This work uses a set of metrics originally defined for
object-oriented (OO) systems. It may be the case that the metrics are biased,
in that they were created in the context of OO programming (OOP), before the
advent of AOP. We consider this comparison a stepping stone as, ultimately, we
plan to assess the modularity improvements with paradigm independent metrics,
which will conceivably eliminate the bias. Each individual example from the
sample used in this paper is small. In future, we plan to replicate this
experiment using larger systems, where the benefits of AOP may be more
noticeable.
  Conclusion: This work contributes with evidence to fill gaps in the body of
quantitative results supporting alleged benefits to software modularity brought
by AOP languages, namely OT/J.