Software development is rarely an individual effort and generally involves
teams of developers collaborating to generate good reliable code. Among the
software code there exist technical dependencies that arise from software
components using services from other components. The different ways of
assigning the design, development, and testing of these software modules to
people can cause various coordination problems among them. We claim that the
collaboration of the developers, designers and testers must be related to and
governed by the technical task structure. These collaboration practices are
handled in what we call Socio-Technical Patterns. The TESNA project (Technical
Social Network Analysis) we report on in this paper addresses this issue. We
propose a method and a tool that a project manager can use in order to detect
the socio-technical coordination problems. We test the method and tool in a
case study of a small and innovative software product company.