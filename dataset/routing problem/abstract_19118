For k>=1, we consider the graph dynamical system known as a k-reversible
process. In such process, each vertex in the graph has one of two possible
states at each discrete time. Each vertex changes its state between the present
time and the next if and only if it currently has at least k neighbors in a
state different than its own. Given a k-reversible process and a configuration
of states assigned to the vertices, the Predecessor Existence problem consists
of determining whether this configuration can be generated by the process from
another configuration within exactly one time step. We can also extend the
problem by asking for the number of configurations from which a given
configuration is reachable within one time step. Predecessor Existence can be
solved in polynomial time for k=1, but for k>1 we show that it is NP-complete.
When the graph in question is a tree we show how to solve it in O(n) time and
how to count the number of predecessor configurations in O(n^2) time. We also
solve Predecessor Existence efficiently for the specific case of 2-reversible
processes when the maximum degree of a vertex in the graph is no greater than
3. For this case we present an algorithm that runs in O(n) time.