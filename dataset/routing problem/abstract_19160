This paper considers the problem of scheduling jobs on single and parallel
machines where all the jobs possess different processing times but a common due
date. There is a penalty involved with each job if it is processed earlier or
later than the due date. The objective of the problem is to find the assignment
of jobs to machines, the processing sequence of jobs and the time at which they
are processed, which minimizes the total penalty incurred due to tardiness or
earliness of the jobs. This work presents exact polynomial algorithms for
optimizing a given job sequence or single and parallel machines with the
run-time complexities of $O(n \log n)$ and $O(mn^2 \log n)$ respectively, where
$n$ is the number of jobs and $m$ the number of machines. The algorithms take a
sequence consisting of all the jobs $(J_i, i=1,2,\dots,n)$ as input and
distribute the jobs to machines (for $m>1$) along with their best completion
times so as to get the least possible total penalty for this sequence. We prove
the optimality for the single machine case and the runtime complexities of
both. Henceforth, we present the results for the benchmark instances and
compare with previous work for single and parallel machine cases, up to $200$
jobs.