Today, it is important for software companies to build software systems in a
short time-interval, to reduce costs and to have a good market position.
Therefore well organized and systematic development approaches are required.
Reusing software components, which are well tested, can be a good solution to
develop software applications in effective manner. The reuse of software
components is less expensive and less time consuming than a development from
scratch. But it is dangerous to think that software components can be match
together without any problems. Software components itself are well tested, of
course, but even if they composed together problems occur. Most problems are
based on interaction respectively communication. Avoiding such errors a
framework has to be developed for analysing software components. That framework
determines the compatibility of corresponding software components.The promising
approach discussed here, presents a novel technique for analysing software
components by applying an Abstract Syntax Language Tree (ASLT). A supportive
environment will be designed that checks the compatibility of black-box
software components. This article is concerned to the question how can be
coupled software components verified by using an analyzer framework and
determines the usage of the ASLT. Black-box Software Components and Abstract
Syntax Language Tree are the basis for developing the proposed framework and
are discussed here to provide the background knowledge. The practical
implementation of this framework is discussed and shows the result by using a
test environment.