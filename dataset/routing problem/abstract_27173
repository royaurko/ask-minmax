We consider the problem of enumerating all instances of a given sample graph
in a large data graph. Our focus is on determining the input/output (I/O)
complexity of this problem. Let $E$ be the number of edges in the data graph,
$k=O(1)$ be the number of vertexes in the sample graph, $B$ be the block
length, and $M$ be the main memory size. The main result of the paper is a
randomized algorithm that enumerates all instances of the sample graph in
$O\left(E^{k/2}/\left(BM^{k/2-1}\right)\right)$ expected I/Os if the maximum
vertex degree of the data graph is $\sqrt{EM}$. Under some assumptions, the
same bound also applies with high probability. Our algorithm is I/O optimal, in
the worst-case, when the sample graph belongs to the Alon class, which includes
cliques, cycles and every graph with a perfect matching: indeed, we show that
any algorithm enumerating $T$ instances must always use
$\Omega\left(T/\left(BM^{k/2-1}\right)\right)$ I/Os and there are graphs for
which $T=\Omega\left(E^{k/2}\right)$. Finally, we propose a parallelization of
the randomized algorithm in the MapReduce framework.