We revisit the problem of computing the edit distance of a regular language
given via an NFA. This problem relates to the inherent maximal error-detecting
capability of the language in question. We present an efficient algorithm for
solving this problem which executes in time $O(r^2n^2d)$, where $r$ is the
cardinality of the alphabet involved, $n$ is the number of transitions in the
given NFA, and $d$ is the computed edit distance. We have implemented the
algorithm and present here performance tests. The correctness of the algorithm
is based on the result (also presented here) that the particular
error-detection property related to our problem can be defined via an
input-altering transducer.