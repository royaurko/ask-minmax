Most experimental studies initialize the population of evolutionary
algorithms with random genotypes. In practice, however, optimizers are
typically seeded with good candidate solutions either previously known or
created according to some problem-specific method. This "seeding" has been
studied extensively for single-objective problems. For multi-objective
problems, however, very little literature is available on the approaches to
seeding and their individual benefits and disadvantages. In this article, we
are trying to narrow this gap via a comprehensive computational study on common
real-valued test functions. We investigate the effect of two seeding techniques
for five algorithms on 48 optimization problems with 2, 3, 4, 6, and 8
objectives. We observe that some functions (e.g., DTLZ4 and the LZ family)
benefit significantly from seeding, while others (e.g., WFG) profit less. The
advantage of seeding also depends on the examined algorithm.