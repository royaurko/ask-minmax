Finding the longest common subsequence in $k$-length substrings (LCS$k$) is a
recently proposed problem motivated by computational biology. This is a
generalization of the well-known LCS problem in which matching symbols from two
sequences $A$ and $B$ are replaced with matching non-overlapping substrings of
length $k$ from $A$ and $B$. We propose several algorithms for LCS$k$, being
non-trivial incarnations of the major concepts known from LCS research (dynamic
programming, sparse dynamic programming, tabulation). Our algorithms make use
of a linear-time and linear-space preprocessing finding the occurrences of all
the substrings of length $k$ from one sequence in the other sequence.