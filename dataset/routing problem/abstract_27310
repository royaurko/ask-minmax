Given an input $x$, and a search problem $F$, local computation algorithms
(LCAs) implement access to specified locations of $y$ in a legal output $y \in
F(x)$, using polylogarithmic time and space. Mansour et al., (2012), had
previously shown how to convert certain online algorithms to LCAs. In this
work, we expand on that line of work and develop new techniques for designing
LCAs and bounding their space and time complexity. Our contributions are
fourfold: (1) We significantly improve the running times and space requirements
of LCAs for previous results, (2) we expand and better define the family of
online algorithms which can be converted to LCAs using our techniques, (3) we
show that our results apply to a larger family of graphs than that of previous
results, and (4) our proofs are simpler and more concise than the previous
proof methods.
  For example, we show how to construct LCAs that require
$O(\log{n}\log\log{n})$ space and $O(\log^2{n})$ time (and expected time
$O(\log\log{n})$) for problems such as maximal matching on a large family of
graphs, as opposed to the henceforth best results that required $O(\log^3{n})$
space and $O(\log^4{n})$ time, and applied to a smaller family of graphs.