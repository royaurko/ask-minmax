Mechanism design is now a standard tool in computer science for aligning the
incentives of self-interested agents with the objectives of a system designer.
There is, however, a fundamental disconnect between the traditional application
domains of mechanism design (such as auctions) and those arising in computer
science (such as networks): while monetary transfers (i.e., payments) are
essential for most of the known positive results in mechanism design, they are
undesirable or even technologically infeasible in many computer systems.
Classical impossibility results imply that the reach of mechanisms without
transfers is severely limited.
  Computer systems typically do have the ability to reduce service
quality--routing systems can drop or delay traffic, scheduling protocols can
delay the release of jobs, and computational payment schemes can require
computational payments from users (e.g., in spam-fighting systems). Service
degradation is tantamount to requiring that users burn money}, and such
``payments'' can be used to influence the preferences of the agents at a cost
of degrading the social surplus.
  We develop a framework for the design and analysis of money-burning
mechanisms to maximize the residual surplus--the total value of the chosen
outcome minus the payments required.