The problem of synthesis of gate-level descriptions of digital circuits from
behavioural specifications written in higher-level programming languages
(hardware compilation) has been studied for a long time yet a definitive
solution has not been forthcoming. The argument of this essay is mainly
methodological, bringing a perspective that is informed by recent developments
in programming-language theory. We argue that one of the major obstacles in the
way of hardware compilation becoming a useful and mature technology is the lack
of a well defined function interface model, i.e. a canonical way in which
functions communicate with arguments. We discuss the consequences of this
problem and propose a solution based on new developments in programming
language theory. We conclude by presenting a prototype implementation and some
examples illustrating our principles.