Password: Vehicle routing problems are at the heart of most decision support systems for real-life distribution problems. In vehicle routing problem a set of routes must be determined at lowest total cost for a number of resources (i.e. fleet of vehicles) located at one or several points (e.g. depots, warehouses) in order to efficiently service a number of demand or supply points. In this paper an efficient evolution strategies algorithm is developed for both capacitated vehicle routing problem and for vehicle routing problem with time window constraints. The algorithm is based on a new multi-parametric mutation procedure that is applied within the 1 + 1 evolution strategies algorithm. Computational testing on six real-life problems and 195 benchmark problems demonstrate that the suggested algorithm is efficient and highly competitive, improving or matching the current best-known solution in 42% of the test cases. Keywords Distribution management ; Vehicle routing problem ; Heuristics ; Evolution strategies 1. Introduction The vehicle routing problem (VRP) is one of the most significant problems in distribution management. Its objective is to find the optimal routes for distributing various shipments, such as goods, mail and raw materials. The basic VRP consists of a number of geographically scattered customers, each requiring a specified weight (or volume) of goods to be delivered (or picked up). A fleet of identical vehicles dispatched from a single depot is used to deliver the goods required and once the delivery routes have been completed, the vehicles must return to the depot. Each vehicle can carry a limited weight and only one vehicle is allowed to visit each customer. It is assumed that all problem parameters, such as customer demands and travel times between customers are known with certainty. Solving the problem consists of finding a set of delivery routes which satisfy the above requirements at minimal total cost. In the literature the above described problem is called capacitated VRP (CVRP). In CVRP the total cost equals the total distance or travel time. In addition to CVRP we also consider in this paper another central distribution management problem, the vehicle routing problem with time windows (VRPTW). Compared to CVRP, in VRPTW each customer can be serviced only within a specified time interval or time window, and a service time is assigned to each customer, corresponding to the loading or unloading time. The VRPTW involves typically a hierarchical objective function where the primary objective is to minimize the number of routes whereas the minimization of total distance or travel time is the secondary objective. Both the CVRP and the VRPTW are at the heart of many real-life distribution problems. Some of the most important applications of CVRP and VRPTW are minimization of distribution costs in supply chains, routing of automated guiding vehicles, rolling batch planning, bank and postal deliveries, industrial refuse collection, national franchise restaurant services, school bus routing, security patrol services and JIT (just in time) manufacturing. The significant economic importance and mathematical complexity renders both problems of great interest in combinatorial optimization. As the VRP is a very complex NP-hard problem, solving the real-life VRPs to optimality is often not possible within the limited computing time available in practical situations. Therefore, most of the research has focused on heuristic and metaheuristic solution methods designed to produce high quality solutions in a limited time. For more details, we refer to the extensive surveys by Bräysy et al., 2004a , Bräysy et al., 2004b , Bräysy and Gendreau, 2005a , Bräysy and Gendreau, 2005b , Cordeau et al., 2002 , Cordeau et al., 2005 , Gendreau et al., 2001  and  Laporte and Semet, 2001 . Given the practical importance of VRPs, it is crucial that new solution algorithms are developed to solve VRPs as efficiently as possible. The main contribution of this paper is the development of new multi-parametric evolution strategies algorithm for CVRP and VRPTW and comprehensive computational study to demonstrate the efficiency of the suggested method on six real-life problems as well as on 195 benchmark problems from the corresponding literature. The remainder of this paper is outlined as follows. In Section 2 we summarize the main ideas of the evolution strategies metaheuristic and the improvement heuristics applied within our algorithm. Then we proceed to the description of the main structure of the solution algorithm, the initial solution procedure and finally the multi-parametric evolution strategies that are used to improve the initial solution. In Section 3 we present the results of an extensive computational study on real-life and theoretical benchmarks and in Section 4 conclusions are made. 2. The problem solving methodology The proposed heuristic solution method consists of two phases. In the first phase, a new hybrid cheapest insertion heuristic is used to construct a feasible initial solution. After the construction, a set of standard improvement heuristics are applied within a composite to improve the quality of the initial solution. After generating the initial solution, an attempt is made to improve the solution in the second phase with a new multi-parametric (1 + 1)-evolution strategies metaheuristic. The second phase is continued until no further improvement can be found and then the search is stopped. Next we will briefly describe the main features of the evolution strategies metaheuristics and the improvement heuristics used before proceeding to the actual description of the global heuristic. 2.1. Evolution strategies Evolution strategies (ES) belong to the class of evolutionary solution algorithms. As the name implies, evolutionary algorithms mimic features of natural evolution, such as adapting to the environment and passing on genetic information to future generations. In general, an evolutionary algorithm (EA) is characterized by maintaining a set of solution candidates that undergoes a selection process, and is manipulated by genetic operators. Natural evolution is simulated by an iterative computation process. To start a population of candidate solutions to one specific problem is initialized. This is often accomplished with a tailored heuristic or by randomly sampling from the solution space. Then a loop consisting of evaluation of solution candidates and selection of solutions based on the evaluation and manipulation of the selected solutions with genetic operators is executed a certain number of times. Each loop iteration is called a generation, and the search is typically stopped after a given number of generations or after a convergence to a homogeneous population. ES were originally developed by Rechenberg, 1973  and  Schwefel, 1977 to optimize real-value engineering design problems. ES are typically characterized with a notation ( λ ,  μ ) where μ is the population size and λ is the number of new solutions (offspring) created at each generation. We applied here a (1 + 1) ES, meaning that the population consists of only one solution, and at each generation only one new solution is generated. To be more precise, at each generation small modifications are applied to the current solution in the population using a genetic operator called multi-parametric mutator. As a result, a set of modified solutions is obtained. Next, the generated new solutions are compared against the current “parent” solution and should any of the new solutions prove better than the parent, this replaces the parent in the population. Otherwise, the parent solution is kept. The above selection process is deterministic. The multi-parametric mutator works directly on the actual solutions and the size and type of attempted modifications to the parent are varied dynamically during the search based on the parameter setting of the mutator. The search is stopped if no further improvements can be found by the ES. For vehicle routing problems, ES have been previously used by Gehring and Homberger, 1999 , Gehring and Homberger, 2001 , Homberger and Gehring, 1999 , Homberger and Gehring, 2005  and  Mester and Bräysy, 2005 . 2.2. Improvement heuristics We recall here the main features of the improvement heuristics applied within the initial construction heuristic and the multi-parametric mutator. Four of the used five heuristic procedures (forward Or-exchange, backward Or-exchange ( Or, 1976 ), 1-interchange ( Osman, 1993 ) and 2-opt* ( Potvin & Rousseau, 1995 ) are used solely for inter-route improvements, in other words they modify two routes simultaneously whereas 2-opt ( Flood, 1956 ) works on one single route at a time. The basic idea of forward and backward Or-exchange procedures is to reinsert one single customer at a time in an alternate position in the solution vector. Here the solution vector consists of an ordered list of all customer indexes (integers). The solution vector is divided in r subsequent sets (routes) that are in a determined order based on the previously created solution. Forward Or-exchange considers reinsertions only to positions in alternate routes located after the present route of the customer in the current solution vector. Correspondingly, backward Or-exchange attempts reinsertions only to routes located before the origin route in the solution vector. The 1-interchange swaps simultaneously the position of two customers in two different routes and 2-opt* swaps the end (or start) portions of two routes by replacing one edge in both routes with a new one. In other words, it combines two routes so that the last customers of a given route are introduced after the first customers of another route in the order they were in their route of origin. The 2-opt heuristic tries to improve a single route by replacing two of its edges by two other edges. The improvement heuristics are applied here with the best-accept strategy, i.e. all possible moves in the current neighborhood are evaluated and the best improving move is selected. The above described improvement heuristics are applied together in a set called composite. The heuristics in the composite set are repeated in a loop until no further improvement can be found such that after each successful move the heuristic is changed. In the remainder of the paper this composite procedure is called composite local search. Here one must note that for the VRPTW the 2-opt is not applied as it often causes violation of the time window constraints.