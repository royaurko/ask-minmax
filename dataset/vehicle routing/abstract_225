  Usually in a genetic algorithm, individual solutions do not evolve during their lifetimes: they are created, evaluated, they may be selected as parents to new solutions and they are destroyed. However, research into memetic algorithms and genetic local search has shown that performance may be improved if solutions are allowed to evolve during their own lifetimes. We propose that this solution improvement phase can be assisted by knowledge stored within the parent solutions, effectively allowing parents to teach their offspring how to improve their fitness. In this paper, the evolution of each individual of the total population, which consists of the parents and the offspring, is realized with the use of a Particle Swarm Optimizer where each of them has to improve its physical movement following the basic principles of Particle Swarm Optimization until it will obtain the requirements to be selected as a parent. Thus, the knowledge of each of the parents, especially of a very fit parent, has the possibility to be transferred to its offspring and to the offspring of the whole population, and by this way the proposed algorithm has the possibility to explore more effectively the solution space. These ideas are applied in a classic combinatorial optimization problem, the vehicle routing problem, with very good results when applied to two classic benchmark sets of instances. Keywords Vehicle routing problem ; Genetic algorithms ; Particle Swarm Optimization During the last decade nature inspired intelligence became increasingly popular through the development and utilisation of intelligent paradigms in advanced information systems design. Among the most popular nature inspired approaches, when the task is optimization within complex domains of data or information, are those methods representing successful animal and micro-organism team behavior, such as swarm or flocking intelligence (birds flocks or fish schools inspired Particle Swarm Optimization ( Kennedy, Eberhart, & Shi, 2001 )), artificial immune systems (that mimic the biological one ( Dasgupta, 1998  and  De Castro and Timmis, 2002 )), optimized performance of bees ( Baykasoglu, Ozbakor, & Tapkan, 2007 ), or ant colonies (ants foraging behaviors gave rise to ant colony optimization ( Dorigo & Stutzle, 2004 )), etc. But the most popular of the nature inspired methods are the genetic algorithms. Since their introduction ( Goldberg, 1989  and  Holland, 1975 ) a very large number of applications and new ideas have been realized in the context of genetic algorithms and more general in evolutionary computation. Usually in a genetic algorithm we have a number of discrete phases, i.e. the initialization of a population, the selection of the parents, the crossover operator, the mutation operator and the replacement of each generation. But what happens between two generations? If we would like to have a complete evolutionary algorithm we will have to observe how each individual behaves during its life. The parents try to help their offspring in order to learn and evolve and, thus, to become more competitive and to have more possibilities to survive and to become parents for the next generations. A number of different methods may be used to complete an evolutionary algorithm. One way is to observe each of the individuals, separately, without this individual having any interaction and influence with the other members of the population. In the context of the genetic algorithms, this will be realized with the use of a single or a more complex local search strategy. The other way is to have an interaction between the individuals. In this paper, this interaction is realized with the use of a Particle Swarm Optimization Algorithm ( Kennedy & Eberhart, 1995 ). In each generation, all the individuals (parents and offspring) are considered as a single swarm and they try to improve their solution (i.e., the offspring to learn from their parents) by following the physical movement of the best particle of the whole swarm. Thus, in this paper, we focus on how each individual can be evolved with the use of the Particle Swarm Optimization (PSO) algorithm. At the end of each phase of the Particle Swarm Optimization the fittest of the whole swarm survive and move to the next phase of the genetic algorithm, i.e. in the selection of the parents phase of the genetic algorithm. An advantage of the application of a PSO algorithm in the evolutionary part of the algorithm is that, in contrary to other metaheuristics, there are only two variables for each individual of the population that will have to be calculated in each iteration, the position and the velocity. The reason that a memetic algorithm (genetic algorithm with a local search phase ( Moscato & Cotta, 2003 )) is used instead of a classic genetic algorithm is that it is very difficult for a pure genetic algorithm to effectively explore the solution space. A combination of a global search optimization method with a local search optimization method usually improves the performance of the algorithm. In this paper instead of using a local search method to improve each individual separately, we use a global search method, Particle Swarm Optimization, and, thus, each individual does not try to improve its solution by itself but it uses knowledge from the solutions of the whole population. Another goal of our research is to achieve as good as possible results in a very short computational time. This goal led us to use two different procedures one as a speeding up technique (the Expanding Neighborhood Search – ENS) and one for the production of as good as possible initial solutions (the MPNS-GRASP). Thus, the combination of a Genetic Algorithm and a PSO algorithm with a very fast local search strategy, like the Expanding Neighborhood Search strategy ( Marinakis et al., 2005a  and  Marinakis et al., 2005b ), will lead to a very fast and efficient algorithm and will reduce the computational time of the algorithm making the algorithm suitable for solving very large scale vehicle routing, and more difficult combinatorial optimization, problem. The rest of the paper is organized as follows: In the next section a description of the vehicle routing problem is presented. In the third section, the proposed algorithm, the hybrid genetic – PSO – GRASP – ENS (HybGENPSO) is presented and analyzed in detail. Computational results are presented and analyzed in the fourth section while in the last section conclusions and future research are given.