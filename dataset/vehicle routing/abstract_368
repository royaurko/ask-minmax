Password: Combinatorial optimization problems arise commonly in logistics applications. The most successful approaches to date for solving such problems involve modeling them as integer programs and then applying some variant of the branch and bound algorithm. Although branch and bound is conceptually easy to parallelize, achieving scalability can be a challenge. In more sophisticated variants, such as branch and cut , large amounts of data must be shared among the processors, resulting in increased parallel overhead. In this paper, we review the branch and cut algorithm for solving combinatorial optimization problems and describe the implementation of SYMPHONY, a library for implementing these algorithms in parallel. We then describe a solver for the vehicle routing problem that was implemented using SYMPHONY and analyze its parallel performance on a Beowulf cluster. Keywords Parallel branch and bound ; Branch and cut ; Integer programming ; Combinatorial optimization 1. Introduction A wide variety of problems arising in logistics applications can be viewed as combinatorial optimization problems (COPs). An instance of a COP is defined by a pair and a cost vector , where E is called the ground set and is a family of subsets of the ground set whose members are called the feasible solutions . Each feasible solution S has an associated cost given by c ( S )=∑ e ∈ S c e . The objective is to find a least cost member of (we assume without loss of generality that the problem to be solved is one of minimization ). Examples of fundamental logistics problems that can be viewed as COPs are routing problems, packing problems, facility location problems, scheduling problems, and inventory problems. More elaborate models, such as the vehicle routing problem , combine aspects of these fundamental ones. Solving large-scale instances of these problems can be extremely difficult in practice because the set , although often conceptually easy to enumerate, is usually extremely large. The most successful approaches to date have utilized integer programming techniques. To formulate a given COP as an integer program, we associate an incidence vector with each member of . The feasible solutions are then described as the incidence vectors satisfying a given set of linear inequalities. In what follows, we discuss solution techniques for such integer programs and thus, for the remainder of the paper, we interpret the members of the set directly as incidence vectors rather than as subsets of E. Although formulating a COP as an integer program is usually an easy exercise, most interesting COPs are nonetheless in the complexity class NP-hard and it is usually not possible to explicitly enumerate the member of . The most common solution techniques for these integer programs are instead based on implicit enumeration , usually some variant of the branch and bound algorithm suggested by Land and Doig [41] . We consider one such variant, known as branch and cut , in which the bounds are obtained by the solution of a linear programming relaxation augmented by inequalities valid for the set . Branch and cut uses a divide and conquer strategy and lends itself naturally to parallelization. However, its effectiveness depends on the sharing of large amounts of information among processors, namely the valid inequalities used to augment the LP relaxations, which makes scalability a challenge. This paper discusses our approach to the parallelization of this algorithm and provides an analysis of its scalability. The literature on parallel computation in general and parallel branch and bound in particular is rich and varied, so we will mention only a few closely related papers here. Kumar and Gupta provide an excellent general introduction to the analysis of parallel scalability in [37] . Good overviews and taxonomies of parallel branch and bound algorithms are provided in both [27]  and  [55] . Eckstein et al. [22] also provides a good overview of the implementation of parallel branch and bound. A substantial number of papers have been written specifically about the application of parallel branch and bound to integer programming problems. These include such works as [11] , [20] , [28] , [46]  and  [57] . In the remaining part of the paper, we first describe the vehicle routing problem, a prototypical logistics application, and then use it to illustrate some of the principles involved in solving COPs by branch and cut. In Section 4 , we discuss the design of SYMPHONY, our framework for implementing parallel branch and cut. After describing the framework, we illustrate its use by discussing the implementation of a basic VRP solver using SYMPHONY. Finally, we present computational results and an analysis of SYMPHONY’s scalability. 2. The vehicle routing problem We consider the classical vehicle routing problem (VRP), introduced by Dantzig and Ramser [21] . In this problem, a quantity d i of a single commodity must be delivered to each customer i ∈ N =[1,…, n ]={1,…, n } from a central depot {0} using k identical delivery vehicles of capacity C. The objective is to minimize total cost, with c ij ⩾0 denoting the cost of transporting goods from i to j, for 0⩽ i , j ⩽ n . Note that this cost does not depend on the quantity transported and that the cost structure is assumed symmetric , i.e., c ij = c ji and c ii =0. Conceptually, a solution for this problem consists of a partition { R 1 ,…, R k } of N into k routes , each satisfying ∑ j ∈ R i d j ⩽ C , and a corresponding permutation σ i of each route specifying the service ordering. A number of authors have considered solution techniques for this problem, e.g., [1] , [5] , [12] , [16] , [24]  and  [25] . Most of these utilize some form of branch and bound. Numerous classes of valid inequalities, as well as algorithms for generating them in a branch and cut framework, have also been proposed (see, e.g., [4] , [6] , [7] , [12] , [14] , [19] , [42] , [43]  and  [44] ). An excellent overview of the use of branch and cut algorithms for solving the VRP is contained in [48] .