Password: We consider a multiple-vehicle routing problem with split pick-ups (mVRPSP). This problem involves multiple suppliers, a single depot, and a fleet of identical capacity trucks responsible for delivering supplies from the suppliers to the depot. Any supplier may be visited by more than one truck, thus allowing split pick-ups. The problem is to determine, for each truck, which suppliers to visit and the size of loads to pick up so as to minimize the total transportation cost for the fleet, which depends on the number of trucks used and their routes. We develop a fundamentally new model for the mVRPSP, a deterministic dynamic program (DP). Although the most natural DP formulation results in a DP with uncountably-infinite state and action spaces, an optimality-invariance condition we establish leads to an equivalent DP with finite state and action spaces. This DP formulation leads to a new exact algorithm for solving the mVRPSP, based on a shortest path search algorithm, which is conceptually simple and easy to implement. Keywords Vehicle routing ; Split deliveries/pick-ups ; Dynamic programming ; Shortest path algorithms 1. Introduction Brought on by competition, the pressure to reduce cost is ever-present in the trucking industry. Often cost reduction results from improving operational processes, such as fleet routing. In this paper we consider a process-related problem of broad and significant interest to the transportation industry; the problem requires the decision-maker to (1) determine the number of trucks needed to transport supplies (e.g., parts, modules, components, material) from a set of suppliers to a single depot (e.g., assembly plant), and (2) for each truck, determine the suppliers it should visit and the amount of supplies it should pick up at each supplier, in order to minimize the total transportation cost. We allow more than one truck to visit each supplier; i.e., we allow split pick-ups . We refer to this problem as the multiple vehicle routing problem with split pick-ups (mVRPSP). Dror and Trudeau (1989) have shown that the advantages of permitting split pick-ups can be significant, although allowing split pick-ups greatly adds to problem complexity, as we discuss in the following section. The problem has traditionally been modelled and solved as a Mixed Integer Program (MIP). Due to the problem complexity, however, it is necessary to use heuristic or approximate solution techniques when solving the majority of instances of the mVRPSP; we discuss the literature on such techniques below. In this paper we present a new concept of optimality-invariance for this problem, and a new approach, formulating it as a deterministic dynamic program (DP). This approach was developed as a result of a collaboration with Ryder Integrated Logistics (RIL), a third-party logistics provider. As our discussions with RIL personnel indicated, when a logistics provider is responsible for transporting supplies from the same set of suppliers to the depot on a regular basis, truck dispatchers do not change the routing decision made for one such instance of the mVRPSP when the supply amounts vary slightly. In this paper, we describe the concept of optimality-invariance , i.e., we precisely characterize which variations in the supply amounts will not change the optimal collection of truck routes that should be used. The second contribution of this paper is an alternative model for the mVRPSP, which we formulate as a DP. Although the most natural such formulation for the mVRPSP entails uncountably-infinite state and action spaces, we show, using the concept of optimality-invariance, that it is possible to modify the formulation to obtain a DP with finite state and action spaces. Based on the above formulation, we present a new, exact, algorithm for solving the mVRPSP. The algorithm is a particular implementation of a shortest path search algorithm in the directed network associated with the finite state DP above, and hence is conceptually simple and easy to implement. We prove that the solution procedure we present is guaranteed to produce an optimal solution to the mVRPSP upon termination. In addition, we present some encouraging, albeit preliminary, computational examples. Although, in its greatest generality, the approach has a drawback typical of a DP algorithm, the “curse of dimensionality,” we discuss why this method represents a promising new approach for a variety of practical instances of the mVRPSP. Dror and Trudeau (1990) proposed a heuristic algorithm for the mVRPSP and identified certain properties of an optimal solution; this paper, as well as many of the papers cited below, rely on these properties. Dror et al. (1994) strengthened the MIP formulation of the mVRPSP by establishing several families of valid inequalities. They outlined a two-part branch-and-bound procedure, which makes use of these valid inequalities both to perform branching and to obtain tighter lower bounds on the value of the optimal solution to be used in the branch-and-bound algorithms. Although a full implementation of their algorithm would constitute a complete branch-and-bound procedure, and hence will eventually terminate with an optimal solution, the authors chose to implement only the first part of the algorithm (essentially, solving the relaxed problem at the root of the branch-and-bound tree), since their primary goal was to investigate the strength of the derived valid inequalities. They report gaps from 0% to 9% between the upper and lower bounds on the optimal objective value, where the gap of 0% was obtained in one problem instance with 10 suppliers. To our knowledge, the complete, and hence exact, algorithm has not been implemented. Hence, feasible solutions of the mVRPSP cannot be inferred from the obtained output. Belenguer et al. (2000) studied the facial structure of the mVRPSP polyhedron, and also identified several classes of valid inequalities. Based on a heuristic procedure for the identification of violated constraints, they presented a cutting-plane algorithm which identifies a lower bound on the optimal objective value. They considered instances with up to 48 suppliers, and reported gaps between 0% and 12%. Once again, a feasible solution of the mVRPSP cannot in general be obtained from the output of this algorithm. To our knowledge, there has been no numerical evaluation of MIP-based solution procedures producing solutions for the mVRPSP that are provably optimal, which is the main feature of the approach we present in this paper. Other heuristic algorithms for the mVRPSP were presented in Frizzell and Griffin, 1995  and  Sierksma and Tijssen, 1998 . Ho and Haugland (2004) present a tabu-search heuristic for the mVRPSP with time window constraints on visits to the suppliers. It is interesting to note that the majority of computational experiments performed in the above papers considered instances of the mVRPSP in which each supplier had less than a truckload of supplies to be picked up. One exception is the paper by Sierksma and Tijssen (1998) , where the authors argued that the approach in which dedicated routes are used to reduce the amount of supplies to less than a truckload in every location can lead to sub-optimal solutions when side constraints are imposed on the possible routes (in their example, by an upper bound on the length of a route). In this paper, the supply amounts may exceed one truckload. In contrast with the traditional MIP formulations, we propose an entirely new way to approach the mVRPSP, namely, we model the mVRPSP as a dynamic program (DP). The state of this DP is the vector of supplies a  = ( a 1 , … ,  a M ), where M is the number of suppliers, and the non-negative real number a i represents the number of truckloads of supplies that needs to be transported from supplier i to the assembly plant. For example, if a  = (1.4, 0.5), then there are two suppliers; supplier 1 has 1.4 truckloads for pick-up, and supplier 2 has 0.5 truckloads for pick-up. The resulting state space is the non-negative orthant of R M R M . Given a supply vector a , an action for this DP is a set of suppliers to be visited and the sizes of loads, i.e., number of truckloads of supplies to be picked up from these suppliers, by a single (capacitated) truck. We represent such an action by a non-negative vector w  = ( w 1 , … ,  w M ) such that w  ⩽  a   and ∑ i = 1 M w i ⩽ 1 . The set of all such actions represents the action space.