Password: This paper documents our investigation into various heuristic methods to solve the vehicle routing problem with time windows (VRPTW) to near optimal solutions. The objective of the VRPTW is to serve a number of customers within predefined time windows at minimum cost (in terms of distance travelled), without violating the capacity and total trip time constraints for each vehicle. Combinatorial optimisation problems of this kind are non-polynomial-hard (NP-hard) and are best solved by heuristics. The heuristics we are exploring here are mainly third-generation artificial intelligent (AI) algorithms, namely simulated annealing (SA), Tabu search (TS) and genetic algorithm (GA). Based on the original SA theory proposed by Kirkpatrick and the work by Thangiah, we update the cooling scheme and develop a fast and efficient SA heuristic. One of the variants of Glover's TS, strict Tabu, is evaluated and first used for VRPTW, with the help of both recency and frequency measures. Our GA implementation, unlike Thangiah's genetic sectoring heuristic, uses intuitive integer string representation and incorporates several new crossover operations and other advanced techniques such as hybrid hill-climbing and adaptive mutation scheme. We applied each of the heuristics developed to Solomon's 56 VRPTW 100-customer instances, and yielded 18 solutions better than or equivalent to the best solution ever published for these problems. This paper is also among the first to document the implementation of all the three advanced AI methods for VRPTW, together with their comprehensive results. Keywords Vehicle routing problem ; Time windows ; Combinatorial optimisation ; Heuristics ; Simulated annealing ; Tabu search ; Genetic algorithm 1. Introduction Logistics may be defined as ‘the provision of goods and services from a supply point to various demand points’ [2] . A complete logistic system involves transporting raw materials from a number of suppliers or vendors, delivering them to the factory plant for manufacturing or processing, movement of the products to various warehouses or depots and eventually distribution to customers. Both the supply and distribution procedures require effective transportation management. Good transportation management can practically save a private company a considerable portion of its total distribution cost. Potential cost savings constitute: lowered trucking cost due to more optimal routes and shorter distances, reduced in-house space and related costs, less penalty incurred due to untimely delivery. One of the most significant measures of transportation management is effective vehicle routing. Optimising of routes for vehicles given various constraints is the origin of vehicle routing problems (VRPs). Fig. 1 describes a typical VRP. The solution includes two routes: Depot→7→8→9→11→12→Depot; Depot→2→3→1→4→5→6→10→Depot. Sometimes the depot is denoted as 0. The vehicle routing problem with time windows (VRPTW) is a well-known non-polynomial-hard (NP-hard) problem, which is an extension of normal VRPs, encountered very frequently in making decisions about the distribution of goods and services. The problem involves a fleet of vehicles set off from a depot to serve a number of customers, at different geographic locations, with various demands and within specific time windows before returning to the depot. The objective of the problem is to find routes for the vehicles to serve all the customers at a minimal cost (in terms of travel distance, etc.) without violating the capacity and travel time constraints of the vehicles and the time window constraints set by the customers. To date, there is no consistent optimising algorithm that solves the problem exactly using mathematical programming. Instead, many heuristic methods have been designed to solve VRPTW to near optima. Fig. 1.  In Marshall Fisher's survey [4] , he categorised vehicle routing methods into three generations. The first generation was simple heuristics developed in the 1960s and 1970s, which were mainly based on local search or sweep. Since these earlier studies were not well documented, it is hard to compare the results they obtained 30 years ago with the more recent solutions. The second generation, mathematical programming based heuristics, were near-optimisation algorithms that are very different from normal heuristics. These include the generalised assignment problems and set partitioning to approximate the VRP. Their results are usually superior to that of simple heuristics [4]  and  [20] . In fact for linear objective functions, some of these techniques are able to stretch to the optima. The third generation, or the one that is currently undergoing heavy research is exact optimisation algorithms and artificial intelligence methods. Among these, the most successful optimisation algorithms are K-tree, Lagrangian relaxation, etc., while the top AI representatives in VRPTW are simulated annealing (SA), Tabu search (TS) and genetic algorithms (GAs). These algorithms are discussed briefly as follows: Kolen et al. [10] presented the method of branch and bound , which is among the first optimisation algorithms for VRPTW. The method calculates lower bounds using dynamic programming and state space relaxation. Branching decisions are taken on route-customer allocations. The method has successfully solved the problem involving 15 customers. Fisher [3] introduces an optimisation algorithm in which lower bounds are obtained from a relaxation based on a generalisation of spanning trees called K - trees . Capacity constraints are handled by introducing a constraint requiring that some set S , S ⊂ C , of the set of customers must be served by at least k ( S ) vehicles. This constraint is Lagrangian relaxed and the resulting problem is still a K -tree problem with modified arc costs. Time window constraints are treated similarly. A constraint, requiring that not all arcs in a time violating path can be used, is generated and Lagrangian relaxed. The method has solved some of the 100-customer Solomon benchmark problems [18] . One of the effective approaches at present is the shortest path composition . The fundamental observation is, the only constraint which ‘links’ the vehicles together is that each customer in the network must be visited only once. The problem that consists of the rest of the constraints is an elementary shortest path problem with time windows and capacity constraints (ESPPTWCC) for each vehicle. Although this problem is strictly NP-hard, there are a few efficient dynamic programming algorithms for the slightly relaxed programs. Two decompositions have been investigated computationally, namely Dantzig – Wolfe decomposition and variable splitting . Desrochers et al. [25] implemented Dantzig–Wolfe decomposition, and solved up to some of the 100-customer Solomon benchmark problems. Researchers at Technical University of Denmark [9] , on the other hand, suggested using variable splitting to solve the VRPTW with similar performance. Thangiah et al. [21] developed a λ - interchange local search descent ( LSD ) method that uses a systematic insertion and swapping of customers between routes, defined as λ -interchange operators. Due to computation burden, only 1-interchange and 2-interchange are commonly used, which allows up to one or two customers to be inserted or swapped at one time. Although it is a fast algorithm, the performance is poor without the help from other heuristics. SA, first proposed by Kirkpatrick [8] , searches the solution space by simulating the annealing process in metallurgy. The algorithm jumps to distant location in the search space initially. The step of the jumps is reduced as time goes on or as the temperature ‘cools’. Eventually, the process will turn into a LSD method. Osman [14] has applied SA to solve the VRP by moving one customer from one route to another or exchanging two customers from two routes. TS is a memory-based search strategy that chooses the best solution contained in N ( S ) that does not violate certain restrictions that prevent cycling. Usually, these restrictions are stored as queues in a structure called a Tabu list . Typical restrictions prevent making a move that has been done within the last t iterations, and a solution that has been encountered in the last t iterations is usually forbidden as well. TS stops after a fixed number of iterations. Gerdreau et al. applied TS using a neighbourhood that can be constructed by moving a single customer from one route to another. Osman and Talliard [14] used a neighbourhood that consists of all solutions obtained from inserting a customer and swapping two customers.