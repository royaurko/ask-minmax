Password: In the Dial-a-Ride problem (DARP) users specify transportation requests between origins and destinations to be served by vehicles. In the dynamic DARP, requests are received throughout the day and the primary objective is to accept as many requests as possible while satisfying operational constraints. This article describes and compares a number of parallel implementations of a Tabu search heuristic previously developed for the static DARP, i.e., the variant of the problem where all requests are known in advance. Computational results show that the proposed algorithms are able to satisfy a high percentage of user requests. Keywords Dial-a-ride problem ; Parallel computing ; Metaheuristics 1. Introduction The Dial-a-Ride problem (DARP) arises in contexts where n users specify transportation requests between origins and destinations, subject to scheduling constraints. These requests must be satisfied in a cost effective fashion by a fleet of m vehicles, subject to a number of operational constraints. The most common application of the DARP is encountered in door-to-door transportation services for the elderly and the handicapped (see, e.g., Madsen et al. [8] , Toth and Vigo [10]  and  [11] , and Borndörfer et al. [1] ). With the ageing of the population and the need to reduce public expenditures in most western societies, we believe dial-a-ride services will gain in popularity in coming years and the need to run these efficiently will also increase. Dial-a-ride services operate according to one of two modes. In the static mode all requests are known in advance, typically one day before transportation actually takes place. In the dynamic mode requests are gradually revealed and assigned to existing vehicle routes in real-time so that a priori planning is impossible. In practice, the distinction between these two modes is not always clear cut. Even if planned routes are available, changes may be necessary due to last minute cancellations. Also, in dynamic environments, a large number of requests are often known at the start of the planning horizon. There also exist several versions of the DARP for both modes since the objective, constraints and operating rules vary from one context to another. In the last 20 years or so, several models and algorithms have been devoted to the DARP. For a recent overview, see Cordeau and Laporte [3] . With a few exceptions, most available algorithms are heuristics. Tabu search (TS)––see, e.g., Cordeau and Laporte [4] ––stands out as a very powerful tool for the DARP since it is at the same time highly flexible and efficient. Flexibility stems from the capacity of handling a large number of variants within the same search framework. Efficiency is associated with solution quality. It is now clear that TS is capable of consistently generating high quality solutions on a large variety of routing problems (see, e.g., Cordeau et al. [2] ). On the negative side the running time of TS algorithms can be rather high. Thus, using real data from a Danish transporter (with n =200 and 295), Cordeau and Laporte have run three versions of their TS algorithm. These versions vary in the thoroughness of the exploration of the solution space and yield highly varying running times. The simplest version yielded computing times varying between 13.21 and 28.40 min on a Pentium 4, 2 GHz computer, while the most thorough version required between 104.48 and 267.82 min. The improvement in solution quality between the two versions is almost 6%. There are two reasons why it is important to devise faster algorithms. First, there exist several contexts where the problem size is much larger (the number of requests per day in some European and North-American cities often exceeds 2000). Second, while it makes sense to run an algorithm for a few hours in a static context, much faster response times are required in a dynamic environment (see, e.g., [6] and [7] ). In fact whenever a user makes a transportation request by telephone or on the internet, the operating system should be able to tell, within a few seconds, whether the request can be accommodated. In addition, if the request is accepted, it should be embedded in the existing vehicle routes within a relatively short time (no more than ten minutes, say). One natural way to speed up computation time is through the use of parallel computing. We report on the use of a number of parallel implementations of the Cordeau and Laporte [4] static DARP heuristic in a real-time context. The remainder of this article is organized as follows. In Section 2 , we describe the main features of our version of the DARP. This is followed by a summary of the single processor static TS heuristic in Section 3 , and by its parallel and dynamic implementations in Section 4 . A computational assessment of the parallel and dynamic implementations is presented in Section 5 and conclusions follow in Section 6 . 2. Problem definition As is often the case in dial-a-ride contexts, users specify an outbound request from their home to a destination (e.g., a hospital) and an inbound request for the return trip. To achieve a fair balance between user convenience and the transporter's cost, we believe users should be able to specify windows on the arrival time of their outbound journey and on the departure time of their inbound journey. The transporter guarantees each user a maximal ride time , i.e., an upper bound on the time spent by a user in the vehicle. This can either be a constant, or a value obtained by multiplying the minimal achievable travel time by a preset constant. Formally, the static DARP is defined as follows. Let G =( V , A ) be a complete graph where V ={ v 0 , v 1 ,…, v 2 n } is the vertex set and A ={( v i , v j ): v i , v j ∈ V , i ≠ j } is the arc set. Vertex v 0 represents a depot at which is based a fleet of m vehicles, and the remaining 2 n vertices represent origins and destinations for the transportation requests. Each vertex pair ( v i , v i + n ) represents a request for transportation from origin v i to destination v i + n . With each vertex v i ∈ V are associated a load q i (with q 0 =0), a non-negative service duration d i (with d 0 =0) and a time window [ e i , l i ], where e i and l i are non-negative integers. The load is equal to 1 for vertices v 1 ,…, v n and to −1 for vertices v n +1 ,…, v 2 n . Service duration corresponds to the time needed to let the client get on or off the vehicle. Let T denote the end of the planning horizon. In the case of an outbound request, it is assumed that e i =0 and l i = T . Similarly, e i + n =0 and l i + n = T for an inbound request. Each arc ( v i , v j ) has an associated non-negative cost c ij and a non-negative travel time t ij . Finally, let L denote the maximum ride time of a client. The DARP consists of designing m vehicle routes on G such that (i) every route starts and ends at the depot; (ii) for every request i , vertices v i and v i + n belong to exactly one route and vertex v i + n is visited later than vertex v i ; (iii) the load of vehicle k does not exceed at any time a preset bound Q k ; (iv) the total duration of route k does not exceed a preset bound T k ; (v) the service at vertex v i begins in the interval [ e i , l i ], and every vehicle leaves the depot and returns to the depot in the interval [ e 0 , l 0 ]; (vi) the ride time of any client does not exceed L ; (vii) the total routing cost of all vehicles is minimized. We denote by A i the arrival time of a vehicle at vertex v i , by B i ⩾max{ e i , A i } the beginning of service at vertex v i , and by D i = B i + d i the departure time from vertex v i . The time window constraint at vertex v i is violated if B i > l i . However, arrival before e i is allowed and the vehicle then incurs a waiting time W i = B i − A i . The ride time associated with request i is computed as L i = B i + n − D i . If there were no ride time constraints, it would always be optimal to set B i =max{ e i , A i }. However, it may sometimes be profitable to delay the beginning of service at vertex v i so as to reduce the unnecessary waiting time at vertex v i + n (or at any other vertex visited between v i and v i + n ) and thus, the ride time associated with request i .