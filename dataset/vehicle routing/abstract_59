Password: This paper presents an algorithm that builds on the Savings based Ant System presented in [Proceedings of the Genetic and Evolutionary Computation Conference (GECCO 2002), Morgan Kaufmann, San Francisco, 2002] and enhances its performance in terms of computational effort. This is achieved by decomposing the problem and solving only the much smaller subproblems resulting from the decomposition. The computational study and statistical analysis conducted both on standard benchmark problem instances as well as on new large scale Vehicle Routing Problem instances will show that the approach does not only improve the efficiency, but also improves the effectiveness of the algorithm leading to a fast and powerful problem solving tool for real world sized Vehicle Routing Problems. Keywords Meta-heuristics ; Ant System ; ACO ; Decomposition ; Vehicle Routing Problem 1. Introduction Goods distribution contributes approximately 20% to the total costs of an average product. This is caused by the fact that transportation occurs between any two subsequent members of a goods’ supply chain and also between the chain and the final consumers. Both firms and academic researchers have recognized the huge potential for optimization in this area. Formally, most problems in the domain of goods distribution can be viewed as Vehicle Routing Problems (VRP). The objective of the VRP is to find a set of minimum cost routes, starting and ending at a single depot and serving the known demands of a number of customers. Each customer must be served exactly once, i.e. order splitting is not an option. Furthermore, vehicle capacity and (possibly) driving time restrictions must not be violated. A formulation of this problem can be found in [1] . The VRP has been studied extensively for the last 40 years. As an NP-hard problem real world sized problem instances cannot be solved to optimality within reasonable time (in fact there are no exact algorithms available that consistently solve problems with more than 50–75 customers, see [2] ). For more information about the theory of NP-completeness we refer to [3] . However, enormous progress was made concerning approximate solution techniques. Starting with ‘simple’ constructive mechanisms such as the Clarke and Wright Savings algorithm [4] or basic improvement methods such as the 2-opt local search [5] researchers have turned to ever more complicated methods. This transition has led to the development of so-called meta-heuristics, which guide subordinate heuristics to avoid or overcome local optimality. To date the best approaches for the VRP are based on Tabu Search (TS). In [6] we have presented a Savings based Ant System (SbAS) and have shown that this approach is competitive to the best TS algorithms. However, while these approaches (TS or SbAS) find excellent solutions, their computational requirements are huge compared to the ‘simple’ techniques of the early years. More specifically, most of the meta-heuristic approaches show poor scaling behavior such that the runtime for real world sized problem instances is prohibitive. For example, for 50 customer instances our SbAS was able to find solutions with 0% relative deviation from the best known results within . Solving problems with 199 customers took up to and the obtainable solution quality was almost 2% off the best known solution. Similar scaling applies to most TS approaches. Thus, most commercial tools for solving VRP like problems of real world size are based on rather simple constructive or improvement techniques. Recently, various researchers have acknowledged this fact and various methods to speed up the search (cf. e.g. [7]  and  [8] ) have been proposed. On the other hand, commercial use of optimization tools depends not only on the obtainable solution quality and the time required to reach a solution, but also on the flexibility and the simplicity of an approach (cf. [9] ). Most meta-heuristics also score low on these two dimensions when compared to classic heuristics. Apart from these algorithmic observations we learned from our industry partners that human dispatchers tend to cluster customers according to postal codes or other regional characteristics—like rivers, highways or mountains—before they solve the much smaller subproblems for each cluster separately. These above-mentioned issues led to the development of our new algorithm. The main idea is to decompose large problems into a number of smaller problems that can be solved both more effectively (i.e. with a better solution quality) and more efficiently (i.e. with smaller runtime) using our SbAS. In the remainder of this paper, we will refer to our approach as D-Ants (for Decomposition-Ants). Note, that a related decomposition approach was used in combination with a TS algorithm by Taillard (cf. [7] ), where the TS procedure employed solves only some subproblems. Besides the obvious difference in the solution technique used—TS versus Ant System—the approaches differ with respect to the decomposition method. The aim of our paper is threefold. First, we want to show that our D-Ants find competitive solutions to the best TS algorithms both in terms of solution quality and computation times for small problem instances. Second, for new large scale problem instances we want to show that our algorithm scales well, leading to some new best found solutions and ‘short’ computation times. Thus, we aim to establish our Ant System as an alternative approach for VRPs. Third, we target flexibility and simplicity. Our decomposition approach is based on the closeness of vehicle routes. It can be easily understood and implemented. Further, it can without modifications be applied to a number of VRPs with additional side constraints. The outline of the remainder of this paper is as follows. In the next section, we discuss related literature for the VRP with particular emphasis on two approaches that explicitly aim to speed up the search, namely the algorithm of Taillard (cf. [7] ) and the approach of Toth and Vigo (cf. [8] ). After that we focus on the detailed description of our new approach in Section 3 . We will present results of a comprehensive computational study in Section 4 before we conclude with an outlook on future research. 2. Solving (large scale) VRPs In this section we will review some related approaches for the VRP. More specifically, we will first review two constructive heuristics, namely the Clarke and Wright Savings algorithm proposed in [4] and the Sweep algorithm due to Gillett and Miller (cf. [10] ) as these algorithms are incorporated in our D-Ants approach. We will then briefly discuss the latest TS developments for the VRP. In this context we will particularly focus on two different approaches to efficiently solve (large scale) VRPs by using different techniques to speed up the search. The first one, namely Taillard's algorithm (cf. [7] ) is based on problem decomposition. The second one, namely the Granular TS by Toth and Vigo (cf. [8] ) is based on a significantly reduced graph of the complete problem. 2.1. Constructive heuristics for the VRP One of the most elegant algorithms for the VRP is the Savings algorithm proposed in 1964 by Clarke and Wright (cf. [4] ). Starting from an initial solution, where all customers i are assigned to separate tours 0– i –0, the savings of combining any two customers i and j are computed as where d i 0 corresponds to the distance between customer i and the depot 0. The resulting savings values are then sorted in decreasing order. Iteratively, customers are combined to partial tours according to the sorted savings list until no more combinations are feasible. A combination is infeasible if it violates either the capacity or the tour length restrictions. Another constructive algorithm for the VRP is the Sweep algorithm proposed by Gillett and Miller (cf. [10] ). The algorithm requires the coordinates of the customers and the depot as inputs. Given these coordinates and an arbitrarily chosen seed customer, the remaining customers are sorted according to the polar angle they span with the depot and the seed customer. Iteratively, the algorithm extends its current solution by taking the next customer from the list and either adding it to the current tour (if this is feasible) or closing the current tour and initializing a new one with the chosen customer. Once all customers are assigned to tours the algorithm stops. In fact, it is customary to run the algorithm starting with each customer as a seed customer once and taking the best solution. The two algorithms can be extended by applying some local search to the resulting tours. The main difference between the algorithms lies in the fact, that the Savings algorithm builds tours in parallel, while the Sweep algorithm considers only one tour at a time.