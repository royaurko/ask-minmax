Password:   We present EDUK, an efficient dynamic programming algorithm for the unbounded knapsack problem. It is based primarily on a new and useful dominance relation, called threshold dominance , which is a strict generalization of all the previously known dominance relations. We show that combining it with a sparse representation of the iteration domain and the periodicity property leads to a drastic reduction of the solution space. We present computational experiments with various data instances to validate our ideas and demonstrate the efficiency of EDUK vis-à-vis the well-known exact algorithm MTU2. Keywords Integer programming ; Dominances ; Dynamic programming ; Periodicity ; Combinatorial optimization 1. Introduction The unbounded knapsack problem (UKP) is a classic NP- hard , combinatorial optimization problem with a wide range of applications [6] , [10] , [12]  and  [13] . It may be formulated as follows: we are given a knapsack of capacity c , into which we may put n types of objects. Each object of type i has a profit , , and a weight , , ( , , n and c are all positive integers, and we have an unbounded number of copies of each object type). Determine the number , of i th type objects that maximize total profit without exceeding capacity, i.e., equation ( 1 ) The two classic approaches for solving this problem exactly are branch and bound (B&B) [12] and dynamic programming (DP) [6] , [10]  and  [13] , the subject of this paper. DP takes time, and works in two phases: in the forward phase, we calculate the optimal value of the profit function by tabulation of a recurrence equation, and then we use this in the backtracking phase to determine an actual solution which has this optimal profit. Since the problem is NP- hard , a number of schemes have been proposed for reducing the search space. The three important ones relevant to this paper are dominance , periodicity and sparsity . In 1963, Gilmore and Gomory [8] proposed the notion of dominance (called simple dominance in this paper). Intuitively, if an object type has a larger (or no smaller) weight, and smaller (or no larger) profit than another, the former may never occur in an optimal solution. Martello and Toth [12] introduce a more powerful dominance (called multiple dominance in this paper). Many extensions have been proposed over the years [4] , [5] , [14]  and  [17] . Of particular interest is when an object type has larger (or no smaller) weight and lower (or no larger) profit than a positive linear combination of (a subset of) the other object types (called collective dominance in this paper). Another well-known approach to reduce the search space is available for dynamic programming based algorithms. In 1966 Gilmore and Gomory [7] described a periodicity property which states that beyond a certain capacity, the only object type that contributes further to an optimal solution is the best one (the one with the highest profit-to-weight ratio). The third technique, again applicable for dynamic programming, was recently presented by Andonov and Rajopadhye [2] . It is based on the fact that the standard recurrence is monotonic. This allows a “sparse” representation of the computation (we need to tabulate only certain critical points, and not the entire recurrence), and provides for considerable reduction of the search space. The goal of this paper is to show how to exploit all these properties together with efficient backtracking. Our main contributions are as follows: • We introduce and formalize a new dominance called threshold dominance . We show how threshold dominance includes collective dominance, which itself is a strict generalization of multiple dominance. We show that collective dominance is maximal , in terms of coefficient reduction. • We show that threshold dominance provides an easy test for detecting when periodicity is attained. • We design a dynamic programming algorithm, EDUK, which incorporates these properties and the sparse representation into a slice wise evaluation of a well-known (but not commonly used) recurrence for the forward phase. EDUK needs no preprocessing, which is incorporated into the main algorithm itself. • We present a backtracking algorithm with the same performance as the well-known idea of Hu [10] of computing an auxiliary recurrence, but without any auxiliary information. In addition, our technique enables us to determine all solutions. • We validate our algorithm by numerous computational experiments. We also indicate some of the limitations in the currently proposed random data sets and also study the sensitivity of the running time to the capacity.