Password: We address a variant of the classical knapsack problem in which an upper bound is imposed on the number of items that can be selected. This problem arises in the solution of real-life cutting stock problems by column generation, and may be used to separate cover inequalities with small support within cutting-plane approaches to integer linear programs. We focus our attention on approximation algorithms for the problem, describing a linear-storage Polynomial Time Approximation Scheme (PTAS) and a dynamic-programming based Fully Polynomial Time Approximation Scheme (FPTAS). The main ideas contained in our PTAS are used to derive PTAS's for the knapsack problem and its multi-dimensional generalization which improve on the previously proposed PTAS's. We finally illustrate better PTAS's and FPTAS's for the subset sum case of the problem in which profits and weights coincide. Keywords Packing ; Approximation algorithms ; Dynamic programming ; Knapsack problem 1. Introduction The classical Knapsack Problem (KP) is defined by a set N :={1,…, n } of items, each having a positive integer profit p j and a positive integer weight w j , and by a positive integer knapsack capacity c . The problem calls for selecting the set of items with maximum overall profit among those whose overall weight does not exceed the knapsack capacity. KP has the following immediate Integer Linear Programming (ILP) formulation: where each binary variable x j , j ∈ N , is equal to 1 if and only if item j is selected. The Subset Sum Problem (SSP) is the special case of KP arising when p j = w j for each j ∈ N . For notational convenience, later in the paper we will use the notation for some S ⊆ N . KP has widely been studied in the literature, see the book of Martello and Toth [13] and the recent survey by Pisinger and Toth [19] for a comprehensive illustration of the problem. Among the several applications of KP, two very important ones are the following. First, KP is the subproblem which appears when instances of the one-dimensional Cutting Stock Problem are solved by column generation, see e.g. [22] . Second, the separation of cover inequalities in cutting-plane/branch-and-cut approaches to general ILPs calls for the solution of a KP, see e.g. [15] . The m-Dimensional Knapsack Problem ( m -DKP) is the generalization of KP in which each item nonnegative integer weights positive integer knapsack capacities c 1 ,…, c m are specified. The objective is to select a subset of the items with maximum overall profit among those whose weight does not exceed the knapsack capacity for any of the m dimensions. Formally, the problem can be formulated as (1) subject to (3) and the capacity constraints equation ( 4 ) where M :={1,…, m }. The importance of this problem follows from its generality, namely it is a generic ILP in which all variables are binary and all coefficients nonnegative. In the sequel we refer to m -DKP by implicitly assuming that m is fixed , i.e. not part of the problem input. This implies for instance that a time complexity of O( n m ) will be considered polynomial. In this paper we address a problem which is at the same time a generalization of KP and a special case of 2-DKP, namely the k-item Knapsack Problem ( k KP), which is a KP in which an upper bound of k is imposed on the number of items that can be selected in a solution. The problem can be formulated as (1) , (2) and (3) with the additional constraint equation ( 5 ) equation ( 6 ) Without loss of generality we assume . Actually, for E- k KP we shall assume that, for each j ∈ N , w j plus the sum of the smallest k −1 weights of items in N ⧹{ j } does not exceed c . The k-item Subset Sum Problem ( k SSP) and Exact k-item Subset Sum Problem (E- k SSP) are the special cases of k KP and E- k KP, respectively, in which item profits and weights coincide. Observe that k KP and E- k KP can easily be transformed into each other. More precisely, any k KP instance can be solved as the following E- k KP. The value of k is the same, whereas the profits and the weights of the original items are multiplied by k and the new capacity is defined as ( k +1) c −1, where c is the original capacity. Finally, k “dummy” items with profit and weight 1 are added. By definition, an item subset of cardinality, say, k ′⩽ k is feasible for the original k KP instance if and only if it satisfies the knapsack constraint for the E- k KP instance, in which case it can be made feasible by adding k − k ′ dummy items. The ranking by profit of the feasible solutions of the two instances is the same due to profit scaling. On the other hand, E- k KP can be solved as a k KP by adding a suitably large quantity M to the item profits, e.g. M := p ( N ). If the optimal value z * of k KP is smaller than kM then E- k KP has no solution, otherwise its optimal solution value is z * − kM . This latter construction cannot be applied to show that E- k SSP can be transformed into k SSP, in fact we are not aware of any simple transformation between the two problems. k KP is the subproblem to be solved when instances of the Cutting Stock Problem with cardinality constraints are tackled by column generation techniques. For instance the problem appears where the number of pieces cut from each stock is bounded by a constant due to the limited number of knives. k KP also appears in processor scheduling problems on computers with k processors and shared memory. The Collapsing Knapsack Problem presented by Posner and Guignard [20] , which has applications in satellite communication where transmissions on the band require gaps between the portions of the band assigned to each user, can be solved to optimality by considering n k KP problems defined on different capacities but with the same set of items.