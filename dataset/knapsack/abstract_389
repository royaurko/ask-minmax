Password: We consider various special cases of the quadratic 0–1 knapsack problem (QKP) for which the underlying graph structure is fairly simple. For the variant with edge series–parallel graphs, we give a dynamic programming algorithm with pseudo-polynomial time complexity, and a fully polynomial time approximation scheme. In strong contrast to this, the variant with vertex series–parallel graphs is shown to be strongly NP-complete. Keywords Knapsack problem ; Dynamic programming ; Computational complexity ; Approximability ; Approximation scheme 1. Introduction The quadratic 0–1 knapsack problem ( QKP ) was introduced by Gallo et al. [7] as a generalization of the classical knapsack problem. It is formulated as follows: where V ={1,2,…, n } is the set of variables and E is the set of quadratic terms. The a i are called weight coefficients, and the c i and c ij are called cost coefficients. All coefficients and c ij are integral. Throughout this paper, we shall assume that b ⩾0 and that 0⩽ a i ⩽ b for all i ∈ V . Furthermore, we shall assume that a i + a j ⩽ b for all ( i , j )∈ E . Note that we do not make any a priori assumptions on the signs of the cost coefficients c i and c ij . The special case of the QKP where E =∅ is the classical knapsack problem . Hence, QKP is an NP-hard problem. The special case of the QKP where c ij ⩾0 holds for all quadratic coefficients is the so-called supermodular knapsack problem . QKP has been used to model selection problems in telecommunications [19] as well as compiler design problems [13] . Gallo et al. [7] give a branch and bound algorithm for QKP that is based on linear upper bound functions known as upper planes. For the supermodular knapsack problem, the Lagrangian relaxation can be solved efficiently and yields quick and easy upper bounds. Branch and bound algorithms that exploit these bounds have been developed by Billionnet et al. [3] , Chaillou et al. [5] , Gallo and Simeone [8] , Hammer and Rader [10] , Michelon and Veilleux [15] . Another Lagrangian relaxation that is solvable through a number of continuous linear knapsack problems has recently been proposed by Caprara et al. [4] . A few additional ways to solve the general quadratic 0–1 knapsack problem, especially when some of the c ij are negative, are LP relaxations [2] and semidefinite relaxations [11] . For more information on the QKP, we refer the reader to Rader [16] . Until recently, most work on QKP has concentrated on the supermodular case. In addition, very little work has dealt with exploiting the graph–theoretic structure of QKPs. Billionnet [1] has shown that the cardinality-constrained quadratic 0–1 knapsack problem can be solved in O ( n ) steps if the graph G =( V , E ) induced by the objective function is a tree. In this paper, we will derive pseudo-polynomial time algorithms for the special case of QKP where the underlying graph G is edge series–parallel . The class of edge series–parallel graphs contains all trees. In contrast to this, QKP with an underlying vertex series–parallel graph is strongly NP-hard and cannot have a pseudo-polynomial time solution unless P=NP. An approach that has not yet been examined for QKPs are fully polynomial time approximation schemes (FPTAS). An FPTAS is an approximation algorithm that, for any given ε >0, finds a feasible solution with objective value within a factor of (1− ε ) of the optimal objective value. The running time of an FPTAS is polynomially bounded in the input size and in 1/ ε . An FPTAS is the strongest possible polynomial time approximation result that can be derived for an NP-hard problem (unless P=NP). Ibarra and Kim [12] and Lawler [14] gave such an FPTAS for the classical knapsack problem. In this paper, we design an FPTAS for the special case of QKP where the underlying graph G is edge series–parallel and where all cost coefficients are non-negative. Organization of the paper. Section 2 recalls all necessary definitions and facts around edge and vertex series–parallel graphs as will be needed in the rest of this paper. Section 3 describes two dynamic programming algorithms for the QKP on edge series–parallel graphs. The time complexity of one of these algorithms is pseudo-polynomially bounded in the weights, and the time complexity of the other algorithm is pseudo-polynomially bounded in the costs. Section 4 translates the second dynamic programming algorithm into an FPTAS. Section 5 proves the NP-hardness result for vertex series–parallel graphs, and Section 6 contains the conclusion. 2. Series–parallel graphs In this section, we provide definitions of edge series–parallel (ESP) graphs and of vertex series–parallel (VSP) graphs. A standard way of defining edge series–parallel graphs is via so-called 2-terminal graphs; cf. Duffin [6] and Takamizawa et al. [17] . A 2-terminal graph G =( V , E ) is a graph with two special vertices that are called the left terminal and the right terminal. For two 2-terminal graphs we define the following operations: • The series composition of G 1 and G 2 results from identifying the right terminal of G 1 with the left terminal of G 2 . The obtained graph G s is regarded as a 2-terminal graph whose left terminal is the left terminal of G 1 , and whose right terminal is the right terminal of G 2 . • The parallel composition G p = G 1 || G 2 of G 1 and G 2 results from identifying both right terminals with each other and both left terminals with each other. The terminal vertices of G p are these identified terminals. The class of ESP graphs is now defined by the following three rules: (1) The graph consisting of two terminals connected by a single edge is ESP. (2) If G 1 and G 2 are ESP, then and G 1 || G 2 are ESP. (3) No other graphs than those defined by (1) and (2) are ESP. An ESP graph can be decomposed into its atomic parts according to the series and parallel operations in linear time (see [18] ). Essentially, such a decomposition corresponds to a binary tree where all interior vertices are labeled by s (series composition) or p (parallel composition), and where all leaves correspond to edges of the graph. See Fig. 1 for an illustration. Note that there can be different binary tree decompositions for a given edge series–parallel graph. We associate with every interior vertex v of a decomposition tree the ESP graph G ( v ) that is induced by the leaves of the subtree below v . It is well-known that a simple ESP graph G =( V , E ) satisfies | E |⩽2| V |−1.