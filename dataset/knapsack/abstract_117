Password: The Multiple Knapsack Problem (MKP) is the problem of assigning a subset of n items to m distinct knapsacks, such that the total profit sum of the selected items is maximized, without exceeding the capacity of each of the knapsacks. The problem has several applications in naval as well as financial management. A new exact algorithm for the MKP is presented, which is specially designed for solving large problem instances. The recursive branch-and-bound algorithm applies surrogate relaxation for deriving upper bounds, while lower bounds are obtained by splitting the surrogate solution into the m knapsacks by solving a series of Subset-sum Problems. A new separable dynamic programming algorithm is presented for the solution of Subset-sum Problems, and we also use this algorithm for tightening the capacity constraints in order to obtain better upper bounds. The developed algorithm is compared to the mtm algorithm by Martello and Toth, showing the benefits of the new approach. A surprising result is that large instances with n =100 000 items may be solved in less than a second, and the algorithm has a stable performance even for instances with coefficients in a moderately large range. Keywords Integer programming ; Knapsack problem ; Loading ; Dynamic programming 1. Introduction We consider the problem where n given items should be packed in m knapsacks of distinct capacities . Each item j has an associated profit p j and weight w j , and the problem is to select m disjoint subsets of items, such that subset i fits into capacity c i and the total profit of the selected items is maximized. Thus we may formally define the 0–1 Multiple Knapsack Problem (MKP) as the ILP problem equation ( 1 ) where x ij =1 if item j is assigned to knapsack i , and x ij =0 otherwise. It is usual to assume that the coefficients p j , w j and c i are positive integers, and to avoid trivial cases we demand that equation ( 2 ) The first assumption ensures that each item j fits into at least one knapsack as otherwise it may be removed from the problem. If the second inequality is violated, then we may discount the smallest knapsack, as no items fit into it. Finally the last inequality avoids a trivial solution where all items fit into the largest of the knapsacks. There are several applications for MKP, as the problem directly reflects a situation of loading m ships or vehicles. Martello and Toth [1] proposed to use MKP for deciding how to load m liquids into n tanks, when the liquids may not be mixed, and MKP is the immediate generalization of the well-known Cutting-stock Problem to cases where stocks may have different lengths. This problem has several applications in the paper and steel industry [2] . The MKP is NP-hard in the strong sense, and thus any dynamic programming approach would result in strictly exponential time bounds. Several branch-and-bound algorithms for MKP have thus been presented during the last two decades, among which we should mention Hung and Fisk [3] , Martello and Toth [4] , Neebe and Dannenbring [5] , and Christofides et al., [6] . The first two are best suited for problems where several items are filled into each knapsack, while the last two are designed for problems with many knapsacks and few items. This paper follows the first direction of research, as it is devoted to large problem instances where the quotient n / m is relatively large. The presented algorithm is based on the MTM framework by Martello and Toth [7] which has been improved in several respects: Lower bounds are derived by solving a series of Subset-sum Problems, and Subset-sum Problems are also used for tightening the capacity constraints of each knapsack. We use a well-performing 0–1 Knapsack Algorithm for deriving upper bounds through surrogate relaxation, and a new separable dynamic programming algorithm is presented for solving the individual Subset-sum Problems. Moreover efficient reduction rules are applied to determine which items cannot be packed into any of the knapsacks. In Section 2 we will present different upper bounds for the Multiple Knapsack Problem, and use these observations for a general discussion of bound-and-bound algorithms in Section 3 . The discussion leads to an improved algorithm described in Section 4 . Section 5 shows how lower bounds may be achieved by solving a series of Subset-sum Problems, and how the capacity constraints in MKP may be tightened in order to obtain better upper bounds. Section 6 considers some reduction algorithms for the problem, and finally Section 7 compares the presented mulknap algorithm with the mtm algorithm by Martello and Toth [7] . A first version of this paper was presented in [8] . 2. Upper bounds Upper bounds for the MKP may be derived by relaxing some of the side-constraints, where surrogate, Lagrangian and linear relaxations are the most common relaxations. By relaxing the constraint ∑ i =1 m x ij ⩽1, j =1,…, n in formulation (1), Martello and Toth [9] showed that the Lagrangian relaxed problem may be decomposed into m independent 0–1 Knapsack Problems. There is however no optimal choice of the multipliers { λ j } for the relaxation, thus usually a subgradient optimization technique must be used, making these bounds computationally expensive to derive. For the surrogate relaxation optimal multipliers may however be found analytically: Let π 1 ,…, π m be some nonnegative multipliers, then the Surrogate relaxed Multiple Knapsack Problem (SMKP) becomes: equation ( 3 ) The best choice of multipliers π i are those that produce the smallest objective value in (3). Martello and Toth [7] proved that for any instance of MKP, the optimal choice of multipliers π 1 ,…, π m is π i = k for i =1,…, m , where k is a positive constant. With this choice of multipliers SMKP becomes the following ordinary 0–1 Knapsack Problem: equation ( 4 ) where the introduced decision variables x ′ j =∑ i =1 m x ij indicate whether item j is chosen for any of the knapsacks i =1,…, m , and c =∑ i =1 m c i may be seen as the capacity of the united knapsacks. Linear relaxation is a third common technique for deriving upper bounds. We relax the constraint x ij ∈{0,1} in (1) to 0⩽ x ij ⩽1, for i=1,…,m,j=1,…,n . Martello and Toth [1] proved that the objective value of an optimal solution to the linear relaxed MKP is the same as that of an optimal solution to the linear relaxed SMKP. Thus to find the objective value of the linear MKP, we may simply use the Dantzig upper bound of the corresponding 0–1 Knapsack Problems: Assume that the items are ordered according to nonincreasing profit-to-weight ratios p 1 / w 1 ⩾ p 2 / w 2 ⩾⋯⩾ p n / w n and let the break item b be given by where c =∑ i =1 m c i . Then the Dantzig upper bound [9] becomes equation ( 5 ) The linear upper bound may be derived in O( n ) time using the median technique of Balas and Zemel [10] , thus being considerably faster to determine than the previous two bounds. Computational experiments have, however, shown [1] that the linear bound generally is too weak to efficiently cut off branches in an enumerative algorithm.