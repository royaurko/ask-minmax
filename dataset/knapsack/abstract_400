Password: We present an exact separation scheme for identifying most violated extended cover inequalities for application to multidimensional knapsack problems ( MKP ). The minimality of the resulting covers is shown to be a basic property of the criterion used for separation, namely the ratio between left- and right-hand sides of the extended cover inequality looked for. Computational results obtained on a set of randomly generated ( MKP ) instances together with instances from the OR-library with up to 180 variables and 60 constraints show significant reduction in overall computing times as compared with the standard version of Cplex 6.5 in MIP mode using automatic cover inequality generation. 1. Introduction The multidimensional 0–1 knapsack problem ( MKP ) consists in maximizing a linear function ∑ j =1 n c j x j in n 0–1 variables while satisfying a set of m 0–1 knapsack constraints of the form where all coefficients a ij in the constraint matrix are assumed to be nonnegative. General ( MKP ) instances appear to be hard to solve to optimality with the current best MIP software technology, available even for moderate values of n and m . As far as we know, there are only few references in the literature specifically devoted to the exact solution of ( MKP ), and these usually concern very small values of m , the number of knapsack constraints. For the test problems solved in [14]  and  [15] , m does not exceed 7 in all cases, and the largest problems solved have 300 variables for 5 constraints and 80 variables for 7 constraints. See also [11] , [12]  and  [25] . For larger values of m , it seems that an instance of ( MKP ) has basically to be considered as a general 0–1 integer linear program for which more general techniques have to be applied. We note here that ( MKP ) instances with large values of m may naturally arise in applications, for instance in discrete cost optimum network design problems, see [13] . In such problems m may be of the same order of magnitude as n . Most of the research work in the last 10–15 years on solving general integer programs has concentrated on the combined use of branch and bound and cutting-plane generation to tighten the LP relaxations. Among the significant contributions to this research effort, we mention [4] , [6] , [7] , [8] , [9] , [10] , [17] , [21] , [26]  and  [27] . In order to generate violated inequalities (cutting planes) associated with pure 0–1 rows (i.e knapsack constraints with nonnegative coefficients), basic known inequalities or facets for the knapsack polytope are used. Crowder et al. [7] consider the use of cover inequalities ( [2] ) and of (1− k )-configurations ( [24] ) and suggest heuristic separation procedures for these classes of inequalities. Van Roy and Wolsey [26] use the so-called extended cover inequalities and describe a heuristic procedure for identifying violated extended cover inequalities. In this paper, we describe an exact solution procedure (based on the solution of several unidimensional knapsack subproblems) to generate most violated extended cover inequalities. This procedure is based on a new criterion to measure constraint violation, namely the ratio between left- and right-hand sides of the extended cover inequality looked for. It is shown that, as a consequence of using this ratio criterion, minimality of the resulting covers is guaranteed (therefore ensuring that a necessary condition for the inequality to be a facet is satisfied). In order to check the relevance of our separation scheme in the context of solving ( MKP ) problems, extensive computational experiments on a set of randomly generated ( MKP ) instances together with instances from the OR-library with sizes up to 180 variables and 60 constraints have been carried out. The computational results show in a majority of cases quite significant reduction in computing times as compared with the standard version of Cplex 6.5 in MIP mode using automatic cover inequality generation. Moreover, they show that the fraction of total computing time taken by the constraint generation procedure is kept quite small (on average, less than 5% of total computation time). Also, to further evaluate the strength of the generated inequalities, sequential lifting has been systematically applied and it was observed that lifting was possible only on a small fraction (3%) of the cases. Also, for cases were lifting was possible, the improvement in strength (as measured by the increase in the ratio criterion) was quite negligible. 2. A separation scheme for extended cover inequalities 2.1. The maximum ratio criterion and statement of separation subproblem The multiconstraint zero-one knapsack problem is Considering the linear relaxation of ( MKP ), denoted ( R ), and a fractional solution of ( R ), denoted x̄ , the considered problem is to determine some valid inequalities (and, if possible, facet-defining inequalities) violated by x̄ . Finding classes of valid inequalities and facet-defining inequalities for a single knapsack constraint has been the subject of extensive research work in the past (see e.g. [1] , [2] , [3]  and  [24] ). Among the most frequently used valid inequalities are the so-called cover inequalities [2] , (1− k )-configurations [24] and extended cover inequalities. We concentrate here on the use of extended cover inequalities. All the definitions below concern a generic knapsack constraint of the form: ∑ i =1 n α i x i ⩽ β (we assume that α i and β are rationals hence it is not restrictive to assume that they are integers). Moreover, we suppose that the α i coefficients are sorted in nondecreasing order, i.e. 0⩽ α 1 ⩽ α 2 ⩽⋯⩽ α n . Definition 1. From any dependent set C the following valid inequality ( cover inequality ) can be deduced: Definition 2. The extension of a dependent set C , denoted E ( C ), is where N ={1,2,…, n }. It is well known that if C is a dependent set, its extension E ( C ) can be used to generate an extended cover inequality ( ECI ), which is a valid inequality , of the form: Extended cover inequalities induced by minimal-dependent sets are facet defining in many cases, see e.g. the analysis in [21] .