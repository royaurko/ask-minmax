Password: The Knapsack Problems (KPs) are classical NP-hard problems in Operations Research having a number of engineering applications. Several traditional as well as population based search algorithms are available in literature for the solution of these problems. In this paper, a new Modified Binary Particle Swarm Optimization (MBPSO) algorithm is proposed for solving KPs, particularly 0–1 Knapsack Problem (KP) and Multidimensional Knapsack Problem (MKP). Compared to the basic Binary Particle Swarm Optimization (BPSO), this improved algorithm introduces a new probability function which maintains the diversity in the swarm and makes it more explorative, effective and efficient in solving KPs. MBPSO is tested through computational experiments over benchmark problems and the results are compared with those of BPSO and a relatively recent modified version of BPSO namely Genotype–Phenotype Modified Binary Particle Swarm Optimization (GPMBPSO). To validate our idea and demonstrate the efficiency of the proposed algorithm for KPs, experiments are carried out with various data instances of KP and MKP and the results are compared with those of BPSO and GPMBPSO. Keywords Binary Particle Swarm Optimization ; Knapsack Problems ; Sigmoid function 1. Introduction Knapsack Problems (KPs) have been extensively studied since the pioneering work of Dantzig [1] . KPs have lot of immediate applications in industry, financial management. KPs frequently occur by relaxation of various integer programming problems. The family of Knapsack Problems requires a subset of some given items to be chosen such that the corresponding profit sum is maximized without exceeding the capacity of the Knapsack(s). Different types of Knapsack Problems occur, depending upon the distribution of the items and knapsacks: (a) 0–1 Knapsack Problem: each item may be chosen at most once. (b) Bounded Knapsack Problem: if each item can be chosen multiple times. (c) Multiple Choice Knapsack Problem: if the items are subdivided into some finite number of classes and exactly one item must be taken from each class. (d) Multiple or Multidimensional Knapsack Problem: if we have n items and m knapsacks with capacities not necessarily same and knapsack are to be filled simultaneously. All the Knapsack Problems belongs to the family of NP-hard 1 problems. Despite of being NP-hard problems, many large instances of KPs can be solved in seconds. This is due to several years of research which have proposed many solution methodologies including exact as well as heuristic algorithms. 0–1 Knapsack and Multidimensional Knapsack Problems are solved using MBPSO in this paper. Therefore, only 0–1 Knapsack Problem (KP) and Multidimensional Knapsack Problem (MKP) are described here in detail. 1.1. 0–1 Knapsack Problem 0–1 Knapsack Problem (KP) is a typical NP-hard problem in operations research. The classical 0–1 Knapsack problem is defined as follows: We are given a set of n items, each item i having an integer profit p i and an integer weight w i . The problem is to choose a subset of the items such that their total profit is maximized, while the total weight does not exceed a given capacity C . The problem may be formulated so as to maximize the total profit f ( x ) as follows: equation ( 1 ) Maximize f ( x ) = ∑ i = 1 n p i x i , Subject to ∑ i = 1 n w i x i ⩽ C , x i ∈ { 0 , 1 } , i = 1 , 2 , … , n , where the binary decision variables x i are used to indicate whether item i is included in the knapsack or not. Without loss of generality it may be assumed that all profits and weights are positive, that all weights are smaller than the capacity C so each item fits into the knapsack, and that the total weight of the items exceeds C to ensure a nontrivial problem. KP has high theoretical and practical value; and there are very important applications in financial and industrial areas, such as investment decision, budget control, project choice, resources assignment, goods loading and so on. Many exact as well as heuristic techniques are available to solve the 0–1 Knapsack problems. Heuristic algorithms include simulated annealing [2] , genetic algorithm [3] , [4]  and  [5] , ant colony optimization [6]  and  [7] , differential evolution [8] , immune algorithm [9] and particle swarm optimization [10] , [11] , [12] , [13]  and  [14] . 1.2. Multidimensional Knapsack Problem The NP-hard 0–1 Multidimensional Knapsack Problem is a generalization of the 0–1 simple knapsack problem. It consists of selecting a subset of given objects (or items) in such a way that the total profit of the selected objects is maximized while a set of knapsack constraints are satisfied. More formally, the problem can be stated as follows: equation ( 2 ) Maximize f ( x ) = ∑ i = 1 n p i x i , Subject to ∑ i = 1 n w i , j x i ⩽ C j ∀ j = 1 , 2 , … , m , w i , j ⩾ 0 , C j ⩾ 0 , x i ∈ { 0 , 1 } , i = 1 , 2 , … , n , where n is the number of objects, m is the number of knapsack constraints with capacities C j , p i represents the benefit of the object i in the knapsack, x i is a binary variable that indicates x i  = 1, if the object i has been stored in the knapsack and x i  = 0, if it remains out, and w i , j represents the entries of the knapsack’s constraints matrix.