Password:   In this paper, we obtain an (1−e −1 )-approximation algorithm for maximizing a nondecreasing submodular set function subject to a knapsack constraint. This algorithm requires O( n 5 ) function value computations. Keywords Submodular function ; Approximation algorithm 1. Introduction Let I ={1,…, n }. Let B and c i , i ∈ I , be nonnegative integers. In this note, we consider the following optimization problem: equation ( 1 ) where f ( S ) is a nonnegative, nondecreasing, submodular, polynomially computable set function (a set function is (i) submodular if f ( S )+ f ( T )⩾ f ( S ∪ T )+ f ( S ∩ T ) for all S , T ⊆ I and (ii) nondecreasing if f ( S )⩽ f ( T ) for all S ⊆ T ). Nemhauser et al. [6] consider the special case of problem (1) with c i =1, for all i ∈ I . They prove that the simple greedy algorithm has performance guarantee 1−e −1 (we say that an algorithm has performance guarantee α <1 if it always obtains a solution of value at least α times the value of an optimal solution). The main property used in their proof is that a nondecreasing set function f ( S ) is submodular if and only if equation ( 2 ) for all S , T ⊆ I . Wolsey [8] considers problem (1) with arbitrary nonnegative integer weights c i . He presents a modified greedy algorithm, with performance guarantee 1−e − β ≈0.35, where β is a unique root of equation e x =2− x . The max k -cover (or maximum coverage) problem with a knapsack constraint is one of the most interesting special cases of problem (1) . Khuller et al. [3] prove that the greedy algorithm, combined with the partial enumeration procedure due to Sahni [7] , has performance guarantee 1−e −1 ≈0.632. This is the best possible performance guarantee achievable in polynomial time, unless P=NP [1] , even in the case when c i =1, for all i ∈ I . Another well-studied example of a problem of maximizing a nondecreasing submodular set function is the entropy of a positive semidefinite matrix (see [2] , [5]  and  [4] ). In this note, we show that the algorithm by Khuller et al. has performance guarantee 1−e −1 , even for general problem (1) . This algorithm requires O( n 5 ) function value computations. 2. Algorithm and its analysis Next, we describe a modification of the greedy algorithm for solving problem (1) . In the first phase, the algorithm enumerates all feasible solutions (sets) of cardinality one or two. Let S 1 be a feasible set of cardinality one or two that has the largest value of the objective function f ( S ). In the second phase, the algorithm considers all feasible sets of cardinality three. The algorithm completes each such set greedily and keeps the current solution feasible with respect to the knapsack constraint (see the formal description of the second phase in the next paragraph). Let S 2 be the solution obtained in the second phase that has the largest value of objective function, over all choices of the starting set for the greedy algorithm. Finally, the algorithm outputs S 1 if f ( S 1 )⩾ f ( S 2 ) and S 2 otherwise. Below, we formally describe the second phase of the algorithm. For all U ⊆ I such that | U |=3, carry out the following procedure: Let S 0 = U , t =1, I 0 = I . At step t , we have a partial solution S t −1 . Find equation ( 3 ) Let the maximum in (3) be attained on the index i t . Let S t = S t −1 ∪{ i t } and I t = I t −1 if ∑ i ∈ S t −1 ∪{ i t } c i ⩽ B . Otherwise, let S t = S t −1 and I t = I t −1 ⧹{ i t }. Let t = t +1, and go to the next step. Stop when I t ⧹ S t =∅.