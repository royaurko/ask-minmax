Password: The multidimensional 0–1 knapsack problem is one of the most well-known integer programming problems and has received wide attention from the operational research community during the last four decades. Although recent advances have made possible the solution of medium size instances, solving this NP-hard problem remains a very interesting challenge, especially when the number of constraints increases. This paper surveys the main results published in the literature. The focus is on the theoretical properties as well as approximate or exact solutions of this special 0–1 program. Keywords Multidimensional 0–1 knapsack problem ; Heuristics ; Probabilistic and worst-case analysis ; Surrogate duality ; Preprocessing ; Branch-and-bound algorithms 1. Introduction The multidimensional 0–1 knapsack problem (MKP) is a special case of general linear 0–1 programs. Several names have been mentioned in the literature for the MKP: m -dimensional knapsack problem, multidimensional knapsack problem, multiknapsack problem, multiconstraint 0–1 knapsack problem, etc… We choose to refer to the name coined first by Weingartner and Ness [184] , which means without ambiguity that MKP is a generalization of the standard 0–1 knapsack problem ( m =1). Historically, the first examples have been exhibited by Lorie and Savage [120] and by Manne and Markowitz [126] as a capital budgeting model. Basically, the MKP is a resource allocation model which can be stated as where n is the number of items and m is the number of knapsack constraints with capacities b i ( i =1,2,…, m ). Each item j ∈ N requires a ij units of resource consumption in the i th knapsack ( i =1,2,…, m ) and yields c j units of profit upon inclusion. The goal is to find a subset of items that yields maximum profit without exceeding the resource capacities. By its nature, all entries are nonnegative. More precisely, it can be assumed, without loss of generality, that c j >0, b i >0, 0⩽ a ij ⩽ b i and ∑ j =1 n a ij > b i for all j ∈ N and for all i ∈ M (since otherwise some or all of the variables can fixed to 0 or 1). Moreover, any MKP having at least one of these entries a ij equal to 0, can be replaced by an equivalent MKP with positive entries, i.e. both problems have the same feasible solutions. The MKP is one of the most well-known constrained integer programming problem, and the large domain of its applications has greatly contributed to its fame. Following the seminal paper of Lorie and Savage [120] , MKP modeling has been investigated intensively in capital budgeting and project selection applications [135] , [146]  and  [183] . Recently, Meier et al. [137] investigated more realistic approaches combining capital budgeting models with novel, real techniques for project evaluation. One of their contributions was to propose a new scenario-based capital budgeting model which includes the MKP as a subproblem coupled with generalized upper bound (GUB) constraints. Beaujon et al. [19] also reported a MIP formulation designed to select projects for inclusion in a R&D portfolio, this model taking the form of a MKP with other generalized constraints. Capital budgeting appeared to be an on-going management challenge for not-for-profits hospitals and multihospital healthcare systems in the United States. In this context, a financially oriented capital budgeting framework is developed in [108] which uses a MKP formulation. The MKP has been also introduced to model problems including cutting stock [70] , loading problems [20]  and  [165] , investment policy for the tourism sector of a developing country [65] , allocation of databases and processors in a distributed data processing [63] , delivery of groceries in vehicles with multiple compartments [25] and approval voting [170] . More recently, the MKP has been used to model the daily management of a remote sensing satellite like SPOT , which consisted in deciding every day what photographs will be attempted the next day [179] . The MKP is also a subproblem of many general integer programs. By example, the solution of multicommodity network optimization problems with general step cost functions led to solve at each iteration a subproblem which can be converted into a MKP coupled with multiple choice constraints [62] . Moreover, the multiknapsack structure ‘naturally’ appeared in several interesting extensions of the MKP. In capital budgeting with multiple criteria and multiple decision makers, the use of both an analytical hierarchy process and an integer programming framework led to a two-phases method in which the second phase need to solve a MKP instance [112] . Cappanera and Trubian [24] introduced another interesting extension of the MKP, in which there are greater-than-equal inequalities, called demand constraints, besides the standard knapsack constraints, and the objective function coefficients are not constrained in sign. According to the fact that identifying feasible solutions is a hard task in this case, they proposed a two-stage tabu search based procedure which did not really take into account the underlying MKP structure. In mathematical programming studies, the bidimensional case of the MKP appeared as a promising subproblem. This model was encountered with a polyhedral approach when (1, k )-configurations were used to enforce LP-bounds [3]  and  [145] , and also in Lagrangean decomposition techniques, where each knapsack-like constraint can be associated with GUB constraint, or a cardinality constraint related to the variables fixed at 1 in any optimal solution, to strengthen dual upper bounds [59]  and  [133] . Finally, the renewed interest in the research community in computational integer programming has intensified, during the last decades, the use of MKP benchmarks. On the one hand the nonnegativeness and the density of the constraint matrix A, on the other hand the nonexistence of special constraints such as generalized upper bounds, special-ordered sets and plant-location constraints, distinguish this problem from the 0–1 linear programming problem. These hypotheses are fundamental because it has been shown that the existence of special constraints is essential to derive efficient methods for solving large-scale 0–1 linear problems (see for example [43] ). Hence, suitable numerical experiments for testing any new approach to solve pure 0–1 linear programs cannot get away from it. Previous surveys on the MKP can be found in Gavish and Pirkul [64] , Fréville [52] , Fréville and Plateau [59] , Chu and Beasley [28] and Osorio et al. [144] . In this paper, we give a broader insight into the main results published in the literature with emphasis on recent publications. Section 2 presents exact methods and reduction techniques. We also discuss testing and implementation issues. Section 3 discusses theoretical results. In Section 4 , we review heuristics for finding feasible solutions. 2. Exact methods It is instructive to recall the history of the development of exact methods at the same time for the MKP and the single constraint version. The 0–1 knapsack problem has aroused great interest in the research community. The development of exact algorithms began several decades ago. The early effective procedures emerged in the 1980s [11] , [47]  and  [131] . They preceded a variety of solution methods including dynamic programming and its variants, a branch-and-bound network approach as well as special enumeration technique and reduction schemes. In their famous book [132] , Martello and Toth reported experiments with algorithm MT2 solving uncorrelated and weakly correlated instances with up to more than 100,000 variables. Several recent and significant advances tackle the case of strongly correlated instances which remained very difficult to solve. These new approaches involve the hybridization of dynamic programming and branch-and-bound [153] , the use of expanding core subproblem [149] and upper bounds obtained by adding valid inequalities on the cardinality of an optimal solution constraint [133] , the combination of a new dynamic programming recursion and an additional cardinality constraint [134]  and  [150] and can effectively solve large problems of these type as well as other hard classes. Besides, several effective special-purpose codes are available to practitioners and researchers of the operations research community (by example among others FPK79 [47] , MT2 and MTR [132] , COMBO [134] ).