  Two heuristics for the 0–1 multidimensional knapsack problem (MKP) are presented. The first one uses surrogate relaxation, and the relaxed problem is solved via a modified dynamic-programming algorithm. The heuristics provides a feasible solution for (MKP). The second one combines a limited-branch-and-cut-procedure with the previous approach, and tries to improve the bound obtained by exploring some nodes that have been rejected by the modified dynamic-programming algorithm. Computational experiences show that our approaches give better results than the existing heuristics, and thus permit one to obtain a smaller gap between the solution provided and an optimal solution. Keywords Multidimensional knapsack problem ; Dynamic-programming ; Branch-and-cut ; Surrogate relaxation ; Heuristics The NP-hard multidimensional knapsack problem (MKP) (see [10] , [13]  and  [20] ) arises in several practical problems such as capital budgeting, cargo loading, cutting stock problem and processors allocation in huge distributed systems. It can be defined as equation ( 1 ) – N={1,2,…,n} N = { 1 , 2 , … , n } and M={1,2,…,m} M = { 1 , 2 , … , m } , – n is the number of items, – m is the number of constraints, – p j ⩾0 p j ⩾ 0 is the profit of the j th item, – w i,j ⩾0 w i , j ⩾ 0 , for i∈M i ∈ M , are the weights of the j th item, – and c i ⩾0 c i ⩾ 0 , for i∈M i ∈ M , are the capacities of the knapsack. In the sequel, we shall use the following notation: given a problem (P) ( P ) , its optimal value will be denoted by v(P) v ( P ) .