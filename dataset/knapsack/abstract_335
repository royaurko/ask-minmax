Password:   In this paper we apply the kernel search framework to the solution of the strongly NP-hard multi-dimensional knapsack problem (MKP). Kernel search is a heuristic framework based on the identification of a restricted set of promising items ( kernel ) and on the exact solution of ILP sub-problems. Initially, the continuous relaxation of the MKP, solved on the complete set of available items, is used to identify the initial kernel. Then, a sequence of ILP sub-problems are solved, where each sub-problem is restricted to the present kernel and to a subset of other items. Each ILP sub-problem may find better solutions with respect to the previous one and identify further items to insert into the kernel. The kernel search was initially proposed to solve a complex portfolio optimization problem. In this paper we show that the method has general key features that make it appropriate to solve other combinatorial problems using binary variables to model the decisions to select or not items. We adapt the kernel search to the solution of MKP and show that the method is very effective and efficient with respect to known problem-specific approaches. Moreover, the best known values of some MKP benchmark problems from the MIPLIB library have been improved. Keywords Multi-dimensional knapsack problem ; Binary variables ; Kernel search ; Heuristics 1. Introduction The multi-dimensional knapsack problem (MKP) is a strongly NP-hard combinatorial optimization problem arising in many application contexts such as capital budgeting, cargo loading [15] , cutting stock problems [8] and asset-backed securitization [12] . In the last years the MKP turned out to be one of the favorite playgrounds for experiments with heuristics and metaheuristics, in particular tabu search and genetic algorithms (see Kellerer et al. [11] ). A common interpretation of the model considers a set N={1,…,n} N = { 1 , … , n } of items and a set M={1,…,m} M = { 1 , … , m } of resources with availability c i , i∈M i ∈ M . Each item j has a value p j and consumes resource i at a rate w ij . It is assumed that all p j , w ij and c i are non-negative integer values. More precisely, w ij can be zero for some i , j   , as long as ∑ i∈M w ij ≥1 ∑ i ∈ M w ij ≥ 1 holds for all items j∈N j ∈ N . The problem is to find a subset of items such that their total value is maximum while the total requirement for each resource i does not exceed the availability c i . The decision of selecting or not an item j is modeled by a binary variable x j . The MKP can be formulated as follows: equation ( 1 ) MKP ( N ) z ≔ max ∑ j ∈ N p j x j , equation ( 2 ) ∑ j ∈ N w ij x j ≤ c i , i ∈ M , equation ( 3 ) x j ∈ { 0 , 1 } , j ∈ N . Several heuristics have been proposed to solve the MKP. These include simulated annealing [6] , tabu search [9]  and  [10] , genetic algorithms [4] and hybrid methods [16] . Some of them are strongly problem-dependent. A minor change in the model would require the re-design of the heuristic. Some others spend a large part of the computational time examining solutions that are very unlikely to be optimal or close to an optimal one. The method Kernel Search described here is a general heuristic framework which tries to overcome both these drawbacks. The main idea of the Kernel Search is to obtain a solution, of hopefully high quality, from a small set of promising items called the kernel . The kernel is initially built using information provided by the solution of the linear relaxation of the original problem. Then, new promising items are identified and added to the kernel by means of the solution of a sequence of small/moderate size ILP sub-problems. One of the main issues addressed in this paper concerns the size of the ILP sub-problems. This value should be small enough to limit the computational time required to solve each ILP sub-problem. At the same time it has to be large enough to allow possibly correlated items to be jointly selected.