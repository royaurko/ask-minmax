With the emergence of social networks and improvements in computational
photography, billions of JPEG images are shared and viewed on a daily basis.
Desktops, tablets and smartphones constitute the vast majority of hardware
platforms used for displaying JPEG images. Despite the fact that these
platforms are heterogeneous multicores, no approach exists yet that is capable
of joining forces of a system's CPU and GPU for JPEG decoding. In this paper we
introduce a novel JPEG decoding scheme for heterogeneous architectures
consisting of a CPU and an OpenCL-programmable GPU. We employ an offline
profiling step to determine the performance of a system's CPU and GPU with
respect to JPEG decoding. For a given JPEG image, our performance model uses
(1) the CPU and GPU performance characteristics, (2) the image entropy and (3)
the width and height of the image to balance the JPEG decoding workload on the
underlying hardware. Our run-time partitioning and scheduling scheme exploits
task, data and pipeline parallelism by scheduling the non-parallelizable
entropy decoding task on the CPU, whereas inverse cosine transformations
(IDCTs), color conversions and upsampling are conducted on both the CPU and the
GPU. Our kernels have been optimized for GPU memory hierarchies. We have
implemented the proposed method in the context of the libjpeg-turbo library,
which is an industrial-strength JPEG encoding and decoding engine.
Libjpeg-turbo's hand-optimized SIMD routines for ARM and x86 constitute a
competitive yardstick for the comparison to the proposed approach.
Retro-fitting our method with libjpeg-turbo provided insights on the
software-engineering aspects of re-engineering legacy code for heterogeneous
multicores.