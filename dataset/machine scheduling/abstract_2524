Cognitive computation such as e.g. language processing, is conventionally
regarded as Turing computation, and Turing machines can be uniquely implemented
as nonlinear dynamical systems using generalized shifts and subsequent G\"odel
encoding of the symbolic repertoire. The resulting nonlinear dynamical automata
(NDA) are piecewise affine-linear maps acting on the unit square that is
partitioned into rectangular domains. Iterating a single point, i.e. a
microstate, by the dynamics yields a trajectory of, in principle, infinitely
many points scattered through phase space. Therefore, the NDAs microstate
dynamics does not necessarily terminate in contrast to its counterpart, the
symbolic dynamics obtained from the rectangular partition. In order to regain
the proper symbolic interpretation, one has to prepare ensembles of randomly
distributed microstates with rectangular supports. Only the resulting
macrostate evolution corresponds then to the original Turing machine
computation. However, the introduction of random initial conditions into a
deterministic dynamics is not really satisfactory. As a possible solution for
this problem we suggest a change of perspective. Instead of looking at point
dynamics in phase space, we consider functional dynamics of probability
distributions functions (p.d.f.s) over phase space. This is generally described
by a Frobenius-Perron integral transformation that can be regarded as a neural
field equation over the unit square as feature space of a dynamic field theory
(DFT). Solving the Frobenius-Perron equation, yields that uniform p.d.f.s with
rectangular support are mapped onto uniform p.d.f.s with rectangular support,
again. Thus, the symbolically meaningful NDA macrostate dynamics becomes
represented by iterated function dynamics in DFT; hence we call the resulting
representation dynamic field automata.