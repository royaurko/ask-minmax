A systematic, language-independent method of finding a minimal set of paths
covering the code of a sequential program is proposed for application in White
Box testing. Execution of all paths from the set ensures also statement
coverage. Execution fault marks problematic areas of the code. The method
starts from a UML activity diagram of a program. The diagram is transformed
into a directed graph: graph's nodes substitute decision and action points;
graph's directed edges substitute action arrows.
  The number of independent paths equals easy-to-compute cyclomatic complexity
of the graph. Association of a vector to each path creates a path vector space.
Independence of the paths is equivalent to linear independence of the vectors.
It is sufficient to test any base of the path space to complete the procedure.
An effective algorithm for choosing the base paths is presented.