Object-oriented programming (OOP) is aimed at describing the structure and
behaviour of objects by hiding the mechanism of their representation and access
in primitive references. In this article we describe an approach, called
concept-oriented programming (COP), which focuses on modelling references
assuming that they also possess application-specific structure and behaviour
accounting for a great deal or even most of the overall program complexity.
References in COP are completely legalized and get the same status as objects
while the functions are distributed among both objects and references. In order
to support this design we introduce a new programming construct, called
concept, which generalizes conventional classes and concept inclusion relation
generalizing class inheritance. The main advantage of COP is that it allows
programmers to describe two sides of any program: explicitly used functions of
objects and intermediate functionality of references having cross-cutting
nature and executed implicitly behind the scenes during object access.