There is a close connection between data-flow analysis and model checking as
observed and studied in the nineties by Steffen and Schmidt. This indicates
that automata-based analysis techniques developed in the realm of
infinite-state model checking can be applied as data-flow analyzers that
interpret complex control structures, which motivates the development of such
analysis techniques for ever more complex models. One approach proposed by
Esparza and Knoop is based on computation of predecessor or successor sets for
sets of automata configurations. Our goal is to adapt and exploit this approach
for analysis of multi-threaded Java programs. Specifically, we consider the
model of Monitor-DPNs for concurrent programs. Monitor-DPNs precisely model
unbounded recursion, dynamic thread creation, and synchronization via
well-nested locks with finite abstractions of procedure- and thread-local
state. Previous work on this model showed how to compute regular predecessor
sets of regular configurations and tree-regular successor sets of a fixed
initial configuration. By combining and extending different previously
developed techniques we show how to compute tree-regular successor sets of
tree-regular sets. Thereby we obtain an iterable, lock-sensitive forward
reachability analysis. We implemented the analysis for Java programs and
applied it to information flow control and data race detection.