Sequential programming and work-flow programming are two useful, but
radically different, ways of describing computational processing. Of the two,
it is sequential programming that we teach all programmers and support by
programming languages, whether in procedural, objectoriented, or functional
paradigms. We teach workflow as a secondary style of problem decomposition for
use in special situations, like distributed or networked processing. Both
styles offer complementary advantages, but the fact that they employ radically
different models for ownership of continuations interferes with our ability to
integrate them in a way that allows them to be taught and used in a single
programming language. This paper describes a programming language construct,
declarative future commitments, that permit better integration of the two.