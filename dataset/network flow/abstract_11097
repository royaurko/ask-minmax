We use activity networks (task graphs) to model parallel programs and
consider series-parallel extensions of these networks. Our motivation is
two-fold: the benefits of series-parallel activity networks and the modelling
of programming constructs, such as those imposed by current parallel computing
environments. Series-parallelisation adds precedence constraints to an activity
network, usually increasing its makespan (execution time). The slowdown ratio
describes how additional constraints affect the makespan. We disprove an
existing conjecture positing a bound of two on the slowdown when workload is
not considered. Where workload is known, we conjecture that 4/3 slowdown is
always achievable, and prove our conjecture for small networks using max-plus
algebra. We analyse a polynomial-time algorithm showing that achieving 4/3
slowdown is in exp-APX. Finally, we discuss the implications of our results.