Password: The last version of the Globus Toolkit includes both pre-WS and WS GRAM services to submit, monitor, and control jobs on remote Grid resources. In the medium term and until a full transition is accomplished, both pre-WS and WS GRAM services will coexist in Grid infrastructures. In this paper, we describe the modular architecture of the Grid W ay meta-scheduler, which allows the simultaneous and coordinated use of pre-WS and WS GRAM services and, therefore, makes easy the transition to a Web Service implementation of the Globus components. Such functionality is demonstrated on a infrastructure that comprises resources from a research testbed, based on the Globus Toolkit 4.0, and the EGEE production infrastructure, based on the LCG middleware. The Web Service implementation of Globus components has been optimized for flexibility, stability and scalability. However, part of the Grid community is still reluctant to transition to the Web Service model due mainly to its supposed lower performance. We demonstrate that WS GRAM achieves a performance comparable to that of pre-WS GRAM. Keywords Grid computing ; Grid W ay Meta-scheduler ; Globus toolkit ; Grid resource management ; WSRF 1. Introduction The main driving force behind moving from pre-WS to WS (Web Services) Grid services is that, according to the Grid’s second requirement proposed by Foster  [1] , a Grid must be built using standard, open, general-purpose protocols and interfaces. However, a large part of the Grid community is still reluctant to make this transition because of the lower efficiency associated with Web Services. In fact, the Grid’s third requirement is that a Grid must deliver nontrivial qualities of service, in terms of response time, throughput, security, reliability or the coordinated use of multiple resource types. On the one hand, pre-WS Grid services are based on proprietary interfaces (although usually implemented over standard protocols like HTTP, LDAP or FTP). On the other hand, WS Grid services are based on the WS-Resource Framework (WSRF)  [2] , a standard specification fully compatible with other Web Service specifications. In fact, WSRF can be viewed as a set of conventions and usage patterns within the context of established Web Service standards, like WS-Addressing. WSRF defines the WS-Resource construct as a composition of a Web service and a stateful resource  [3] . The Open Grid Services Infrastructure (OGSI)  [4] was previously conceived as an extension of Web Services to have stateful WS-Resources. However, the implementation of OGSI resulted in non-standard, complex and heavy-weight Grid services. Moreover, it jeopardized the convergence of Grid and Web Services. Grid services implemented as Web Services are easier to specify and, therefore, to standardize. Thus, WS Grid services provide a way to construct an Open Grid Services Architecture (OGSA)  [5] where tools from multiple vendors interoperate through the same set of protocols and interfaces, implemented in different manners and over different tools. As the introduction of OGSA and the release of the Globus Toolkit 4 (GT4) have made imminent the generalized use of WS Grid services; it is highly interesting to evaluate the performance penalty for achieving the Grid’s second requirement. In particular, our interest is focused on the main component of Globus-based computational Grids, the Grid Resource Allocation and Management (GRAM) service. In this work we evaluate the GT4 GRAM services from the user’s perspective, rather than thoroughly benchmarking the services in order to optimize their workflow or implementation. Other works present a comparison of different stateful Web Services implementations  [6] , and analyze the service times and maximum concurrency of several Globus Grid services through an automated distributed performance testing tool  [7] . In the context of Computational Grids, we can mention the following meta-scheduling projects: Condor/G  [8] , which provides user tools with fault tolerance capabilities to submit jobs to a Globus based Grid; Nimrod/G  [9] , designed specifically for Parameter Sweep Application (PSA) optimizing user-supplied parameters like deadline or budget; GridLab Resource Management System (GRMS)  [10] , which is a meta-scheduler component to deploy resource management systems for large scale infrastructures; and the Community Scheduler Framework (CSF)  [11] , an implementation of an OGSA-based meta-scheduler; and finally the Enabling Grids for E-sciencE (EGEE) Resource Broker  [12] , that handles job submission and accounting. On the other hand, Grid W ay gives end users, application developers and managers of Globus infrastructures a scheduling functionality similar to that found on local DRM systems, including the support for DRMAA GGF standard. A comparison of different approaches to Grid resource management systems can be found in  [13]  and  [14] . Even though some of the aforementioned application schedulers, like Condor/G or Nimrod/G, have recently provided support for Globus WS services, we would like to remark on the advantages of the Grid W ay architecture in terms of flexibility, extensibility, usability and deployability. In fact, it has been successfully used to simultaneously interface to LCG middleware and Globus WS and pre-WS components. The aim of this paper is threefold: first, to present the loosely-coupled architecture of the Grid W ay meta-scheduler for interfacing simultaneously with different Grid resource management services; second, to evaluate the coordinated harnessing performed by Grid W ay; and third, to compare the performance at user level of the pre-WS and WS GRAM services provided by the Globus Toolkit version 4.0. The ability of Grid W ay to simultaneously use different Grid Services eases transition to the Web Service implementation of the Globus components. The rest of the paper is organized as follows: Section  2 introduces the Globus approach for resource management, through its GRAM component, while Section  3 introduces the Grid W ay approach for job management. Section  4 discusses about Grid benchmarking. Section  5 shows the results of the coordinated harnessing of both kinds of GRAM services, while Section  6 compares their performance. Finally, Section  7 ends up with some conclusions. 2. The Globus approach for resource management The Globus Toolkit  [15] has become a de facto standard in Grid computing. Globus services allow secure and transparent access to resources across multiple administrative domains, and serve as building blocks to implement the stages of Grid scheduling  [16] . Resource management is maybe the most important component for computational Grids, although it could also be extended to other non-computational resources. The Grid Resource Allocation and Management (GRAM)  [17] service is the core of the resource management pillar of the Globus Toolkit. In pre-WS GRAM (see Fig. 1 ), a job is submitted through the Gatekeeper service of the remote computer. The Gatekeeper is a service running on every node of a Globus Grid. The Gatekeeper handles each request, mutually authenticating with the client and mapping the request to a local user, and creating a Job Manager for each job. The Job Manager starts, controls and monitors the job according to its RSL (Resource Specification Language) specification, communicating state changes back to the GRAM client via callbacks. When the job terminates, either normally or by failing, the Job Manager terminates as well, ending the life cycle of the Grid job. Fig. 1. 