This application claims the benefit of U.S. Provisional Patent Application Ser. No. 60/614,492, filed on Oct. 1, 2004, the contents of which are hereby incorporated by the refrence in their entirety. FIELD OF THE INVENTION The present invention relates to a system and method for managing, scheduling, controlling, and monitoring execution of jobs by a job scheduler. BACKGROUND Job scheduling systems provide a centralized system in hardware and software for processing large scale tasks. Typically, large scale tasks are broken down into several smaller tasks which are individually, sequentially and coincidentally executed according to a master task schedule to complete the task. For example, for a large company, a job scheduling system may be used to process its payroll payment. The payroll task may be broken down into the following processes: (i) access the company database for a list of the employees; (ii) execute a payroll program to identify salary payments to be made; (iii) execute a deposit program to make electronic bank deposits of the salary payments to the bank accounts of the employees; (iv) execute a report generator to print and send pay stubs to the employees. The payroll payment may be automated to occur at regular intervals. A job scheduling system utilizes a series of agents generally operating on computers to perform the smaller tasks. A workload manager controls each of the agents. The manager is connected to the agents using a communication network configured in a “star” pattern, with the workload manager at the center and each of the agents on a ray of the star. In a network based system, agents operate on separate computers and each of the computers communicate to a central computer running the workload manager. IP is a commonly used communication protocol. The workload manager needs to track each agent for its status and job completion. When an agent has a fault, e.g. its communication link is broken, the workload manager must be able to recognize the fault and take corrective action, if possible. For example, upon the detection of a fault in an agent, a backup agent on a different computer may be brought in to take the place of the agent. With large systems having many tasks, it is a non-trivial exercise for the workload manager to track and manage the operation of all of the agents. With a “star” network configuration, if the agents are allowed to move, there is a need to keep accurate data about the IP addresses of the agents. In practice it is a labor intensive task. Failover of agents (i.e. providing backup for agents) is difficult to achieve because communication between agents and the workload manager is restricted to one instance of an agent and the workload manager. Further, it is difficult to maintain “shadow” agents and to re-assign schedules to different agents after a schedule has been created. Under heavy load conditions, the workload manager may be overloaded with events. If it cannot process job events, they are queued and processing is delayed. This reduces overall productivity and reduces utilization of enterprise tools. Also, the “star” architecture creates a performance bottleneck and a single point of failure. If the manager is down, no workload can be executed at all. Jobs that have to run at the time of failure will be delayed. Centralized workload managers also provide a bottleneck and a single point of failure. There is a need for a system and method which addresses deficiencies in the prior art. SUMMARY In a first aspect, a method for tracking and executing a job comprising tasks is provided. Each task is executable on a separate computing device. The method comprises: utilizing a workload manager to identify an initial schedule of implementation for the job; utilizing agents to selectively control execution of the tasks; and for each agent, utilizing a publish/subscription interface to isolate communications of the workload manager from each agent and to communicate with other publish/subscription interfaces of other agents to determine when to activate its task. The interface utilizes a broker to disseminate information to the other agents. In the method, the publish/subscription interface may utilize a hop-by-hop communication scheme to communicate with other publish/subscription interfaces. In the method, an overlay route table may define local communication links for said publish/subscription interface. In another aspect, a system implementing any of the above noted aspects is provided. In other aspects various combinations of sets and subsets of the above aspects are provided. BRIEF DESCRIPTION OF THE DRAWINGS The foregoing and other aspects of the invention will become more apparent from the following description of specific embodiments thereof and the accompanying drawings which illustrate, by way of example only, the principles of the invention. In the drawings, where like elements feature like reference numerals (and wherein individual elements bear unique alphabetical suffixes): FIG. 1 illustrates a block diagram of a distributed job scheduler system providing an embodiment of the invention; FIG. 2 illustrates an exemplary job provided to the system of FIG. 1 for scheduling and processing; FIG. 3 illustrates a components of a workload manager of the job scheduler system of FIG. 1 ; FIGS. 4-8 illustrate aspects of the job scheduler of FIG. 1 while processing the exemplary job of FIG. 2 ; FIGS. 9-12 illustrate aspects of another embodiment of the job scheduler of FIG. 1 while processing a part of the exemplary job of FIG. 2 ; FIG. 13 illustrates aspects of the publish/subscription system of the system of FIG. 1 ; and FIG. 14 illustrates further aspects of the publish/subscription system of FIG. 13 . DETAILED DESCRIPTION The description which follows, and the embodiments described therein, are provided by way of illustration of an example, or examples, of particular embodiments of the principles of the present invention. These examples are provided for the purposes of explanation, and not limitation, of those principles and of the invention. In the description, which follows, like parts are marked throughout the specification and the drawings with the same respective reference numerals. In FIG. 1 , system 100 illustrates an embodiment and comprises a workload manager (WM) 102 , a series of publish/subscription systems (PSS) 104 , collectively providing a federated PSS, and agents 106 all connected to network 108 . Preferably, WM 102 communicates to system 100 through broker 110 . A PSS 104 is associated each agent 106 and works to control operation of the applications of the agent. Preferably, each PSS 104 is associated with a broker 112 to interface between its agent and the remaining PSS 104 s in the network 108 . Where agents 106 are in a common network or association, their brokers 112 may have connections to one or more brokers 112 in that association or network. In one embodiment each of WM 102 , PSS 104 and agents 106 is a software program and each operates on a separate computer. Each of WM 102 , PSS 104 and agents 106 have access to internal and external data and databases (not shown). Communication between elements in system 100 may utilize messages created by a sender and sent over the respective links containing commands and data which can be extracted and acted upon by the recipient. Briefly the federated PSS comprises a set of publish/subscribe brokers connected by a peer-to-peer overlay network. A broker is associated with PSS which is associated with each agent and provides a localized view of its subscriptions and publications as relating to its immediately connected neighbours. Clients connect to brokers using various binding interfaces. Each PSS utilizes a publish/subscribe paradigm, where information producers submit data (as publications) to it and an information consumer (i.e., its agent) indicates its interests by submitting subscriptions to it. On receiving a publication from the network, the PSS determines whether it matches the data with the set of its agent's subscriptions, and notifies the agent, as appropriate. This arrangement provides decoupling of publishers and subscribers. This decoupling is useful for job scheduling, as the individual job monitors/controllers, or agents, are lightweight and potentially quite numerous. The address-free automatic content-based routing relieves WM 102 of the burden of maintaining connection state information and routing messages to and from all the agents. In the embodiment, PSS 104 handles publishers of events received from neighbouring agents and subscriptions to (consumer of) events by the associated agent. The agent sends all subscriptions to its PSS 104 . Subscriptions can be in the form of messages and contain any task names, status for tasks, any operating, function, geographic or other pertinent characteristic of the client. For example, the subscription can identify the network location of the client, the operating system resident on the client, the list of agent applications resident on the client, status information, information about its immediate neighbours, etc. Publications relate to a status of a task and its task name. For example, publications can relate to a failure of a task or a success of a task and can be published in a publish/subscribe system. Publishing client sends publications to its PSS 104 for dissemination through the network 108 . Neighbouring publishing clients send publications to the PSS 104 of the agent. PSS 104 matches information extracted from publications to information extracted from subscriptions. When a match is found, the publication is forwarded to its agent. Otherwise, the information may be passed on to the immediate neighbours of the agent. A neighbouring agent can be configured to monitor for only specified publications. PSS 104 can maintain a status list for tasks sent by publishers to it. The status list tracks the tasks and whether its agent has subscribed to the tasks. For the federated PSS, there is an overlay network connecting its brokers. This is the system through which the PSS communicate and traverse information through network 108 . The overlay network defines relationships among all brokers and may be established in addition to the network connecting the agents. The overlay network is implemented as a set of unidirectional connections forming a foundation for message routing. Overlay routing data is stored in Overlay Routing Tables (ORT) on each client. An ORT for a client contains routing table information for its immediately connected neighbours. Collectively, all of the local ORTs define a logical ORT for all brokers in the network. Message routing can be based on a common publish-subscribe-advertise protocol. One implementation is a rule-based matching mechanism. The federated PSS uses a matching engine and routing engine to match and assign tasks to the client. One implementation of the matching engine and routine engine is a Rete-based rule engine as provided in the Java Expert System Shell. There is also a subscriber route table (SRT) which is used to manage identification of subscribers amongst the brokers. It is a list of comprising information such as last hop, content specification, forwarding target list. Other implementations may be provided using a Rete via a rule engine. Publications and advertisements to the federated PSS are merged before forwarding to reduce network traffic and routing table size. Publications and advertisements that overlap on content, destination, subject matter or any other parameter can be propagated as a single, more general advertisement. Subscriptions are routed hop-by-hop amongst the brokers according to the SRT at each broker. The set of subscriptions seen by a broker are used to construct a Publication Routing Table (PRT) for that broker. Like the SRT, the PRT is a list of information such as last hop, content specification, forwarding target list. Collectively, all of the SRTs define a logical set of subscriptions for all agents in the network. Each SRT is preferably restricted to information relating to its local agent. Subscriptions are merged in the same manner as advertisements. Implementations may be provided using a Rete via a rule engine. Referring to FIG. 14 , brokers are modular software components built on a set of queues. Each queue represents a unique message destination and has a message handler assigned to it. The message handlers are matching engine, broker controller and client bindings. Referring to FIG. 2 , exemplary job 200 is shown which is executed by system 100 . Job 200 comprises tasks performed by agents A 1 , A 2 and A 3 . At the top of job 200 , Agent A 1 performs its task T 1 then tasks T 2 and T 3 are performed separately and simultaneously by agents A 2 and A 3 . Upon successful completion of the tasks T 2 and T 3 , a further task T 4 is performed by agent A 1 . Subsequently, upon successful completion of task T 4 , task T 5 is performed by agent A 2 and upon successful completion of task T 5 , final task T 6 is performed by agent A 3 . WM 102 and PSS 104 control activation of agents 104 for job 200 . In FIG. 3 , further detail on WM 102 is provided. WM 102 comprises scheduler 302 and manager 304 . Scheduler 302 provides a database and scheduling routine to store tasks and defines a schedule and process for executing the stored tasks. Manager 304 evaluates conditions that have to be satisfied for execution of an element in the schedule and provides execution information in the form of publication information the network 108 . In defining a schedule for a job, such as job 200 ( FIG. 2 ), a job graph associated with the job is defined and then converted into a series of subscriptions and publications. This conversion may be done using known publication/subscription conversion techniques known in the art. Referring to FIGS. 1-8 a description of an exemplary execution of job 200 is provided for the above noted configuration of WM 102 . Referring to FIG. 4 , at the first step, agents 106 each subscribe to their PSS 104 for commands to execute. The software at each agent 106 identifies which command it needs to be triggered to activate. Meanwhile, scheduler 302 has a process schedule relating to job 200 . The process schedule defines the relationships among the defined publications and subscriptions for job 200 . Job 200 is typically activated by an activation trigger (such as a timer signal). Upon receiving the activation trigger, scheduler 302 creates a schedule relating to job 200 and sends it to manager 304 . When manager 304 receives the schedule, it starts execution of the schedule by publishing to network 108 a command to execute Task T 1 . The ORT receives the command and it propagates, node-by-node, through the network until the identified target agent for the initiation task is reached. When each PSS receives the command, it reviews a status list for tasks and can determine that its agent has subscribed to Task T 1 . When the PSS 104 for agent A 1 is reached, it recognizes the publication and sends a command to agent A 1 to execute Task T 1 . When agent A 1 receives this command, it sends a command to its target to execute task T 1 . In the example, task T 1 is successfully completed by the target and sends agent A 1 a “DONE” message. Subsequently, Agent A 1 receives the “DONE TASK T 1 ” message from the target. In response to receiving that message, it publishes a “DONE TASK T 1 ” message to PSS 104 . PSS 104 receives the message and checks it against its status list. As there is a match in the list for Task T 1 and sends a “DONE TASK T 1 ” message to its PSS neighbours for further propagation through network 108 . When the message is received by the broker for manager 304 , manager 304 then marks task T 1 as completed. A further instruction is provided destined for agent A 1 to unsubscribe from task T 1 . When the instruction propagates through the network and reaches agent A 1 , its local PSS 104 unsubscribes task T 1 from A 1 . For the next step, manager 304 consults the schedule and publishes commands to A 2 and A 3 to execute tasks T 2 and T 3 . At the same time manager 304 subscribes to a status list to receive messages from agents A 2 and A 3 . The subscriptions are propagated through network 108 and when the PSS 104 for agents A 2 and A 3 are reached, they send messages execute tasks T 2 and T 3 to agents A 2 and A 3 . Agents A 2 and A 3 receive the messages and send command to their respective targets to execute. In the example, target of agent A 2 fails and sends failure indication to it. Meanwhile, target of agent A 3 successfully completes and send a success message to agent A 3 . Upon receipt of the failure message, agent A 2 publishes a corresponding failure message to its PSS 104 . PSS 104 initiates propagation of the message through network 108 . As manager 304 has subscribed to messages from agent A 2 , when it reaches manager 304 , its broker provides it with the message. Meanwhile, agent A 3 publishes a success message to network 108 through its PSS 104 . Upon receipt of the each message, manager 304 marks task T 2 for agent A 2 as failed and task T 3 for agent A 3 as completed. As task T 2 has failed, in job 200 , task T 4 cannot be started. As such, the processing of job 200 ends without full completion. In other task arrangements, failure of some tasks may be tolerated. Referring to FIGS. 1 , 2 and 9 - 12 , in another embodiment, functionality of manager 304 is ported into each agent 106 . Agents A 1 , A 2 and A 3 subscribe to their PSS 104 for schedules that contain their names. Meanwhile, scheduler 302 creates a schedule with assignment of tasks for agents A 1 , A 2 and A 3 . For the next step in processing job 200 , scheduler 302 publishes the schedule for job 200 with PSS 104 ′ and PSS 104 ′ sends schedule to agents A 1 , A 2 and A 3 , as they are identified in the schedule. Next, agents A 1 ′, A 2 ′ and A 3 ′ each parse the received schedule and select tasks that identify them as the active agent. In the next step, agents A 1 ′, A 2 ′ and A 3 ′ process their respective tasks. The agents identify external, internal and environmental conditions required by their respective tasks. Agent A 1 ′ is used for tasks T 1 and T 4 . For task T 1 , agent A 1 ′ identifies that all conditions are met and accordingly, sends a command to its target to execute task T 1 . For task T 4 , agent A 1 ′ cannot execute it until successful completion of both tasks T 2 and T 3 . As such, it subscribes to the status list for tasks T 2 and T 3 . Meanwhile, agent A 2 identifies external condition for tasks T 2 (which depends on the successful completion of task T 1 ) and task T 5 (which depends on the successful completion of task T 4 ). As there are outstanding conditions not yet met, neither task can be executed and subscribes to the status list for tasks T 1 and T 4 . Agent A 3 ′ identifies external conditions of task T 3 (which depends on successful completion of task T 1 ) and task T 6 (which depends on the successful completion of task T 5 ). As there are outstanding conditions not yet met, neither task can be executed and agent A 3 ′ subscribes to the status list for tasks T 3 and T 5 . In operation, once task T 1 completes execution, it sends a success indication to agent A 1 ′. Agent A 1 ′ sends a success status message to its PSS 104 ′, which then propagates that message through network 108 , searching for a match with any subscriptions wanted for agents A 2 ′ and A 3 ′. Accordingly, eventually each local PSS 104 ′ for agents A 2 ′ and A 3 ′ receive the message and then they each send status messages to their agents A 2 ′ and A 3 ′. Agents A 2 ′ and A 3 ′ receive the status messages and both identify that conditions for T 1 are met. As such, each agent A 2 ′ and A 3 ′ sends a command to execute respective tasks T 2 and T 3 . Presuming successful completion of tasks T 2 and T 3 , each task sends a success indication to their agents and each agent sends success status message to their PSS 104 ′. Each PSS 104 ′ then identifies a match with the subscription for agent A 1 ′. Accordingly, each PSS 104 ′ sends status messages to network 108 directed to agent A 1 ′. Agent A 1 ′ receives the status messages and identifies that conditions for T 4 are met. As such, agent A 1 ′ sends a command to execute task T 4 . Presuming successful completion of task T 4 , it sends a success indication to agent A 1 which then sends success status message to its PSS 104 ′. Its PSS 104 ′ then identifies a match with the subscription for agent A 2 . Accordingly, its PSS 104 ′ sends status messages to network 108 directed to agent A 2 ′. Agent A 2 ′ receives the status messages and identifies that conditions for T 5 are met. As such, agent A 2 ′ sends a command to execute task T 5 . Finally, presuming successful completion of task T 5 , it sends a success indication to agent A 2 ′ which then sends success status message to its PSS 104 ′. Its PSS 104 ′ then identifies a match with the subscription for agent A 3 ′. Accordingly, its PSS 104 ′ sends status messages to network 108 directed to agent A 3 ′. Agent A 3 ′ receives the status messages and identifies that conditions for T 6 are met. As such, agent A 2 ′ sends a command to execute task T 6 . Upon completion of task T 6 , agent A 2 ′ sends a status message to its PSS 104 ′, which then recognizes that job 200 is completed and sends a status message to network 108 directed to scheduler 302 ′. It will be appreciated that the order of scheduling, subscribing and reporting messages to and from each PSS 104 ′ and each PSS 104 may be provided in any order, as long as the continuity of the scheduled job is maintained. Referring to FIGS. 13 and 14 , further detail is provided on the federated, time-sensitive, and historic data management (providing read/write access), content-based publish/subscribe system of each PSS. The federated PSS utilizes a historic data access scheme providing transparency and flexibility. In a standard subscription model, a specified time range may be in the future and does not provide for historic time ranges. The embodiment does allow for historic time ranges. All operators allowed in standard subscriptions are also allowed in historic subscriptions. Databases for the historic model are attached to the brokers as clients through the database binding. Each database maintains a subscription with an appropriate predicate, such as [class, =, DB CONTROL]. A user can cause a database to begin storing certain publications by issuing an appropriate command as a publication, such as [class, DB CONTROL], [command, STORE], [content spec, “[class, =, foo]”]. In such a construct, the database will advertise [class, _, foo] and begin storing publications containing [class, foo], while also converting them to SQL INSERT statements. If a user submits a subscription after a noted time interval, the database will receive the subscription (since it matches the database's advertisement), perform an SQL SELECT for the appropriate publications, and republish the stored publications from the noted time interval. Since all messages are routed using a content based algorithm, direct queries to a database for past data is generally not possible. In a further embodiment, when historic data access scheme is based on a PADRES scheme, since it is built entirely on top of publish/subscribe semantics, will use content-based routing path found by the standard PADRES routing algorithm. It will be appreciated that the federated PSS provides improved fault tolerance, load balancing, distribution of information, time awareness and subscription management. Although the invention has been described with reference to certain specific embodiments, various modifications thereof will be apparent to those skilled in the art without departing from the scope of the invention as outlines in the claims appended hereto. It will be further apparent to those skilled in the art that various embodiments of the invention may be made in hardware, firmware, software, or various combinations thereof. For example, various embodiments may be implemented in a computer readable storage medium containing computer executable instructions that can be read and executed on one or more processing devices. In particular, the computer readable storage medium may generally include any suitable mechanism for storing information in a form that can be read on a computer, including read only memory, random access memory, magnetic disk storage media, optical storage media, flash memory devices, or any other tangible media suitable for storm information. Additionally, while firmware, software, routines, or instructions may be described in the above disclosure in terms of specific exemplary embodiments and performing certain actions, it will be apparent that such descriptions are merely for the sake of convenience and that such actions in fact result from computing devices, processing devices, processors, controllers, or other devices executing the firmware, software, routines, or instructions.