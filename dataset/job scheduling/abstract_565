A microfiche appendix consisting of 59 frames is included as part of the specification. The appendix includes material subject to copyright protection. The copyright owner does not object to the facsimile reproduction of the appendix, as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights. BACKGROUND OF THE INVENTION This invention relates generally to telecommunications job scheduling. Many systems can be characterized as offering different classes of resources that process different classes of jobs. These resource classes often vary in their job processing capabilities. Similarly, job class characteristics can vary such that only a restricted set of resource classes can process a particular job. Scheduling allocates a particular resource for processing a job. The pairing of job to resource can strongly affect system performance. That is, different scheduling assignments can result in faster or slower processing of a incoming job. SUMMARY OF THE INVENTION In general, in one aspect, the invention features a computer-based method of scheduling a first job for processing by a resource. The method proceeds by identifying resources capable of processing the first job and selecting a second job for rescheduling from jobs currently being processed by the identified resources such that the second job can be processed by resources other than the identified resources. Scheduling further includes scheduling the first job for processing by the resource currently processing the second job and rescheduling the second job. The invention may continue by identifying resources capable of processing the second job and selecting a third job for rescheduling from jobs currently being processed by the identified resources such that the third job can be processed by resources other than the identified resources. The scheduling can proceed by scheduling the second job for processing by the resource currently processing the third job and rescheduling the third job. The system may select a job for rescheduling by selecting the job that can be processed by the greatest number of resources other than the identified resources. Enforcement of the scheduling may be contingent upon successful rescheduling. In one example implementation the resources are communication frequencies while the jobs are wireless communication transmitted over the communication frequencies. In another example implementation the resources are communication subchannels while the jobs are information being transmitted by the communication subchannels having corresponding priority ratings. The invention may offer one or more of the following advantages. The invention dynamically determines a new scheduling configuration that can both continue processing jobs currently being processed and begin processing a new job if any such configuration exists. Further, switching to the new configuration requires few hand-offs of jobs between processors. Additionally, the system can ensure that a job being processed is not terminated or delayed once some resource has begun processing the job. BRIEF DESCRIPTION OF THE DRAWINGS FIGS. 1A-1C are diagrams illustrating job scheduling. FIG. 2 is a flowchart of a job scheduling system. FIGS. 3A-3D are diagrams illustrating how the job scheduling system assigns jobs to resources for processing. FIG. 4 is a diagram of a wireless communication system that uses the job scheduling system of FIG. 2 . FIG. 5 is a diagram of a prioritized communication scheme that uses the job scheduling system of FIG. 2 . FIG. 6 is a diagram of a computer platform suitable for running the job scheduling system of FIG. 2 . DESCRIPTION OF THE PREFERRED EMBODIMENTS Referring to FIGS. 1A-1C, many systems feature different classes of resources 10 a - 10 d that process different classes of jobs 12 a - 12 b. Resource classes 10 a - 10 d vary in their job 12 processing capabilities. Similarly, job 12 a - 12 b characteristics can vary such that only a restricted set of resource classes 10 a - 10 d can process a particular job 12 a - 12 b. Scheduling assigns a job 12 to a particular resource 10 for processing. This assignment can strongly affect system performance. As shown in FIGS. 1A-1C, resources 10 and jobs 12 belong to different numbered classes (e.g., “1” to “4”). The class numbering notation merely indicates a resource's 10 skillfulness at processing a job 12 or a job's 12 difficulty. Resources 10 belonging to higher numbered classes offer more skillful job processing. Jobs 12 of a particular numbered class must be processed by resources of the same or higher class. For example, a job 12 a of class “3” can only be processed by a resource of class “3” or “4”. Expressed differently, a resource of class “4” 10 a can process jobs of class “1”, “2”, “3” 12 a, or “4” 12 b, while the least skillful resources of class “1” 10 a can only process the least difficult jobs of class “1” (not shown). As shown in FIG. 1A, two jobs 12 a and 12 b await scheduling. As shown in FIG. 1B, a resource of class “4” 10 d has been scheduled to process a job of class “3” 12 a. Unfortunately, this scheduling blocks assignment of the job of class “4” 12 b, since the job of class “4” 12 b can only be processed by a resource 10 d of class “4”. Hence, until resource 10 d stops processing job 12 a, for example, by completing job 12 a, job 12 b must wait or abort. As shown in FIG. 1C, a different scheduling scheme obviates blocking of job 12 b. By assigning job 12 a to a resource of class “3” 10 c, resource 10 d can immediately begin processing job 12 b. As resources 10 process jobs 12 a - 12 b concurrently, the total amount of time needed to complete both jobs decreases. The simple scenario played out in FIGS. 1A-1C, however, ignored other factors complicating job scheduling. For example, new jobs 12 of unpredictable classes may request scheduling at unpredictable intervals. Referring to the embodiments shown in FIG. 2 and FIGS. 3A-3D, a job scheduling system 14 iteratively attempts to reassign (i.e., hand off) jobs 12 currently being processed by resources 10 to make room for a new job x 0 38 . This dynamic reassignment can reduce job blocking. The job scheduling system 14 begins processing when a new job 38 requests ( 16 ) scheduling. As shown in FIG. 3A, a new job 38 of class “7” requests assignment to a resource for processing. Before trying to adjust the current job scheduling scheme (i.e., the pairing of jobs 12 with resources 10 ), the job scheduling system 14 saves ( 18 ) a representation of the current scheme to ensure the scheme can be restored should the system's 14 efforts to make room for the new job 38 fail ( 28 ). Initially, the job scheduling system 14 checks ( 20 ) to see if any idle resources can handle the new job 38 . For example in FIG. 3A, only resources of class “7” or “8” 36 a can process a job of class “7”. As shown, jobs 12 have already been assigned to all resources 36 a capable of processing the new job 38 . If the job scheduling system 14 identified an idle resource of sufficient capability, the system 14 could simply assign the new job to the idle resource ( 22 ). Thereafter, the system 14 ends ( 25 ) and is ready to handle another new job. request for processing. In the absence of an idle processor ( 20 ), the system 14 identifies ( 26 ) the lowest class job 34 being handled by a resource capable of processing the new job 38 . As shown in FIG. 3A, a job of class “4” 34 has been assigned to a resource 35 of class “8”. The system 14 identifies the lowest class job 34 since a lower class resource, if idle, could process the identified job 34 . After identifying a job 34 that potentially can be reassigned to make room for the new job 38 , the system 14 determines ( 26 ) whether the identified job 34 belongs to a class that can be handled by resources other than the resources 36 a that can handle the new job 38 . If the identified job 34 can only be processed by the same resources 36 a or a subset of the same resources 36 a as the new job 38 , the system 14 stops ( 28 ) its rescheduling efforts, since the system 14 can no more assign the identified job 34 to an idle processor than the system 14 could assign the new job 38 . Thus, despite system 14 efforts to make room for the new job 38 , the new job 38 is nevertheless blocked. As shown in FIG. 3A, however, the system 14 has identified a job 34 of class “4” which can be processed by a resource (or resources) 36 b other than the resources 36 a that can process the new job 38 . The system 14 makes a contingent assignment ( 30 ) of the new job 38 to the resource 35 currently processing the identified job 34 . The system 14 will only enforce the contingent reassignment (i.e., hands-off jobs to different resources) if the system can continue to process all jobs being processed prior to the new job's 38 request for processing. That is, the system 14 never terminates a job once a resource has started processing a job. After making the contingent assignment ( 30 ) of the new job 38 to a resource 35 , the system 14 must find a resource to process job 34 whose resource 35 has contingently been assigned to the new job 38 . The system 14 attempts to find a resource for job 34 by repeating the scheduling process performed for the new job 38 . That is, the system 14 searches for idle resources 36 b that can handle the job 34 contingently displaced by the new job 38 . As shown in FIG. 3B, the job 34 of class “4” could be processed by resources of class “4”, “5”, “6”, “7”, or “8”. The previous iteration, however, determined that no idle resources 36 a existed in classes “7” or “8”. The resources 36 a already checked for idle processors form an upperbound that enables the system 14 to restrict its search ( 30 ) to resources of class “4”, “5”, and “6” ( 36 b ). Again, the system 14 identifies ( 24 ) the lowest class job 40 processed by the resources 36 b capable of handling the job 34 the system 14 is trying to schedule. Since the lowest class job 40 of class “1” can be handled by resources 36 c other than those 36 b that can handle the displaced job 34 , the system 14 can make a contingent assignment of job 34 to the resource 41 that previously processed job 40 . The system 14 next tries to find a resource to process job 40 , requiring another iteration of the job scheduling process 14 . As shown in FIG. 3C, the system 14 finally finds an idle resource 42 capable of handling the newly displaced job 40 . After assigning ( 22 ) job 40 to the idle resource 42 , the system 14 can actually enforce ( 23 ) the contingent assignments made during the different iterations of the scheduling process. On the other hand, had the system 14 failed to find a resource capable of handling the newly displaced job 40 , the system 14 would not enforce any contingent assignments made during the previous iterations and would restore the job/resource scheduling that existed prior to the system 14 attempt to make room for the new job 38 . The new job 38 would be blocked and is would have to wait for a resource to finish processing before being processed. To summarize, as shown in FIG. 3D, the system 14 , rather than blocking new job 38 , has found a resource capable of processing the new job 38 by reassigning the jobs currently being processed. The system 14 did so with few hand-offs of jobs between resources 10 . As illustrated in FIGS. 3A-3D, the system 14 is work conserving. That is, the system 14 will always find a scheduling configuration that will accommodate a new job request providing such a configuration exists. It should be noted that the system 14 is not limited to the number of classes or the number of resources featured in FIGS. 3A-3D. Similarly, the designations of the classes and the cardinality of the resources in each class FIGS. 3A-3D were arbitrarily selected. The job scheduling system 14 described can improve the performance of various telecommunications systems. For example, the job scheduling system 14 can reduce the number of calls denied service by a wireless telecommunication system. Referring to FIG. 4, an example wireless communication system 41 includes a base station 44 that serves remote terminals 12 a 5 12 b (e.g., a cellular phone) in a hexagonal cell 42 . As shown, the cell 42 uses a fixed reuse partitioning (FRP) scheme that features different overlapping partitions 45 a - 45 d. For example, the innermost partition 45 d of cell 42 closely encircles base station 44 . The outermost partition 45 a traces the hexagonal cell 42 outline and encloses other cell partitions 45 b - 45 d. Each partition 45 a - 45 d offers several communication frequencies. For example, the innermost partition 45 d offers frequencies 10 d ′, 10 d ″, while the outermost partition 45 a offers frequencies 10 a ′- 10 a ′″. A partition frequency 10 a ′- 10 d ″ can handle communication in its corresponding partition and any included partition. That is, channel frequencies 10 d ′ and 10 d ″ can only serve remote terminals 12 a within the region bounded by innermost partition 45 d. Frequencies 10 a ′- 10 a ′″, corresponding to the outermost partition 45 a, can handle communication with any remote terminal 12 a or 12 b located within the cell 42 . A frequency can be considered a resource having a class corresponding to the largest partition the frequency can serve. For example, frequencies 10 a ′- 10 a ′″, capable of serving any of the four cell partitions 45 a - 45 d, offer resources of class “4”. Frequency 10 b, serving three cell partitions 45 b - 45 d, offers a resource of class “3”, and so forth. Communication with a remote terminal in a cell 42 can be considered a job 12 a - 12 b having a class corresponding to the partition where the remote terminal is located. For example, remote terminal 12 a is located in the innermost partition 45 d, and forms a job class of “1”. Remote terminal 12 b is located in the outermost partition 45 a and forms a job of class “4”. The wireless communication system described above has, for the purpose of this illustration, the same components and constraints handled by the job scheduling process 14 described above. That is, a frequency of a given class can only handle remote terminal jobs of a lesser or equal class. For example, the frequency of class “4” can handle any remote terminal job located in the cell 42 . While a frequency of class “1” can only handle a remote terminal job located within the partition 45 d encircling the base station 44 . When a wireless communication system using the job scheduling system 14 receives a request for communication, the scheduling system 14 attempts to dynamically reschedule (i.e., change a job's communication frequency) on-going remote terminal jobs to make room for the requesting remote terminal job without stopping any on-going communication. Using the job scheduling system 14 to handle remote terminal job scheduling reduces job blocking without interrupting on-going job processing. That is, the system 14 serves new calls more quickly and does not disconnect on-going calls. Further, the system 14 uses relatively few hand-offs to shift on-going communication to other frequencies. Referring to FIG. 5, the job scheduling system 14 can also improve prioritized communication between a source 74 and a destination 68 . Various multiplexing techniques can segment a communication channel 70 into subchannels 10 a - 10 i for transmitting information 12 a - 12 b. For example, time division and frequency division multiplexing can both divide a channel into different subchannels. Each subchannel 10 a - 10 i and piece of information 12 a - 12 b has an assigned priority rating. Arbitrarily, a lower priority rating indicates more urgent communication. For example, information 12 a having a priority rating of “2” has priority over information 12 b having a priority rating of “4”. Source 74 schedules information for transmission over subchannels 10 a - 10 i such that a subchannel can only carry sets of information 12 a - 12 b having a priority less than or equal to the assigned priority of the subchannel 10 a - 10 i. For example, subchannel 10 i, having a priority rating of “4”, can process information having a priority rating of “1”, “2”, “3” or “4”. While subchannel 10 a, having a priority rating of “1”, is reserved for transmitting urgent information having a priority rating of “1”. Each subchannel can be considered a resource belonging to a class corresponding the subchannel's priority rating. Likewise, each set of information can be considered a job belonging to a class corresponding to the information's priority rating. Incorporating the job scheduling system 14 into the source 74 enables the source 74 to dynamically reschedule information transmission over subchannels using the process described in regard to FIGS. 2 and 3 A- 3 D. Thus, the source 74 can often allocate a subchannel for an urgent information transmission request without interrupting on-going information transmission. The communication environment shown in FIG. 5 offers the job scheduling system 14 implementation flexibility. For example, instead of physically handing-off a job from one resource to another resource, the system 14 can simply swap the priority ratings of the respective resources. Additionally, the system 14 can dynamically alter the priority ratings of subchannels based on the distribution of communication requests received. It will be understood by those of skill in the art, that the benefits of the job scheduling system of the present invention extend beyond and may be realized in other than the systems specifically shown and described herein. Referring to FIG. 6, for example, the job scheduling system 14 can be implemented on computer platform 48 or other hardware capable of executing programming instructions. The computer platform 48 can include a display 50 to monitor job scheduling and a digital computer 52 . The digital computer 52 includes memory 54 , a processor 56 , a mass storage device 58 , and other customary components such as a memory bus and peripheral bus (not shown). The platform 48 may further include a connection 62 to other equipment such as, for example, a wireless communication system base station. Mass storage device 58 (e.g., a hard disk, floppy disk, CD-ROM, etc.) stores the job scheduling system 14 instructions and potentially an operating system 60 . Preferably, the job scheduling system 14 uses recursive programming to implement the scheduling process described in conjunction with FIG. 2 . While preferably implemented in firmware, the invention may also be implemented in computer hardware, software, or a combination thereof. The implementation may include a computer program product tangibly embodied in a computer program storage device for execution by a computer processor. Implementation of methods of the invention may include execution of method steps by a computer processor under control of a stored program executed by the processor from a randomly accessible program stored to perform the functions of the invention by operating on input data and generating output. Suitable processors include, by way of example, both general and special purpose microprocessors. Generally, a processor will receive instructions and data from a read-only memory and/or a random access memory. Storage devices suitable for tangibly embodying computer program instructions include all forms of non-volatile memory, including by way of example semiconductor memory devices, such as EPROM, EEPROM, and flash memory devices; magnetic disks such as internal hard disks and removable disks; magneto-optical disks; and CD-ROM disks.