Password: In this paper, we present a node mobility prediction framework based on a generic mobile grid architecture. We show how this framework can be used to formulate a cost effective job scheduling scheme based on a predetermined fair pricing strategy at the wireless access point. The pricing strategy formulates an incomplete information, alternating-offers bargaining game on two variables, such as price per unit resource and percentage of bandwidth allocated. The proposed cost-optimal job allocation scheme is for distributing grid computing jobs to the mobile nodes and considers the bandwidth constraints, the internal job (e.g., call processing) arrival rate at the nodes along with issues pertaining to node mobility. The simulation results point to the efficacy of our algorithm. Keywords Mobile grid computing ; Non-cooperative alternating-offers bargaining game ; Job scheduling ; Constrained optimization 1. Introduction With the incorporation of heterogeneous, portable computing and communication resources (e.g., laptops and PDAs), the scale and complexity of today’s grid computing systems continue to grow. Alongside, the challenges in providing grid jobs to resource-constrained environments also increase significantly. Job allocation schemes in such systems play a very important role in ensuring efficient and optimized resource allocation at the individual nodes, thus improving the overall performance. We can have single- or multi-class jobs depending on different users owning the jobs as well as the delay experienced by the jobs at each node (for execution) and each communication link (for job transfer). An efficient job allocation scheme should allocate these jobs to the grid nodes depending on their arrival rates in order to optimize a specified performance metric such as the time deadline, revenue (for the nodes or the job allocator), or response time. The major approaches for designing job allocation schemes in distributed systems are generally categorized as  [1] : (i) global approach : where a centralized job allocator minimizes the expected system response time over all jobs using linear optimization techniques  [2] , [3] , [4] , [5]  and  [6] , (ii) cooperative approach: where the computing nodes cooperate using game-theoretic approaches, to compute an optimal job allocation that minimizes the expected execution time of jobs per node  [1] , and (iii) non-cooperative approach : where each job attempts to minimize its own response time by playing a non-cooperative game with the other jobs  [7]  and  [8] . The conventional Grid architecture has been recently extended in  [9] to a mobile grid environment to utilize the idle CPU cycles from a plethora of mobile nodes including laptops, PDAs and other portable devices. The goal is to potentially utilize this huge resource repository of mobile devices to provide a seamless source of computational power and storage capacity. However, this concept offers significant challenges mainly due to the inherent limitations in processing, memory, battery power and wireless communication capabilities of mobile devices. The uncertainty in the mobility pattern of a mobile node also plays a part in compounding the problem. Job scheduling in mobile grids thus require a robust system model that can incorporate all these factors. We also need to consider an economic pricing model that will govern the cost benefits of mobile device owners to allow complex computational jobs to be performed at those devices. Due to the conflict of interest between the players, namely the mobile device and the wireless access point server (WAP), this pricing model can be more realistically formulated using a non-cooperative bargaining theory   [10] framework. 1.1. Related works To consider the QoS requirements of grid users, several toolkits and Grid middleware approaches have been proposed, of which the Globus toolkit  [11] is the most popular. Globus offers software services and libraries for resource monitoring, discovery, and management to cater to heterogeneous environments. The Condor project  [12] was designed to run jobs within a single administrative domain while Condor-G  [13] was extended to run jobs across many administrative domains. It also introduces a grid scheduler and manager to allow queueing services for grid jobs, a credential manager, and fault-tolerance issues. The Grid Application Development Software (GrADS)  [14] tool simplifies the issue of heterogeneity in distributed computing; scheduling at the application level minimizes the application execution time; whereas many applications are considered at the meta-scheduling level to improve the overall system performance. Recently, the Akogrimo project  [15] aims to build a future architecture for efficient resource sharing and distributed service provisioning in a multi-provider mobile grid environment. They integrate mobility and network layer QoS support to develop an integrated service architecture for commercial mobile grid networks. As mobile grids gain popularity, development of an efficient middleware becomes important.  [16] presents a task replication based resource management scheme to guarantee a specific fault-tolerance level. The security aspects of practical grids is handled by the Grid Security Infrastructure (GSI), formerly called the Globus Security Infrastructure. It provides a specification for secret, tamper-proof communication between software in a grid computing environment. Secure, authenticated communication is enabled using asymmetric encryption with digital signatures. Scheduling and resource management in grids has also been extensively studied.  [14] extends the GrADS scheduling algorithm by introducing more sophisticated clustering and data mining schemes.  [17] minimizes the total completion time of the tasks and some scheduling heuristics for minimizing the total task completion time are discussed in  [18]  and  [19] .  [20] presents a distributed job scheduling algorithm considering multiple simultaneous job requests. A comparative evaluation of a few different grid scheduling schemes was presented in  [21] . Task workload prediction is another important aspect of practical grid implementations. It is performed using either a statistical  [22] (where the application parameters affecting the execution time are determined) or an analytical model  [23]  and  [24] (that requires an analysis of the application code). In  [25] , the authors propose a nonlinear task workload prediction mechanism incorporated with a fair scheduling algorithm for task allocation and resource management in grids. A major drawback of these approaches is that the job allocation is performed without considering a fair pricing strategy and the schemes do not consider the bandwidth and mobility issues that arise with the incorporation of mobile nodes in grid computing. In this paper, our goal is to devise a cost-optimal job allocation scheme based on a fair pricing strategy for mobile grid systems that supports node mobility . We define cost-optimality in terms of minimizing the total price (that the job allocator has to pay to the nodes) to complete all the jobs by the nodes. The nodes may have (wireless) bandwidth constraints and subsequently might encounter high communication delays in job transfer. A job allocator (JA) receives discrete, serial batch jobs from the grid users and assign them to the heterogeneous mobile nodes for completion. This concept was first presented in  [26]  and  [27] by implementing an incomplete information, non-cooperative, alternating-offers bargaining game  [28] between the wireless access point (WAP) server (acting as the job allocator) and the different mobile clients under it (i.e., the computing nodes). Note that a cost-optimal job allocation scheme requires a pricing strategy that has been implemented in various ways before [29] , [30] , [31]  and  [32] . However, these strategies are not fair, and hence not profitable from the computing node’s perspective. A fair pricing strategy should ensure that there are no extra incentives for the job allocator or the nodes in deciding the price of a certain unit of job allocated. The pricing and job scheduling policies in mobile grid systems need to manage resources and application execution depending on the requirements of resource consumers (i.e., the job allocator) and resource owners (i.e., the mobile nodes). They also need to continuously adapt to changes in the availability of resources. Thus, the idle processing power of a node (that is used to execute the grid jobs) can change dynamically based on that node’s internal job arrival rate. This is because the nodes are not dedicated for grid jobs and can have a certain internal job arrival rate into them (e.g., for call processing). The job allocator has to keep track of this internal job arrival rate at the nodes to ensure cost-optimal scheduling. We assume that the jobs are independent and do not communicate among themselves or with other nodes. We also assume that the nodes periodically notify the JA about their internal job arrival rate such that the JA has a global view of the processing status and link conditions at each node.