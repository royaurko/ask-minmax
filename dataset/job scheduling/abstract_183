  Grid computing is a computational framework used to meet growing computational demands. This paper introduces a novel approach based on Particle Swarm Optimization (PSO) for scheduling jobs on computational grids. The representations of the position and velocity of the particles in conventional PSO is extended from the real vectors to fuzzy matrices. The proposed approach is to dynamically generate an optimal schedule so as to complete the tasks within a minimum period of time as well as utilizing the resources in an efficient way. We evaluate the performance of the proposed PSO algorithm with a Genetic Algorithm (GA) and Simulated Annealing (SA) approach. Empirical results illustrate that an important advantage of the PSO algorithm is its speed of convergence and the ability to obtain faster and feasible schedules. Keywords Swarm intelligence ; Grid computing ; Particle swarm optimization ; Fuzzy system 1. Introduction A computational grid is a large scale, heterogeneous collection of autonomous systems, geographically distributed and interconnected by low latency and high bandwidth networks  [1] . The sharing of computational jobs is a major application of grids. In a computational grid, the resources are dynamic and diverse and can be added and withdrawn at any time according to the owner’s discretion, and their performance or load can change frequently over time. Grid resource management provides functionality for the discovery and publishing of resources as well as scheduling, submission and monitoring of jobs. However, computing resources are geographically distributed under different ownerships each having their own access policy, cost and various constraints. Every resource owner might have a unique way of managing and scheduling resources and the grid schedulers must ensure that they do not conflict with the resource owner’s policies. In the worst-case situation, the resource owners might charge different prices to different grid users for their resource usage and this might vary from time to time. Dong and Akl [2] provided a more complete analysis of the scheduling problem on the grid, which is known to be NP-complete [3] . This attracted the attention of researchers worldwide because of its practical importance and its complexity. Scheduling algorithms can be categorized, among others into static or dynamic, centralized or decentralized. Recently several metaheuristics were introduced to minimize the average completion time of jobs through optimal job allocation on each grid node in application-level scheduling  [4] , [5]  and  [6] . Due to the intractable nature of the problem and its importance in grid computing, it is desirable to explore other avenues for developing good heuristic algorithms for the problem. Particularly, with its sound exploration ability of both global and local optimal solutions, some new search techniques involving nature-inspired meta-heuristics have become the new focus of scheduling research. In this paper we introduce a novel approach based on Particle Swarm Optimization (PSO) for scheduling jobs on computational grids. The PSO approach to scheduling jobs on computational grids is based on fuzzy matrices to represent the position and velocity of the particles in PSO [7]  and  [8] in which a new mapping between the job scheduling problem and the particle is constructed. The approach is to dynamically generate an optimal schedule so as to complete the tasks in a minimum period of time as well as utilizing the resources in an efficient way. The rest of the paper is organized as follows. Section  2 deals with some theoretical foundations related to job scheduling. In Section  3 , we describe the proposed PSO based algorithm in detail. Experimental results are presented in Section  4 and some conclusions and future works are provided towards the end. 2. Scheduling problem formulation In the computational grid environment, there is usually a general framework focusing on the interaction between grid resource broker, domain resource manager and the grid information server [9] . Computational grids usually assume that the physical and virtual levels are completely split but there is a mapping between resources and users of the two layers  [10] . Han and Berry [11] proposed a novel semantic-supported and agent-based decentralized grid resource discovery mechanism. Without overheads of negotiation, the algorithm allows individual resource agents to semantically interact with neighboring agents based on local knowledge and to dynamically form a resource service chain to complete the tasks. Chung and Chang  [12] presented a Grid Resource Information Monitoring (GRIM) prototype to manage large scale grid resources for dynamic access and resource management in the grid environment. In a grid environment it is usually easy to obtain information about the speed of the available grid nodes but quite complicated to know the computational processing time requirements from the user. To conceptualize the problem as an algorithm, we need to dynamically estimate the job lengths from user application specifications or historical data. For clarity, some key terminologies are defined as follows: Grid Node (computing unit) A grid node is a set of computational resources with limited capacities. It may be a simple personal machine, a workstation, a super-computer, or a cluster of workstations. The computational capacity of the node depends on its number of CPUs, amount of memory, basic storage space and other specifications. In other words, each node has its own processing speed, which can be expressed in number of Cycles Per Unit Time (CPUT). • Jobs and Operations A job is considered as a single set of multiple atomic operations/tasks. Each operation will be typically allocated to execute on one single node without pre-emption. It has input and output data and processing requirements in order to complete its task. The operation has a processing length expressed in number of cycles. • Schedule and Scheduling Problem A schedule is the mapping of the tasks to specific time intervals of the grid nodes. A scheduling problem is specified by a set of machines, a set of jobs/operations, optimality criteria, environmental specifications, and by other constraints.