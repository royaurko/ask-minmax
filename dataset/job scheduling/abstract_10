Password: Grid computing utilizes the distributed heterogeneous resources in order to support complicated computing problems. Grid can be classified into two types: computing grid and data grid. Job scheduling in computing grid is a very important problem. To utilize grids efficiently, we need a good job scheduling algorithm to assign jobs to resources in grids. In the natural environment, the ants have a tremendous ability to team up to find an optimal path to food resources. An ant algorithm simulates the behavior of ants. In this paper, we propose a Balanced Ant Colony Optimization (BACO) algorithm for job scheduling in the Grid environment. The main contributions of our work are to balance the entire system load while trying to minimize the makespan of a given set of jobs. Compared with the other job scheduling algorithms, BACO can outperform them according to the experimental results. Keywords Ant algorithm ; Job scheduling ; Grid computing 1. Introduction Current scientific problems are very complex and need huge computing power and storage space. The past technologies such as distributed or parallel computing are unsuitable for current scientific problems with large amounts of data. Processing and storing massive volumes of data may take a very long time. Grid computing  [1] is a new paradigm for solving those complex problems. In grids, we need to consider the conditions such as network status and resources status. If the network or resources are unstable, jobs would be failed or the total computation time would be very large. So we need an efficient job scheduling algorithm for these problems in the grid environment. The purpose of job scheduling is to balance the entire system load while completing all the jobs at hand as soon as possible according to the environment status. Because the environment status may change frequently, traditional job scheduling algorithm such as “First Come First Serve” (FCFS), “Shortest Job First” (SJF), etc., may not be suitable for the dynamic environment in grids. In grids, users may face hundreds of thousands of computers to utilize. It is impossible for anyone to manually assign jobs to computing resources in grids. Therefore, grid job scheduling is a very important issue in grid computing. For example, in BOINC  [2] , an open-source software for volunteer computing and grid computing, job scheduling is one of the most important key factors for achieving Teraflops performance  [3] . Because its importance, many job scheduling algorithms for grids  [4] , [5]  and  [6] have been proposed. Please refer to a survey  [7] , which also poses some open issues. A good schedule would adjust its scheduling strategy according to the changing status of the entire environment and the types of jobs. Therefore, a dynamic algorithm in job scheduling such as Ant Colony Optimization (ACO)  [8]  and  [9] is appropriate for grids. ACO is a heuristic algorithm with efficient local search for combinatorial problems. ACO imitates the behavior of real ant colonies in nature to search for food and to connect to each other by pheromone laid on paths traveled. Many researches use ACO to solve NP-hard problems such as traveling salesman problem  [10] , graph coloring problem  [11] , vehicle routing problem  [12] , and so on. This paper applies the ACO algorithm to job schedule problems in Grid computing. We assume each job is an ant and the algorithm sends the ants to search for resources. We also modify the global and local pheromone update functions in ACO algorithm in order to balance the load for each grid resource. Finally, we compare the proposed BACO (Balanced ACO) algorithm with iACO (Improved ACO)  [13] , FPLTF (Fastest Processor to Largest Task First)  [14] , dynamic FPLTF  [15] , Sufferage  [15] , and random selection method in the experiments. According to the experimental results, we can find out that BACO is capable of achieving system load balance better than other job scheduling algorithms. The rest of the paper is organized as follows. Section  2 introduces the related work about many kinds of ACO algorithm and job scheduling in grids. Section  3 details the proposed ACO algorithm in job scheduling. Section  4 is the experimental results. Finally, Section  5 concludes this paper. 2. Related work 2.1. Ant algorithms There are many different kinds of ACO algorithm, i.e., Ant Colony System (ACS)  [10] , Max-Min Ant System (MMAS)  [16] , Rank-based Ant System (RAS)  [17] , Fast Ant System (FANT)  [18] and Elitist Ant System (EAS)  [19] . ACS uses the pseudo-random-proportional rule to replace state transition rule for decreasing computation time of selecting paths and update the pheromone on the optimal path only. It is proved that it helps ants search the optimal path. MMAS is based on the basic ACO algorithm but limiting the pheromone range to be greater than or equal to the low bound value (Min) and smaller than or equal to the upper bound value (Max). The low bound and upper bound are defined by the user. According to the low bound and upper bound values, MMAS could avoid ants to converge too soon in some ranges. In the design of RAS, it sorts the ants by ant’s tour length in ascending order after all ants completed their tours. It means that the first ant finds the shortest path to complete the tour and the last ant takes the longest tour. They give each ant a different density of pheromone to update their path by the ascending order: the higher the position of the ant, the more pheromone it could update; the lower the position of the ant, the less pheromone it has. By the idea of RAS, the shortest length gets more pheromone to attract more ants to follow and the system could get the optimal solution very soon. FANT employs one ant at each iteration and uses the solution of the ant to do a local search. FANT works without evaporation rule and it updates pheromone after each iteration. In order to avoid the sub-optimal solution, it applies a reset pheromone function. EAS update more pheromone on the best-so-far tour found in order to attract more ants to follow the best-so-far tour. There are many studies about job scheduling using ACO algorithm in grid environment such as  [13] . It uses the basic idea of ACO, but changes the pheromone update rule by adding encouragement, punishment coefficient and load balancing factor. In  [20] , Kwang Mong Sim et al. use multiple kinds of ant to find multiple optimal paths for network routing. The idea can be applied to find multiple available resources to balance resources utilization in job scheduling. The key of the idea is each different kinds of ant can only sense their own kind of pheromone so that it can find many different paths including the shortest-path by different kinds of ant. There are still some problems that if all kinds of ant find the same path, it will be the same as using one kind of ant. How to compare the performance for each kind of ant creates another problem. Furthermore, one solution from this algorithm may work efficiently in an environment, but it may work inefficiently in another one. In  [21] , J. Heinonen et al. apply the hybrid ACO algorithm with different visibility to job-shop scheduling problem. The hybrid ACO algorithm consists of two ideas. One idea is the basic ACO algorithm, and the other idea uses the post-processing algorithm in the part of local search in ACO algorithm. When the ACO algorithm finished, all ants complete its own tours. A tour can be decomposed into blocks. The block for swap must contain more than two operations. Then the post-processing algorithm uses the swap operation on the blocks. If the swap refines the makespan, the new path is accepted; otherwise the swap is invalid and the swapped block reverts to previous status. The ACO algorithm has also been applied to hard combinatorial optimization problems such as traveling salesman problem (TSP)  [10] , flow shop problem  [22] , project presentation scheduling  [23] , graph coloring problem  [11] , vehicle routing problem  [12] , and nurse scheduling  [24] , and so on. 2.2. Job scheduling in grids Job scheduling is well studied within the computer operating systems  [25] . Most of them can be applied to the grid environment with suitable modifications. In the following we introduce several methods for grids. The FPLTF (Fastest Processor to Largest Task First)  [14] algorithm schedules tasks to resources according to the workload of tasks in the grid system. The algorithm needs two main parameters such as the CPU speed of resources and workload of tasks. The scheduler sorts the tasks and resources by their workload and CPU speed then assigns the largest task to the fastest available resource. If there are many tasks with heavy workload, its performance may be very bad. Dynamic FPLTF (DPLTF)  [15] is based on the static FPLTF, it gives the highest priority to the largest task. DPLTF needs prediction information on processor speeds and task workload. The WQR (Work Queue with Replication) is based on the work queue (WQ) algorithm  [15] . The WQR sets a faster processor with more tasks than a slower processor and it applies FCFS and random transfer to assign resources. WQR replicates tasks in order to transfer to available resources. The amount of replications is defined by the user. When one of the replication tasks is finished, the scheduler will cancel the remaining replication tasks. The WQR’s shortcoming is that it takes too much time to execute and transfer replication tasks to resource for execution.