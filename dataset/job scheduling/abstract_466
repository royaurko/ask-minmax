A ‘Grid’ is an infrastructure for resource sharing. It is used for large-scale data processing, many of the applications being scientific ones. Grid scheduling is a vital component of a Grid infrastructure. Reliability, efficiency (in terms of time consumption) and effectiveness in resource utilization are the desired characteristics of Grid scheduling systems. Many algorithms have been developed for Grid scheduling. In our previous work, we proposed two scheduling algorithms (the Multilevel Hybrid Scheduling Algorithm and the Multilevel Dual Queue Scheduling Algorithm) for optimum utilization of processors in a Grid computing environment. In this paper, we propose two more flavours of Multilevel Hybrid scheduling algorithms; i.e. the Dynamic Multilevel Hybrid Scheduling Algorithm using Median and the Dynamic Multilevel Hybrid Scheduling Algorithm using Square root. We evaluate our proposed Grid scheduling using real workload traces, taken from leading computational centers. The main idea of the proposed algorithms is to execute jobs optimally, i.e. with minimum average waiting, turnaround and response times. An extensive performance comparison is presented using real workload traces to evaluate the efficiency of scheduling algorithms. To facilitate the research, a software tool has been developed which produces a comprehensive simulation of a number of Grid scheduling algorithms. The tool's output is in the form of scheduling performance metrics. The experimental results, based on performance metrics, demonstrate that the performances of our Grid scheduling algorithms give good results. Our proposed scheduling algorithms also support true scalability, that is, they maintain an efficient approach when increasing the number of processors or nodes. This paper also includes a statistical analysis of real workload traces to present the nature and behavior of jobs. Our proposed scheduling algorithms are unique. They have three key features. First, they favor the shortest job for execution. Second, they execute the job on the basis of a dynamic time quantum, to fairly distribute processor time among Grid jobs. A third feature is that they always execute the longest job, thus avoiding starvation.