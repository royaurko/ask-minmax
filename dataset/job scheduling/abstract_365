Password: Beam Search is a heuristic method for solving optimization problems. It is an adaptation of the branch and bound method in which only some nodes are evaluated in the search tree. At any level, only the promising nodes are kept for further branching and remaining nodes are pruned off permanently. In this paper, we develop a beam search based scheduling algorithm for the job shop problem. Both the makespan and mean tardiness are used as the performance measures. The proposed algorithm is also compared with other well known search methods and dispatching rules for a wide variety of problems. The results indicate that the beam search technique is a very competitive and promising tool which deserves further research in the scheduling literature. Keywords Scheduling ; Beam search ; Job shop 1. Introduction Beam search is a heuristic method for solving optimization problems. It is an adaptation of the branch and bound method in which only some nodes are evaluated. In this search method, at any level only the promising nodes are kept for further branching and the remaining nodes are pruned off permanently. Since a large part of the search tree is pruned off aggressively to obtain a solution, its running time is polynomial in the size of the problems. This search technique was first used in artificial intelligence for the speech recognition problem ( Lowerre, 1976 ). There have been a number of applications reported in the literature since then. Fox (1983) used beam search for solving complex scheduling problems by a system called ISIS. Later, Ow and Morton (1988) studied the effects of using different evaluation functions to guide the search and compare the performance of beam search with other heuristics for the single machine early/tardy problem and the flow shop problem. They also proposed a variation of this technique called the filtered beam search and found optimal settings of the search parameters. In another study, Chang et al. (1989) used beam search as a part of their FMS scheduling algorithm called bottleneck-based beam search (BBBS). Results indicate that BBBS outperforms widely used dispatching rules for the makespan criterion. Another beam search application to FMSs is reported by De and Lee (1990) who showed that the solution quality of filtered beam search algorithm is better than depth-first type heuristics in terms of the average maximum lateness and average flowtime measures. The authors also showed that beam search was better than breadth first type heuristics in terms of number of nodes created during the search. In another study, Hatzikonstantis and Besant (1992) proposed a heuristic called A * for the job shop problem with the makespan criterion. A * algorithm is very similar to the beam search method. The only difference is that A * algorithm is a best-first search based heuristic and aims to find minimum-cost paths in search trees. Computational tests indicate that this heuristic search algorithm performs better than dispatching rules. Finally, Sabuncuoglu and Karabuk (1998) proposed a filtered beam search algorithm for more complex FMS environment in which AGVs are explicitly modeled in addition to the routing and sequence flexibilities. Their computational experiments show that the beam search performs better than the machine and AGV scheduling rules under all experimental conditions for the makespan, mean flow time and mean tardiness criteria. Their results also indicate that the beam search based scheduling algorithm exploits flexibilities inherent in FMS more effectively than other methods. An overview of the beam search and its applications to optimization problems can be found in Morton and Pentico (1993) . Even though beam search has been used to solve a wide variety of optimization problems, its performance is not generally known for scheduling problems. Because, in the existing research work, beam search is primarily applied to the FMS scheduling problem with additional considerations on MHS finite buffer capacities and flexibilities and compared with only some dispatching rules. Hence, its relative performances with respect to the known optimum solution and other recently developed heuristics are not known. Besides, it has not been thoroughly studied as a problem solving strategy with certain evaluation functions and search parameters. This paper attempts to achieve some of these objectives. First of all, we measure the performance of beam search (with respect to optimum solutions) and compare it with other well-known algorithms. In addition, we investigate the effectiveness of various rules as local and global functions of the beam search applications. The previous research indicates that the values of filter and beam width affect the performance of the beam search. Hence, we also examine the performance of beam search for various values of filter and beam width and find their proper values. Furthermore, we test two well-known schedule generation schemes (active and nondelay schedule generation schemes) in the context of the beam search applications to the job shop problems. The rest of the paper is organized as follows. Section 2 gives definitions of the job shop problem. Then a beam search based algorithm is developed for the problem. This is followed by a discussion on test problems and computational experience with the proposed algorithm. The paper ends with concluding remarks and suggestions for further research. 2. Problem definition The job shop problem is to determine the start and completion time of operations of a set of jobs on a set of machines, subject to the constraint that each machine can handle at most one job at a time (capacity constraints) and each job has a specified processing order through the machines (precedence constraints). Explaining the problem more specifically, there are a finite set J of jobs and a finite set M of machines. For each job j ∈ J , a permutation ( σ 1 j ,…, σ m j ) of the machines (where m =| M |) represents the processing order of job j through the machines. Thus, j must be processed first on σ 1 j , then on σ 2 j , etc. Also, for each job j and the machine i , there is a nonnegative integer p ji , the processing time of job j on machine i . Since, this problem is NP-Hard ( Garey and Johnson, 1979 ) and very difficult to solve, early studies on this problem were directed at development of effective priority dispatching rules. But later, due to the general deficiencies exhibited by priority dispatching rules, researchers concentrated on more complex techniques. Tabu search ( Glover, 1989  and  Glover, 1990 ), large step optimization ( Martin et al., 1989 ), simulated annealing ( Matsua et al., 1988 ; Aarts et al., 1991 ), neural networks ( Sabuncuoglu and Gurgun, 1996 ) and genetic algorithms ( Nakano and Yamada, 1991 ) are examples of the formalized applications of such scheduling techniques to the job shop problem. A comprehensive bibliography of these studies for the job shop problem is given by Jain and Meeran (1996) . In this paper, we measure the performance of beam search for the makespan and mean tardiness criteria. Makespan, C max is the duration in which all operations for all jobs are completed. Tardiness is the positive difference between the completion time and due date of a job. The objective is to determine starting times for each operation in order to minimize the makespan or mean tardiness while satisfying all the capacity and precedence constraints: where C i and d i are the completion time and due date of job i , respectively. 3. Beam search Beam search is like breadth-first search since it progresses level by level without backtracking. But unlike breadth-first search, beam search only moves downward from the best β promising nodes (instead of all nodes) at each level and β is called the beam width . The other nodes are simply ignored. In order to select the best β nodes, promise of each node is determined. This value can be determined in various ways. One way is to employ an evaluation function which estimates the minimum total costs of the best solution that can be obtained from the partial schedule represented by the node. Such an evaluation function may require as little effort as computing some priority rating or as much as completing the partial schedule by some method. The former method is called one-step priority evaluation function , and the latter case is called total cost evaluation function . The one-step priority evaluation function has a local view , whereas, the total cost evaluation employs a projecting mechanism to estimate costs from the current partial solution. Therefore, evaluation is based on a global view of the solution. Unfortunately, there is a trade-off between these two approaches: one-step (local) evaluation is quick but may discard good solutions. On the other hand, more thorough evaluation by the global function is more accurate but computationally more expensive. A filtering mechanism is also proposed in the literature to reduce the computational burden of beam search. During filtering some nodes are discarded permanently based on their local evaluation function values. Only the remaining nodes are subject to global evaluation. The number of nodes retained for further evaluation is called the filter width ( α ). As shown in Fig. 1 , we determine the promising nodes (beam nodes) by performing local and global evaluations and proceed with the search through these selected nodes. After determining the first beam nodes at level 1, we apply the algorithm to these nodes independently and generate one partial tree from each of them. We refer to these partial trees as beams. For each beam after filtering based on the outcome of the global evaluation, one node (beam node for the next level) is selected among the descendants of each node. Since we have beam width number of nodes in the former level while keeping one descendant, we again have beam width number of nodes in the next level and therefore the search progresses through β parallel beams. In the application of beam search, one can have as many beams as possible. On the other hand, filter width is defined for each beam independently. Thus, the number of beams (which is defined by the beam width parameter) can be feasibly greater than the filter width value.