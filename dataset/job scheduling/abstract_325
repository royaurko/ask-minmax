  We evaluate job scheduling algorithms that integrate both tasks of Grid scheduling: job allocation to Grid sites and local scheduling at the sites. We propose and analyze an adaptive job allocation scheme named admissible allocation. The main idea of this scheme is to set job allocation constraints, and dynamically adapt them to cope with different workloads and Grid properties. We present 3-approximation and 5-competitive algorithms named MLB a + P S and MCT a + P S for the case that all jobs fit to the smallest machine, while we derive an approximation factor of 9 and a competitive factor of 11 for the general case. To show practical applicability of our methods, we perform a comprehensive study of the practical performance of the proposed strategies and their derivatives using simulation. To this end, we use real workload traces and corresponding Grid configurations. We analyze nine scheduling strategies that require a different amount of information on three Grid scenarios. We demonstrate that our strategies perform well across ten metrics that reflect both user- and system-specific goals. ► We propose an adaptive job allocation scheme with an admissible factor to cope with different workloads. ► We present 3-approximation and 5-competitive algorithms for large Grid site scenarios. ► We derive an approximation factor of 9 and a competitive factor of 11 for the general Grid scenario. ► We perform a comprehensive study of the practical performance of the strategies using simulation. ► We analyze scheduling strategies that require a different amount of information. Keywords Grid ; Online scheduling ; Resource management ; Job allocation ; Admissible allocation ; Hierarchical 1. Introduction Job scheduling is an important issue for achieving high performance on Grids. Various scheduling systems have already been proposed and implemented in different types of Grids. However, there are still many open issues in this field. One of the big challenges is the development of coordinated resource provisioning mechanisms that allow more efficient use of resources and higher user satisfaction. In general, the problem of scheduling jobs on multiprocessors is well understood and has been subject to research for decades. Many research results exist for many different variants of this problem. Some of them provide theoretical insights while others give hints for the implementation of real systems. However, scheduling in Grids is almost exclusively addressed by practitioners looking for suitable implementations. There are only very few theoretical results available on Grid scheduling which we will further discuss in Section  3 . In this paper, we consider a basic two layer Grid model. The highest layer consists of a Grid scheduler (resource broker or meta scheduler) that has a general view of job requests and allocates jobs to a suitable Grid site. The management of a specific resource is the task of a local resource management system that knows the present status of its machine and of the jobs that are allocated to it. Local scheduling is independently applied to each site. On each layer, different constraints and specifications are considered. Here, we assume rigid parallel jobs that have a given degree of parallelism and must be assigned exclusively to the specified number of processors or cores during their execution. We apply an admissible allocation policy that excludes certain machines from the set of machines available for allocation of a particular job  [1] . In this paper, we conduct the theoretical analysis of two scheduling algorithms named Min-Lower-Bound with Admissible Job Allocation ( MLB a ) and Min-Completion-Time with Admissible Job Allocation ( MCT a ) under given constraints and makespan optimization criterion, that is, we consider minimization of largest completion time of any job in the system. Specifically, we show that the makespan obtained by our algorithms does not exceed the optimal makespan for any problem instances by more than a certain factor. This factor is called a competitive factor in the on-line case, and an approximation factor in the off-line case, respectively. An approximation factor of 9 for the off-line case and competitive factor of 11 for the on-line case are achieved, improving and extending known results  [1] . We also derived an approximation factor of 3 and a competitive factor of 5 for cases when all jobs fit to the smallest machine as in the problem discussed by Bougeret et al.  [2] .