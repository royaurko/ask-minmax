1. Field of the Invention The present invention relates to a job scheduling system for solving scheduling problems such as a production programming, and in particular, to a scheduling system for generating restriction violating conditions or restriction satisfying conditions and properly using these conditions in later processes so as to effectively set out a schedule. 2. Description of the Related Art Scheduling problems such as production programming include job shop scheduling problem. In a job shop scheduling problem, each of n jobs is composed of m procedures. Each procedure is processed by one of m machines. Each machine cannot execute two or more procedures at the same time. Each procedure has a process time period, an available start time, and an end time. Procedures which compose one job are sequentially related. The start time of each procedure should be designated so that the total process time period becomes minimum. The solution space of this scheduling problem tends to potentially become large due to the presence of many combinations. Thus, a simple search system cannot be used. However, in the apparent solution space, portions where solutions are not present can be sometimes found. Therefore, by properly using this technique, a solution can be effectively obtained. Known techniques of this kind which are conventionally used are, (a) integer programming method, (b) branch and bound method, and (c) ATMS. Next, with respect to these techniques for solving a job scheduling problem, examples for minimizing the total process time period will be described. (a) Integer Programming Method In addition to variables with respect to the start time and end time of each procedure of each job, to represent a condition where two procedures are not processed by the same machine at the same time variables 0-1 with respect to the sequence of procedures executed by the same machine is introduced. However, this process results in increasing the number of variables. In addition, the computing time of the integer programming method tends to exponentially increase proportional to the number of variables. Thus, the computing time period becomes excessively long. (b) Branch and Bound Method In the condition where the start times of some of procedures have not been designated (namely in a partial schedule), the lower bound value of the total processing time period is obtained by using the total process time period of procedures which have not been scheduled (with respect to individual jobs and individual machines). When the lower bound value is larger than the value of the total process time period of the complete scheduling which has been obtained, schedules which contain the partial schedule are removed from the search object. However, in this method, the process time periods of procedures which have not been scheduled are computed with respect to individual jobs or individual machines. Thus, the relation of a plurality of jobs cannot be considered. As a result, the lower bound value is underestimated. Therefore, the search range cannot be effectively narrowed. (c) ATMS The sequence of procedures executed by a particular machine is treated as a hypothesis. The combinations of hypotheses which cannot satisfy restriction conditions are stored. The combinations which contain these hypotheses are discarded. However, since the number of combinations of hypotheses becomes huge, the scale that can be dealt with is restricted. The problems involved in these three methods are summarized as follows. In the integer programming method, since the number of variables increases, the computing time exponentially increases. In the branch and bound method, the lower bound value is underestimated. On the other hand, in the ATMS, since the number of combinations of hypotheses increases, the computing time period increases. SUMMARY OF THE INVENTION An object of the present invention is to provide a scheduling system for designating start times of a plurality of procedures processed by a plurality of resources such as machines, having restriction conditions with respect to available start times, end times, sequence of procedures, and prohibition of simultaneous executions of multiple procedures, the scheduling system being adapted to maximally use earlier-obtained failure information in a later process so as to effectively solve the scheduling problem. A feature of the present invention resides in a scheduling system for designating start times of a plurality of procedures processed by a plurality of resources such as machines, having restriction conditions with respect to available start times, end times, sequence of procedures, and prohibition of simultaneous executions of multiple procedures, the system comprises an initial restriction violating condition set portion for initially setting a restriction violating condition which is a sufficient condition of the violation of the restriction conditions, a start time change portion for changing the start time of a procedure whose start time has been designated, a start time designation portion for designating the start time of a procedure whose start time has not been designated, a restriction violating condition generation portion for substituting starts times of a procedure which satisfy at least one of the restriction violating conditions into the variable of the procedure and ANDing them so as to generate a new restriction violating condition, the start times being changed and designated by the start time change portion and the start time designation portion, respectively, a restriction violating condition storage portion for storing restriction violating conditions generated by the initial restriction violating condition set portion and the restriction violating condition generation portion, wherein any restriction violating condition stored in the restriction violating condition storage portion is not satisfied when the start time of a procedure is changed or designated. Another feature of the present invention resides in a scheduling system for designating start times of a plurality of procedures processed by a plurality of resources such as machines, having restriction conditions with respect to available start times, end times, sequence of procedures, and prohibition of simultaneous executions of multiple procedures, said system comprises an initial restriction satisfying condition set portion for initially setting a restriction satisfying condition which is a necessary condition of said restriction conditions, a start time change portion for changing the start time of a procedure whose start time has been designated, a start time designation portion for designating the start time of a procedure whose start time has not been designated, a restriction satisfying condition generation portion for substituting starts times of a procedure which do not satisfy at least one of said restriction satisfying conditions into the variable of the procedure and ANDing them so as to generate a new restriction satisfying condition, the start times being changed and designated by said start time change portion and said start time designation portion, respectively and a restriction satisfying condition storage portion for storing restriction satisfying conditions generated by said initial restriction satisfying condition set portion and said restriction satisfying condition generation portion, wherein the start time of a procedure is changed or designated such that none of the restriction violating conditions stored in said restriction violating condition storage portion are satisfied. BRIEF DESCRIPTION OF DRAWINGS One skilled in the art can easily understand additional features and objects of this invention from the description of the preferred embodiments and some of the attached drawings. In the drawings: FIG. 1 is a block diagram showing the construction of a first aspect of the present invention; FIG. 2 is a block diagram showing the construction of a second aspect of the present invention; FIG. 3 is a block diagram showing the system construction of an embodiment according to the present invention; FIG. 4 is a flow chart showing the operation of the embodiment; FIG. 5A is a first problem for obtaining an optimum schedule; FIG. 5B is a diagram for explaining a process of the embodiment; FIGS. 6A to 6C are diagrams continued from FIG. 5B; FIGS. 7A and 7B are diagrams continued from FIG. 6C; FIG. 8 is a schematic diagram showing a scheduling example (problem 1) of the embodiment; FIG. 9A is a second problem for obtaining an optimum schedule; FIG. 9B is a diagram for explaining a job shop scheduling process with respect to four jobs and three machines; FIGS. 10A to 10C are diagrams continued from FIG. 9B; FIGS. 11A to 11D are diagrams continued from FIG. 10C; FIGS. 12A to 12D are diagrams continued from FIG. 11D; FIGS. 13A to 13C are diagrams continued from FIG. 12D; FIG. 14 is a schematic diagram showing scheduling example No. 1 of a job shop scheduling process with respect to four jobs and three machines; FIG. 15 is a schematic diagram showing scheduling example No. 2 of the job shop scheduling process of FIG. 14; FIG. 16 is a schematic diagram showing scheduling example No. 3 of the job shop scheduling process of FIG. 14; and FIG. 17 is a schematic diagram showing scheduling example No. 4 of the job shop scheduling process of FIG. 14. These and other objects, features and advantages of the present invention will become more apparent in light of the following detailed description of a best mode embodiment thereof, as illustrated in the accompanying drawings. DESCRIPTION OF PREFERRED EMBODIMENTS FIG. 1 shows the theoretical construction of a first aspect of the present invention. The first aspect of the present invention is a scheduling system for designating start times of a plurality of procedures processed by a plurality of resources such as machines, having restriction conditions with respect to available start times, end times, sequence of procedures, and prohibition of simultaneous executions of multiple procedures, the system comprising an initial restriction violating condition set portion 1 for initially setting a restriction violating condition which is a sufficient condition of the violation of the restriction conditions, a start time change portion 2 for changing the start time of a procedure whose start time has been designated, a start time designation portion 3 for designating the start time of a procedure whose start time has not been designated, a restriction violating condition generation portion 4 for substituting start times of a procedure which satisfy at least one of the restriction violating conditions into a variable of one of restriction violating conditions and ANDing said conditions so as to generate a new restriction violating condition, the start times being changed and designated by the start time change portion 2 and the start time designation portion 3, respectively, a restriction violating condition storage portion 5 for storing restriction violating conditions generated by the initial restriction violating condition set portion 1 and the restriction violating condition generation portion 4, wherein any restriction violating condition stored in the restriction violating condition storage portion 5 is not satisfied when the start time of a procedure is changed or designated. FIG. 2 shows the theoretical construction of a second aspect of the present invention. The second aspect of the present invention is a scheduling system for designating start times of a plurality of procedures processed by a plurality of resources such as machines, having restriction conditions with respect to available start times, end times, sequence of procedures, and prohibition of simultaneous executions of multiple procedures, the system comprising an initial restriction satisfying condition set portion 6 for initially setting a restriction satisfying condition which is a necessary condition of the restriction conditions, a start time change portion 7 for changing the start time of a procedure whose start time has been designated, a start time designation portion 8 for designating the start time of a procedure whose start time has not been designated a restriction satisfying condition generation portion 9 for substituting start times of a procedure which do not satisfy at least one of the restriction satisfying conditions into a variable of one of the restriction violating conditions and ANDing the conditions so as to generate a new restriction satisfying condition, the start times being changed and designated by the start time change portion 7 and the start time designation portion 8, respectively, and a restriction satisfying condition storage portion 10 for storing restriction satisfying conditions generated by the initial restriction satisfying condition set portion 6 and the restriction satisfying condition generation portion 9, wherein the start time of a procedure is changed or designated such that none of the restriction violating conditions stored in said restriction violating condition storage portion 5 are satisfied. Next, the operation of the theoretical construction of the first aspect of the present invention (FIG. 1) will be described. As described above, the first aspect of the present invention is a scheduling system for designating start times of a plurality of procedures processed by a plurality of resources such as machines, having restriction conditions with respect to available start times, end times, sequence of procedures, and prohibition of simultaneous executions of multiple procedures. The initial restriction violating condition set portion 1 negates the received restriction conditions so as to set an initial restriction violating condition. Thereafter, the initial restriction violating condition set portion 1 stores the initial restriction violating condition in the restriction violating condition storage portion 5. The initial restriction violating condition set portion 1 searches for a restriction violating condition which is satisfied from amongst the conditions in the restriction violating condition storage portion 5. When there is a restriction violating condition which is satisfied, the start time change portion 2 is activated. The start time change portion changes the start times of the procedures so that none of the restriction violating conditions are satisfied. When there is no start time which leaves all the restriction violating conditions unsatisfied, the restriction violating condition generation portion 4 is activated. The restriction violating condition generation portion 4 ANDs the restriction violating conditions which are satisfied so as to generates a new restriction violating condition and stores it in the restriction violating condition storage portion 5. When the start times of the procedures can be changed so that they satisfy none of the restriction violating condition and there is no procedure whose start time has not been designated, the scheduling is successful. Thus, a schedule which satisfies the given conditions is obtained. When there is a procedure whose start time has not been designated, the start time designation portion 3 is activated. The start time designation portion 3 designates a start time of the procedure which does not satisfy all the restriction violating conditions. When a start time which does not satisfy all the restriction violating conditions can be designated and there is no procedure whose start time has not been designated, the scheduling is successful. When a start time of the procedure which does not satisfy all the restriction violating conditions cannot be designated, the restriction violating condition generation portion 4 is activated. The restriction violating condition generation portion 4 ANDs the restriction violating conditions which are satisfied so as to generate a new restriction violating condition and stores it in the restriction violating condition storage portion 5. After the new restriction violating condition is stored in the restriction violating condition storage portion 5, the start time change portion 2 and the start time designation portion 3 are activated. At this point, if there is no variable of a start time to be changed or designated, the scheduling is unsuccessful. As described above, when a restriction violating condition is generated, it becomes a sufficient condition for the violation of the given restrictions. When any start time of a procedure satisfies at least one of the restriction violating conditions, values are substituted into the variable of the relevant procedure so as to generate a new restriction violating condition. Thus, the procedures whose start times need to be changed are limited and the range of the start times is narrowed. Moreover, by ANDing two or more inequalities, the sufficient condition of a restriction violation due to the relation of two or more jobs can be expressed. Next, the operation of the theoretical construction of the second aspect (FIG. 2) of the present invention will be described. First, the initial restriction satisfying condition set portion 6 sets an initial restriction satisfying condition which is a necessary condition for the satisfaction of the given restriction conditions and stores it in the restriction satisfying condition storage portion 10. Next, the initial restriction satisfying condition set portion 6 searches the restriction satisfying conditions stored in the restriction satisfying condition storage portion 10. When there is a restriction satisfying condition which is not satisfied, the start time change portion 7 is activated. The start time change portion 7 changes the start times of the procedures so that all the restriction satisfying conditions are satisfied. When there is no start time which satisfies all the restriction satisfying conditions, the restriction satisfying condition generation portion 9 is activated. The restriction satisfying condition generation portion 9 ANDs the restriction satisfying conditions which are not satisfied so as to generate a new restriction satisfying condition and stores it in the restriction satisfying condition storage portion 10. The start time change portion 7 changes the start times of the procedures so that all the restriction satisfying conditions are satisfied. When there is no procedure whose start time has not been designated, the scheduling is successful. Thus, a schedule which satisfies the given conditions is obtained. When there is a procedure whose start time has not been designated, the start time designation portion 8 is activated. The start time designation portion 8 designates a start time of the procedure which satisfies all the restriction satisfying conditions. When a start time of the procedure which satisfies all the restriction satisfying conditions can be designated and there is no procedure whose start time has not been designated, the scheduling is successful. When a start time of the procedure which satisfies all the restriction satisfying conditions cannot be designated, the restriction satisfying condition generation portion 9 is activated. The restriction satisfying condition generation portion 9 ANDs the restriction satisfying conditions which are satisfied so as to generate a new restriction satisfying condition and stores it in the restriction satisfying condition storage portion 10. After the new restriction satisfying condition is stored in the restriction satisfying condition storage portion 10, the start time change portion 7 and the start time designation portion 8 are activated. When there is no variable of a start time to be changed or designated, the scheduling is unsuccessful. As described above, when a restriction satisfying condition is generated, it becomes a necessary condition for the satisfaction of restrictions for a schedule which satisfies the given restriction conditions. When any start time of a procedure does not satisfy at least one of restriction satisfying conditions, values are substituted into the variable of the relevant procedure so as to generate a new restriction satisfying condition. Thus, the procedures whose start times should be changed are limited and the range of the start times is narrowed. Moreover, by ANDing two or more inequalities, a necessary condition for preventing a restriction violation due to the relation of two or more jobs can be expressed. In the theoretical construction of the first aspect (FIG. 1) of the present invention, when the available start time and the end time of each procedure contained in the restriction violating conditions are variables, by changing the values of the variables whose values have already been changed, a restriction violating condition which was generated before changes of the available start time and the end time can be used as it is. In the theoretical construction of the first aspect (FIG. 1) of the present invention, when the value of a variable representing the available start time or the end time is updated to a stricter value whenever one schedule is obtained and a restriction condition containing only a variable representing the available start time and the end time is generated due to unsuccessful scheduling, an available start time or an end time at which a restriction violation always takes place is expressed, thereby obtaining an optimum schedule such as a schedule with a minimum total process time period. In the theoretical construction of the second aspect (FIG. 2) of the present invention, when the available start time and the end time of each procedure contained in restriction satisfying conditions are variables, by changing the values of the variables whose values were changed, a restriction satisfying condition which was generated before changes of the available start time and the end time can be validated. In the theoretical construction of the first aspect (FIG. 1) of the present invention, when the value of a variable representing the available start time or the end time is updated to a stricter value whenever one schedule is obtained and a restriction satisfying condition containing only a variable representing the available start time and the end time is generated due to unsuccessful scheduling, an available start time or an end time of a scheduling which satisfies the restrictions is expressed, thereby obtaining an optimum schedule such as a schedule with a minimum total process time period. FIG. 3 is a block diagram showing the system configuration of an embodiment according to the present invention. The embodiment has the theoretical construction shown in FIG. 1. The embodiment can be constructed of a computer system 300 which comprises a CPU 310, an I/O interface 320, a main memory 330, an input/output unit 340, and a storage unit 350. In addition, the theoretical construction shown in FIG. 2 can be accomplished with a system construction similar to the computer system 300. The main memory 330 stores software relating to an initial restriction violating condition set portion 331, a variable value change portion 332, a variable value designation portion 333, and a restriction violating condition generation portion 334 corresponding to the portions of the theoretical construction shown in FIG. 1. The CPU 310 executes a scheduling process according to the software. The storage unit 350 has a restriction violating condition storage portion 351 which stores restriction violating conditions generated by the initial restriction violating condition set portion 331 and the restriction violating condition generation portion 334. The restriction violating condition storage portion 351 may be disposed in the main memory 330. Next, with reference to an operational flow chart of FIG. 4, the system operation will be described. The user who wants to solve a job shop scheduling problem will input, via the input/output unit 340, restriction conditions as a problem. After he inputs the restriction conditions, the CPU 310 activates the initial restriction violating condition set portion 331. Thus, the initial restriction violating condition set portion 331 generates restriction violating conditions by using all the restriction conditions that it received and stores them in the restriction violating condition storage portion 351 (at step S1). Next, the CPU 310 generates an initial schedule (at step S2). An initial schedule satisfies the restriction conditions being received. However, it is uncertain whether or not the initial schedule is optimum. This initial schedule can be obtained by the so called Giffler-Thompson technique or the like (refer to "Integer Programming Method and Optimum Combination", published by Nihon Kagaku Rengo, 1982, pp 291). In this embodiment, the CPU 310 executes a scheduling process according to the initial schedule and the initial restriction violating conditions. The initial restriction violating condition set portion 331 searches for a restriction violating condition from amongst the restriction violating condition storage portion 351 and determines whether or not it is satisfied (at step S3). A restriction violating condition is abbreviated as NJ. When there is a satisfied restriction violating condition NJ (namely, the determined result at step S3 is YES), the CPU 310 activates the variable value change portion 332. The variable value change portion 332 changes the start time of each procedure on the schedule so that all the restriction violating conditions are unsatisfied (at step S4). Next, the CPU 310 determines whether or not there is a start time which does not satisfy any of the restriction violating conditions (at step S5). When such a start time is not present (namely, any change of the start time satisfies at least one of the restriction violating conditions) (the determined result at step S5 is YES), the CPU 310 activates the restriction violating condition generation portion 334 (at steps 9 and 10). This process will be described later in detail. On the other hand, when there is a start time which does not satisfy any of the restriction violating conditions in the start time change process (S4) (namely, the determined result at step S5 is NO), the CPU 310 determines whether or not there is a procedure whose start time has not been designated (at step S6). When there is no procedure whose start time has not been designated (namely, the determined result at step S6 is NO), the start times of all the procedures, which start times satisfy none of the restriction violating conditions, have been designated. At this point, since the scheduling is successful, the CPU 310 completes the process. On the other hand, when there is a procedure whose start time has not been designated (namely, the determined result at step S6 is YES), the CPU 310 activates the variable value designation portion 333. The variable value designation portion 333 designates the start time which has not already been designated so that it does not satisfy the restriction violating conditions (at step S7). Thereafter, the CPU 310 determines whether or not such a start time has been designated at step S5. When a variable value which does not satisfy the restriction violating conditions cannot be designated in the start time change process S4 and the start time designation process S5 (namely, the determined result at step S5 is YES), the CPU 310 activates the restriction violating condition generation portion 334. The restriction violating condition generation portion 334 ANDs restriction violating conditions which are satisfied in the start time change process S4 or the start time designation process S5 so as to generate a new restriction violating condition (at step S8). The CPU 310 determines whether or not a variable is still present in the left hand side of this restriction violating condition (at step S9). When there is no variable in the left hand side (namely, the determined result at step S9 is NO), the CPU 310 does not continue the scheduling process. Thus, the schedule is unsuccessful. On the other hand, when there is still a variable (namely, the determined result at step 9 is YES), the restriction violating condition generation portion 334 stores the restriction violating condition in the restriction violating condition storage portion 351. Then, the CPU 310 repeats the scheduling process at step S4. With the above processes, the CPU 310 executes the scheduling process so as to generate an optimum schedule. Next, by using a real job shop scheduling problem, the scheduling system according to the embodiment will be described. Now a job scheduling problem with respect to three jobs and two machines is assumed. This problem is small and used to explain the flow of processes of the embodiment. FIGS. 5A to 7B show the content of the problem. Hereinafter, this problem is referred to as the problem 1. An optimum schedule on which two machines each perform three jobs (minimum total process time period) is to be obtained. The jobs are referred to as the jobs 1, 2 and 3. The machines are referred to as machines 1 and 2. First, the job 1 uses for the procedure 1 the machine 1 (since the procedure 1 of the job 1 uses the machine 1, this process is denoted by 111). The job 1 uses for the procedure 2 the machine 2 (122). The process time period of the procedure 1 of the job 1 is 6, whereas the process time period of the procedure 2 of the job 1 is 4. The job 2 uses for the procedure 1 the machine 2 (212). The job 2 uses for the procedure 2 the machine 1 (221). The process time period of the procedure 1 of the job 2 is 4, whereas the process time period of the procedure 2 of the job 2 is 3. The job 3 uses for the procedure 1 the machine 1 (311). The job 3 uses for the procedure 2 the machine 2 (322). The process time period of the procedure 1 of the job 1 is 2, whereas the process time period of the procedure 2 of the job 2 is 5. In addition, one machine cannot execute two or more procedures at the same time. Under these restriction conditions, the start time of each procedure is to be optimally scheduled. In the following description, the start time variable of procedure j (machine k) of job i is denoted by x ijk . First, the CPU 310 activates the initial restriction violating condition set portion 331 (S1). Thus, the initial restriction violating condition set portion 331 generates initial restriction violating conditions according to the conditions in the tables of the problem 1 shown in FIG. 5A. The initial restriction violating conditions of this problem are given in FIG. 5B [1]. The initial restriction violating conditions include conditions with respect to available start times (see FIG. 5B [1] (a)), end times (see FIG. 5B [1] (b)), sequence of procedures (see FIG. 5B [1] (c)), and prohibition of simultaneous executions of multiple procedures by same machine (see FIG. 5B [1] (d)). With respect to the available start times, for example the processes 111, 212, and 311 can be started after time 0. By negating these conditions, x 111 <0, x 212 <0, x 311 <0 are obtained as restriction violating conditions. In addition, since the procedure 2 of each job cannot be started unless the procedure 1 of each job has been completed, the process 122 can only be started after the process time period 6 of the procedure 1 elapsed. Thus, by negating this condition, x 122 <6 is obtained as a restriction violating condition. Likewise, a restriction violating condition with respect to the available start time of each job is set (see FIG. 5B [1] (a)). With respect to end times, variable E is used. The end time E of the job 1 should occur after the procedure 1 and the procedure 2. Thus, the end time should occur at or after time 10 where the process time 6 of the procedure 1 and the process time 4 of the procedure 2 are added. Thus, by negating this condition, x 111 +10>E is generated as a restriction violating condition. Likewise, with respect to the end time, an initial restriction violating condition of each procedure of each job can be set (see FIG. 5B [1] (b)). With respect to sequence of procedures, the procedure 2 of the job 1 cannot be started unless the procedure 1 of the job 1 has been completed. Thus, the procedure 2 of the job 1 can only be started at or after the time where the start time of the procedure 1, x 111 , and the process time 6 are added. By negating this condition, x 111 +6>x 122 is obtained as a restriction violating condition. Likewise, with respect to sequence of procedures, restriction violating conditions can be set (see FIG. 5B [1] (c)). Last, with respect to prohibition of simultaneous executions of multiple procedures by the same machine, restriction conditions are given. For example, while the process 111 is being executed (namely, x 111 <t<x 111 +6, where t=time), the process 221 which is processed by the same machine cannot be executed. Thus, x 111 +6≦x 221 is obtained as restriction condition (1). Alternatively, while the process 221 is being executed, the process 111 cannot be executed. Thus, x 221 +3≦x 111 is obtained as restriction condition (2). By using the restriction condition 1 OR 2, x 111 +6>x 221 AND x 221 +3>x 111 is obtained as a restriction violating condition. Likewise, for all procedures executed by the same machine (the processes 111 and 311 executed by the machine 1, the processes 311 and 221 executed by the machine 1, the processes 122 and 212 executed by the machine 2, the processes 122 and 322 executed by the machine 2, and the processes 212 and 322 executed by the machine 2), with respect to prohibition of simultaneous executions, initial restriction violating conditions are obtained (see FIG. 5B [1] (d)). After the above initial restriction violating conditions are set, the CPU 310 starts the scheduling process according to an initial schedule (see FIG. 8 1) (at step S2 of FIG. 4). The initial schedule is a schedule which satisfies the restriction violating conditions which has been set. On this initial schedule, the end time E is 15. In the scheduling process, each procedure is executed with an earlier end time (for example E=14). First, according to the initial schedule (see FIG. 8 1), the restriction violating condition generation portion 334 searches for initial restriction violating conditions which are satisfied (at step 3 of FIG. 4). For example, the restriction condition x 111 +10>E, relating to the end time, is not satisfied since x 111 =0 and E=14. By repeating the scheduling process, it is found that X 322 +5>E is satisfied (this is because x 322 =10 and E=14) (see FIG. 6A [2] (1)). Next, the CPU 310 activates the start time change portion 332 at step S4. Thus, the variable value change portion 332 successively changes the start time of each procedure contained in a restriction violating condition which is satisfied. Thus, when x 322 =0 to 1, x 322 <2 is satisfied as a restriction violating condition with respect to an available start time. When x 322 =2 to 7, they satisfy x 311 +2>x 322 (this is because x 311 =6). When x 322 =8 to 9, they satisfy x 122 +4>x 322 AND x 322 +5>x 122 (this is because x 122 =6). When x 322 =10 or more, they satisfy x 322 +5>E (see FIG. 6A [2] (1)). Thus, it is found that all start times are prohibited by the process at step S5 of FIG. 4 (namely, the determined result is YES). Next, the CPU 310 activates the initial restriction violating condition generation portion 334. Thus, the initial restriction violating condition generation portion 334 newly generates a restriction violating condition (at step S8). In other words, the restriction violating condition generation portion 334 substitutes each start time into x 322 of restriction violating conditions which are satisfied and ANDs them. For example, by substituting x 322 =2 to 7 into x 311 +2>x 322 (x 311 +2>2, x 311 +2>3, . . . , x 311 +2>7) and ANDing them, x 311 >5 is obtained. By repeating the same process for each of the remaining expressions which are satisfied (namely, x 122 +4>x 322 AND x 322 +5>x 122 , x 322 +5>E), x 122 >5 AND x 122 <13 and 15>E are obtained. Next, by ANDing these expressions, a new restriction violating condition is obtained (see the underlined expression of FIG. 6A [2] (1)). Since the left hand side of the new restriction violating condition contains a variable (namely, the determined result at step S9 is YES), the restriction violating condition generation portion 334 stores the restriction violating condition in the restriction violating condition storage portion 351 (at step S10). With these processes, this new restriction violating condition has been newly added to the initial restriction violating conditions. Next, the CPU 310 repeats the above processes (at steps S4 to S10). At step S4, there are various methods for selecting a start time variable to change. In this example, the variable value change portion 332 changes the last variable of the last restriction violating condition. In other words, the variable value change portion 332 changes the variable x 122 (see FIG. 6B [2] (2)). In this process, when the start time is changed (namely, the determined result at step S5 is YES), a restriction violating condition is satisfied. Thus, the restriction violating condition generation portion 334 generates a new restriction violating condition which is underlined in FIG. 6B [2] (2) (at step S8). Next, the variable value change portion 332 changes the value of the variable x 311 (see FIG. 6B [2] (3)). In this case, when the start time x 311 is changed (namely, the determined result at step S5 is YES), the restriction violating condition is satisfied. Thus, the restriction violating condition generation portion 334 generates a new restriction violating condition which is underlined in FIG. 6B [2] (3) (at step S8). Next, the variable value change portion 332 changes the value of the variable x 111 . When x 111 =2, no restriction violating condition is satisfied (namely, the determined result at step S5 is NO) (see FIG. 6B [2] (4)). Since there is a procedure whose start time has not been designated (namely, the determined result at step S6 is YES), the CPU 310 activates the variable value designation portion 333. Thus, the variable value designation portion 333 executes the start time designation process (at step S7). In the start time designation process (at step S7), the variable value designation portion 333 designates the value of x 311 of the restriction violating condition generated in FIG. 6B [2] (2). The value of the variable x 311 which does not satisfy any of the restriction violating conditions is zero (namely, x 311 =0) (see FIG. 6B [2] (5)). Likewise, the variable value designation portion 333 designates the value of the variable x 122 . Thus, x 122 =8 is obtained (see FIG. 6B [2] (6)). Next, the variable value designation portion 333 designates the value of the variable x 322 . However, any value of the variable x 322 satisfies at least one of restriction violating conditions (namely, the determined result at step S5 is NO). Thus, the restriction violating condition generation portion 334 generates a new restriction violating condition which is underlined in FIG. 6C [2] (7) (at step S8). Then, the restriction violating condition generation portion 334 stores this restriction violating condition in the restriction violating condition storage portion 351. Thereafter, the CPU 310 returns to the start time change process S4. First, the variable value change portion 332 changes the value of the variable x 122 (at step S4). When x 122 =9 or 10, none of the restriction violating conditions are satisfied. Thus, the variable value change portion 332 designates x 122 =9 (FIG. 7A [2] (8)) so as to designate a start time which has not been already designated (at step S7). Thereby, x 221 =8, x 212 =0, and x 322 =4 are obtained. With the above processes, since all the start times of all the procedures have been designated (namely, the determined result at step S6 is NO), the scheduling is successful (see FIG. 7A [2] (9)). FIG. 8 (2) shows the obtained schedule where E=13. To obtain an optimum schedule, the variable value designation portion 333 designates E=12 and executes the process of step S3. In this process, since x 122 +4>E is obtained, the variable value change portion 332 changes the start time of the variable x 122 (at step S4). Any value of the variable satisfies at least one of the restriction violating conditions. Thus, the restriction violating condition generation portion 334 generates a new restriction violating condition which is underlined in FIG. 7A [2] (10) at step S8. Thereafter, the restriction violating condition generation portion 334 stores this restriction violating condition in the restriction violating condition storage portion 351. Next, the CPU 310 activates the variable value change portion 332. Thus, the variable value change portion 332 executes the start time change process for the variable x 111 . In this case, any value of the variable satisfies at least one of the restriction violating conditions. Thus, the restriction violating condition generation portion 334 generates a new restriction violating condition which is underlined in FIG. 7B [2] (11) at step S8 and stores this restriction violating condition in the restriction violating condition storage portion 351. Next, the CPU 310 activates the variable value change portion 332. The variable value change portion 332 executes the start time change process for the variable x 212 (at step S4). In this case, any value of the variable satisfies at least one of the restriction violating conditions. Thus, the restriction violating condition generation portion 334 generates a new restriction violating condition which is underlined in FIG. 7B [2] (12) at step 8. Thus, there is no variable on the left hand side of this restriction violating condition (namely, the determined result at step S9 is NO). Therefore, the scheduling is unsuccessful. As a result, the preceding schedule (FIG. 8 2) becomes an optimum schedule. As a result, the total process time period is 13. As described above, the value of a variable which does not satisfy any restriction violating condition can be designated. When this value cannot be designated, a new restriction violating condition is generated. By adding this condition, the variable value set process is repeated. Thus, a schedule which satisfies any restriction condition can be obtained. In addition, for a schedule which has been obtained, by repeating the process with stricter end times, an optimum schedule can be obtained. In the above-described problem [problem 1], for simplicity, a minimum number of jobs and procedures was used. Next, with reference to FIGS. 9A to 13C, a problem with an intermediate scale will be described. This problem is the same as that described in "Job Shop Scheduling Problem, Integer Programming Method and Optimum Combination", published by Nihon Kagaku Rengo, 1982, pp 289. This problem is referred to as the problem 2. Likewise, in the problem 2, by using restriction violating conditions, an optimum schedule is obtained. In the following description, variable x ijk represents the start time of procedure j (processed by machine k) of job i; variable l i represents the process time period of procedure i. In the problem 2, an optimum schedule which minimizes the total process time period with respect to four jobs, three machines, and three procedures should be obtained. As shown in FIG. 9A, machines used for each procedure of each job and their process time periods are given as conditions. As in the above-described problem 1, the same machine cannot execute two or more procedures at the same time. First, the initial restriction violating condition set portion 331 obtains initial restriction violating conditions according to the above-mentioned conditions (at step S1) and stores them in the restriction violating condition storage portion 351 (see FIG. 9B [1]). Next, the CPU 310 generates an initial schedule which satisfies the above conditions (at step S2). According to the initial schedule, the CPU 310 starts the scheduling process (using the initial schedule shown in FIG. 14). On the initial schedule, since the end time E=43, the CPU 310 starts the process with a stricter end time E=42. The restriction violating condition generation portion 334 searches for a restriction violating condition which is satisfied (at step S3). The CPU 310 activates the variable value change portion 332. Thus, the variable value change portion 332 executes the start time change process for a variable contained in the restriction violating condition (at step S4) (see FIG. 10A [2] (1)). However, since a value of the variable which does not satisfy any of the restriction violating conditions is not possible, the CPU 310 activates the restriction violating condition generation portion 334 (at step S8). Thus, the restriction violating condition generation portion 334 generates the condition which is underlined in FIG. 10A [2] (1) and stores the condition in the restriction violating condition storage portion 351. Next, the CPU 310 activates the variable value designation portion 333. Thus, the variable value designation portion 333 designates value for a variable whose start time has not been designated (at step S7) (see FIG. 10B [2] (2) to FIG. 10C (6)). At this point, if a value of the variable which does not satisfy any of the restriction violating conditions is not present, the restriction violating condition generation portion 334 generates a new restriction violating condition (at step S8). Thereafter, the restriction violating condition generation portion 334 stores this condition in the restriction violating condition storage portion 351 (at step S10). In this process, the variable value designation portion 333 can designate a start time which does not satisfy any of the restriction violating conditions and obtain a new schedule shown in FIG. 15. Since the end time E of this schedule is 40 (E=40), the CPU 310 repeats the scheduling process with E=39 (see FIG. 11A [2] (7) to FIG. 11D [2] (14)). First, the initial restriction violating condition set portion 331 searches for a restriction violating condition which is satisfied (at step S3). Then, the variable value change portion 332 changes the value of the variable contained in the restriction violating condition (at step S4). Thereafter, the variable value designation portion 333 designates the value of another variable (at step S7). When any restriction violating condition is satisfied, the restriction violating condition generation portion 334 generates a new restriction violating condition (at step S8). Thereafter, the CPU 310 repeats the scheduling process at step S4. With the above processes (see FIG. 11A [2] (7) to FIG. 11D [2] (14)), the variable value designation portion 333 can designate the start times of all the procedures and generates a new schedule shown in FIG. 16. The CPU 310 designates E=33 which is stricter than E=34 and repeats the scheduling process (see FIG. 12A [2] (15) to FIG. 12B [2] (18)). Thus, the CPU 310 obtains a new schedule shown in FIG. 17. The CPU 310 designates E=31 which is stricter than E=32 and repeats the scheduling process (see FIG. 12B [2] (19) to (21) and FIG. 13A [2] (22) to FIG. 13C [2] (29)). When a new restriction violating condition is generated, the left hand side thereof may not have a variable (32>E of FIG. 13A [2] (24) to FIG. 13C [2] (29)). Thus, since the determined result at step S9 is NO, the scheduling becomes unsuccessful. With the above processes, the schedule obtained just before the scheduling was unsuccessful (namely, the schedule shown in FIG. 17) becomes the optimum schedule. Thus, the total process time period is 32. fixed phrase Although the present invention has been shown and described with respect to a best mode embodiment thereof, it should be understood by those skilled in the art that the foregoing and various other changes, omissions, and additions in the form and detail thereof may be made therein without departing from the spirit and scope of the present invention. Since a restriction violating condition is generated in which a variable corresponding to the start time of a procedure is changed to an value, the number of procedures whose start times should be changed can be limited. In addition, the range of the start times of these procedures can be also narrowed. Moreover, by ANDing two or more inequalities, the sufficient condition for a restriction violation due to the relation of two or more jobs can be expressed. As a result, worthless searches can be omitted and the scheduling can be effectively executed. It should be noted that the effect of the present invention can be obtained when restriction satisfying condition are used.