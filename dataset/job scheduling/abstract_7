Password: This paper proposes two models for predicting the completion time of jobs in a service Grid. The single service model predicts the completion time of a job in a Grid that provides only one type of service. The multiple services model predicts the completion time of a job that runs in a Grid which offers multiple types of services. We have developed two algorithms that use the predictive models to schedule jobs at both system level and application level. In application-level scheduling, genetic algorithms are used to minimize the average completion time of jobs through optimal job allocation on each node. The experimental results have shown that the scheduling system using the adaptive scheduling algorithms can allocate service jobs efficiently and effectively. Keywords Service Grid ; Adaptive job scheduling ; Prediction ; Genetic algorithms 1. Introduction Intelligence will be a key feature in the next generation of Grid computing. An intelligent Grid environment will contain more intelligent functions for resource management, security, Grid service marketing, collaboration and so on [20]  and  [21] . These functions will make the Grid environment more efficient, secure, economic in using resources, intelligent and easy to use. Intelligent resource management is a core component in the intelligent Grid environment. Grid resource management provides functionality for discovery and publishing of resources as well as scheduling, submission and monitoring of jobs. Most functions are standardized in the Grid middleware Globus toolkit. One exception is job scheduling, a key element in resource management that needs more sophisticated implementations because of the heterogeneity of the Grid nodes. One interesting implementation method is to build job scheduling services on top of Grid middleware to meet the requirements of specific applications [14] . Effective job scheduling in Grid requires to model the available resources on Grid nodes and computation requests of jobs, determine the current load of the system, and predict the job execution time. Job scheduling in parallel and cluster computing is focussed on estimating the system load from experience with a performance model [19] . Their goals are to achieve best performance and load balancing across the entire system. When applied to Grid environments those methods often result in poor performance due to the heterogeneity of Grid resources. Grid job scheduling focuses on the job execution time because of the open, dynamic Grid environment [17] . The jobs arrive at a Grid in various load and types. For example, in a given time slot, the Grid may need to schedule a single task, multiple independent tasks, or a collaborative task. Facing varying situations intelligent Grid environments need different scheduling policies and algorithms to handle different kinds of tasks [14] . Heuristic scheduling algorithms are often used in heterogenous computing environments. These algorithms use historical data of execution time and system load, and explicit constraints to schedule jobs [1] , [7]  and  [13] . However, in dynamic Grid environments the execution time and workload cannot be determined in advance. Therefore, Grid scheduling needs predictive models. In this paper, we propose two models for predicting the completion time of jobs in a Grid. The models are designed for a service Grid focussing on business intelligence services that often involve a lot of data and many complex algorithms. The service Grid provides an economic platform for business intelligence services. Predicting the completion time of a coming job is based on the historical execution data of past jobs and the number of jobs running on the Grid nodes. An adaptive system-level job scheduling algorithm is developed to schedule a single job to the node that shall use the shortest time to execute the job. For task farming, an adaptive application-level scheduling algorithm is used to minimize the average completion time of all jobs through an optimal allocation of jobs on each node in the service Grid. Genetic algorithms are applied to solve the job scheduling problem in task framing. The experimental results have shown that the scheduling system using the adaptive scheduling algorithms can allocate service jobs efficiently and effectively. The paper is organized as follows. Related work is reviewed in Section 2 . In Section 3 , a unified resource scheduling framework of a service Grid is described and three resource scheduling policies are discussed. In Section 4 , the adaptive system-level and application-level scheduling algorithms are discussed in details. Some simulation experiments are presented in Section 5 . Finally, we draw some conclusions in Section 6 . 2. Related work Krauter et al. surveyed a few existing Grid resource management systems in [14] . They analyzed the current systems based on a classification of development organization, system status, scheduling and rescheduling policies. However, the characteristics and differences of current Grid job scheduling algorithms were not discussed in detail. An adaptive scheduling strategy and its corresponding algorithm were investigated in the two well known AppLes and GrADS projects [3]  and  [11] . The strategy separates the application-oriented module from the common module. Jobs are scheduled by the user-defined performance model, which is a shortcoming while the advantage is that the search space is reduced [11] . The NetSolve project [5] uses different scheduling algorithms for different applications. The completion time of a job is estimated by an experiential performance model and a load model. A dynamic job queue is used for task farming. The queue length can adaptively be adjusted from the average request response time of history statistics. This adaptive scheduling algorithm is regarded as a system-level approach [6] . In addition, a system framework to schedule multi-step, data-dependent jobs is given in [2] . The Condor [17] system uses the Classad language to describe machine states, job constrains and job requirements. The Matchmaking algorithm [16] is used for job scheduling in the centralized scheduling system [18] . The extended version of Classad is used to support parallel jobs and mapping between jobs and resources with the experiential performance model [15] . Buyya et al. [4] proposed an economics model for Grid resource management and scheduling, using marketing concepts such as commodity market, posted price modelling, bargaining modelling, contract net modelling, auction modelling and others. Two scheduling algorithms for time-optimization and cost-optimization were designed in the Nimrod system. The Legion system uses three object-oriented middleware components, Enactor, Scheduler and Collection, for resource management [8] . Different from Legion, the Globus project uses a layered architecture in resource management [12] . Integrated with Web services, Globus can easily solve the cross-operation problems of heterogenous platforms. Also, by means of well developed generic services, such as GRIS, GIIS and GRAM, it becomes very easy to describe, discover and publish resource information in Globus [10]  and  [12] . What needed is the high-level scheduling policies and algorithms for different systems like Nimrod/G, AppLes, Condor-G and Ninf-G. Table 1 summarizes the major features of current Grid job scheduling systems.