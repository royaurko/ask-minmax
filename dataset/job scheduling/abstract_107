Password: Flexibility, speed, and efficiency are major challenges for operations managers in today's knowledge-intensive organizations. Such requirements are converted into three production scheduling criteria: (a) minimize the impact of setup times in flexible production lines when moving from one product to another, (b) minimize number of tardy jobs, and (c) minimize overall production time, or makespan, for a given set of products or services. There is a wide range of solution methodologies for such NP-hard scheduling problems. While mathematical programming models provide optimal solutions, they become too complex to model for large scheduling problems. Simultaneously, heuristic approaches are simpler and very often independent of the problem size, but provide “good” rather than optimal solutions. This paper proposes and compares two alternative solutions: 0-1 mixed integer linear programming and genetic programming. It also provides guidelines that can be used by practitioners in the process of selecting the appropriate scheduling methodology. Keywords Dual criteria scheduling ; Sequence dependent setup times ; 0-1 mathematical programming ; Genetic algorithm 1. Introduction Improving scheduling systems for greater customer satisfaction and operations efficiency requires an optimization criterion that incorporates both meeting due times and minimizing the makespan. Simultaneously, the sequence-dependent setup time environment with dual criteria is a very common scheduling problem in both manufacturing and service organizations [1] . This paper deals with a single-server-scheduling problem with dual criteria: minimizing the number of tardy jobs and makespan, while considering the impact of setup times between jobs. Following the three-field notation provided by Pinedo [2] , such a problem is denoted as . This dual criteria problem is an NP-hard problem since its simpler case of the single criterion problem, 1| s jk | C max is an NP-hard problem [2] . Consequently, this scheduling situation provides an appropriate case study for the comparison of mathematical programming and heuristic programming, two viable alternative solution methodologies. In general, mathematical programming models ensure the best possible solution for a given scheduling problem. However, due to the complex nature of the problem, such models can not always be implemented to solve large-scale scheduling problems. On the other hand, heuristic approaches can be used to address combinatorial complexity of NP-hard scheduling problems. The purpose of this paper is to (1) propose two alternative solution methodologies for scheduling problem and (2) compare these two distinct approaches in terms of the appropriateness of each approach under different conditions. The paper is structured as follows: First, a brief literature review of solution methodologies for bi-criteria, sequence-dependent setup times scheduling is provided. Then, a 0-1 mixed integer programming model is formulated to solve such a scheduling problem. In Section 4 , a genetic algorithm (GA) is proposed to solve the same scheduling problem. In Section 5 , we compare two methods and provide guidelines that can be used by practitioners in the process of solving dual criteria scheduling problems with sequence dependent setup times. 2. Literature review Most of the studies dealing with scheduling have been confined to optimization of a single criterion. Many researchers have considered a variety of scheduling problems with a single performance measure such as the average flow time, maximum completion time, or tardiness [3] . Baker and Scudder [4] classified scheduling problems according to the number of due dates, tightness of due dates and types of penalties involved. The distinct due dates problem without inserted idle time was considered by Abdul-Razaq and Potts [5] and Ow and Morton [6] . Abdul-Razaq and Potts [5] proposed a lower bound scheme based on the branch and bound algorithm. Ow and Morton [6] considered a beam search method in which a limited number of solution paths are investigated in parallel. The intent of the search technique is to search quickly with no backtracking. Thus, the optimal solution is not guaranteed by the method. Fry et al. [7] and Yano and Kim [8] presented algorithms for optimal timing of a given sequence. Scheduling decisions frequently involve consideration of more than one criterion [9] , [10] , [11] , [12]  and  [13] . The bi-criteria scheduling problems are generally divided into two classes. In the first class, the problem involves minimizing one criterion subject to the constraint that the other criterion has to be optimized. The pioneering work in this class can be attributed to Smith [14] who considered the single-machine problem with the maximum tardiness as the primary criterion and mean flow time as the secondary criterion. Extensions of Smith's work with the consideration of different primary and secondary criterion have been studied by Heck and Roberts [15] , Emmons [16] , Miyazaki [17] , Bianco and Ricciardelli [18] , Shanthikumar [19] , Chand and Schneeberger [20] , and Chen and Bulfin [21] . The problem considered in this paper belongs to this class. We solved it lexicographically by treating the minimization of the number of tardy jobs as the primary objective, and minimization of the makespan as the secondary objective. In the second class of problems, both criteria are considered equally important and the problem involves finding efficient (non-dominated) schedules. Van Wassenhove and Gelders [22] extended the problem solved by Smith [14] , and developed an algorithm which provides an efficient solution for the criteria of mean flow time and maximum tardiness. Several extensions of the single-machine scheduling problem with the consideration of different criteria have been reported [21] , [23] , [24] , [25] , [26] , [27] , [28]  and  [29] . Since the 1960s, there has been an increasing interest in heuristic techniques, such as simulated annealing, tabu search, and GAs in finding optimal or good solutions to large problems. The term used to refer to such techniques is “evolutionary computation.” The best known algorithms in this class include GAs [30] , evolution strategies [31] , evolutionary programming [32] , and genetic programming [33] . GA has demonstrated their potential for solving difficult intractable optimization problems. GA is proven to be efficient and adaptive even for complex constrained optimization problems. Thus GAs may well be suitable to handle the complexity of multi-criteria scheduling problems [13]  and  [34] . Other works in this area include Lee and Choi [35] who considered a job-scheduling problem with distinct due dates in a single machine and Liu and Tang [36] who proposed a modified GA for the single machine-scheduling problem with ready times. Portman et al. [37] discussed optimal methods for solving k-stage hybrid flowshop scheduling problems and Figielska [38] considered the problem of scheduling preemptive jobs on unrelated parallel machines. The general conceptual design of the GA that we propose in this paper is based on the guidelines provided by Houpt and Houpt [39] . Specific details, such as, incorporating setups, designing crossover operator, and retaining the best solution using “elitism” are based on the work of Rubin and Ragatz [40] , Poon and Carter [41] , Murata et al. [11] , and Neppalli et al. [42] . As noted above, there is a wide range of solution methodologies for solving NP-hard scheduling problems. Recently, there has been an increased interest in comparing the performance of such methodologies under particular scheduling constraints [43] , [44] , [45] , [46] , [47]  and  [48] . For large and complex scheduling problems, GAs are found to provide optimal or near optimal solutions in a reasonable amount of time [49] . Simultaneously, it is observed that GAs perform less efficiently than integer programming for small to medium sized problems [50] . Continuing this stream of research, we compare our proposed optimal and heuristic solutions with respect to ease of use and quality of the solution.