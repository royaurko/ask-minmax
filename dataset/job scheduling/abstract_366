Volume 1162 of the series Lecture Notes in Computer Science pp 140-154 Date: 15 June 2005 Managing checkpoints for parallel programs Jim Pruyne Affiliated with Department of Computer Sciences, University of Wisconsin-Madison , Miron Livny Affiliated with Department of Computer Sciences, University of Wisconsin-Madison Checkpointing is a valuable tool for any scheduling system to have. With the ability to checkpoint, schedulers are not locked into a single allocation of resources to jobs, but instead can stop running jobs, and reallocate resources with out sacrificing any completed computations. Checkpointing techniques are not new, but they have not been widely available on parallel platforms. We have implemented CoCheck, a system for checkpointing message passing parallel programs. Parallel programs tend to be large in terms of their aggregate memory utilization, so the size of their checkpoint is also large. Because of this, checkpoints must be handled carefully to avoid overloading the system when check-points take place. Today 's distributed file systems do not handle this situation well. We therefore propose the use of checkpoint servers which are specifically designed to move checkpoints from the checkpointing process, across the interconnection network, and on to stable storage. A scheduling system can utilize numerous checkpoint servers in any configuration in order to provide good checkpointing performance.