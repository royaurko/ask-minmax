The problem of scheduling periodic jobs in hard real-time systems that support imprecise computations is discussed. Timing faults are avoided in such systems by making available intermediate, imprecise results of acceptable quality when results of the desired quality cannot be produced on time. Two workload models of imprecise computations are presented. These models differ from traditional models in that a task may be terminated any time after it has produced an acceptable result. Each task is logically decomposed into a mandatory part followed by an optional part. In a feasible schedule, the mandatory part of every task is completed before the deadline of the task. The optional part refines the result produced by the mandatory part to reduce the error in the result