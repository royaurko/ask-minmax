Password: This paper suggests a hybrid resource management approach for efficient parallel distributed computing on the Grid. It operates on both application and system levels, combining user-level job scheduling with dynamic workload balancing algorithm that automatically adapts a parallel application to the heterogeneous resources, based on the actual resource parameters and estimated requirements of the application. The hybrid environment and the algorithm for automated load balancing are described, the influence of resource heterogeneity level is measured, and the speedup achieved with this technique is demonstrated for different types of applications and resources. Keywords Dynamic load balancing ; Resource management ; User-level scheduling ; High-performance computing ; Grid ; Heterogeneous resources ; Parallel distributed application 1. Introduction and motivation Among the most prominent and as yet unsolved problems of Grid performance and usability are efficient resource management at the application and system levels, and optimization of the workload allocation for parallel and distributed applications on highly diverse and dynamically changing resources. One of the priority considerations in distributed parallel computing research is the adaptation of parallel programs previously developed for homogeneous computer clusters to the dynamic and heterogeneous Grid resources with minimal intrusion into the code. Another issue is enabling “smart” selection of the resources most appropriate to the given parallel program. Earlier we proposed an approach to tackle these problems by introducing a mechanism for dynamic load balancing of black-box applications with resource selection  [1] . In the present paper this approach is developed further by introducing user-level scheduling. A great number of algorithms, approaches and tools have been developed to bring Grid resource management and job scheduling issues to a more advanced level of efficiency and usability (see for instance  [6] , [7] , [8] , [9] , [10] , [11] , [12] , [13] , [14]  and  [15] ), but in a seemingly successful research field teeming with various solutions at hand, when things come to practice it turns out to be impossible to find a tool/library for automatic load balancing of a parallel distributed application according to its individual requirements on heterogeneous resources. The stumbling-block is that these application requirements are not known beforehand in most real-life complex applications, as they might differ in each new computational experiment depending on initial conditions, numerical schemes chosen, computational parameters, etc. The benchmarking and performance assessment of the Virtual Reactor application showed that even within one solver different trends can exist in the application requirements and parallel efficiency, depending on the problem type and computational parameters [4]  and  [5] . A countless number of parallel applications have been developed for traditional parallel systems. Porting such applications from homogeneous computing environments to dynamic heterogeneous resources poses a challenge to keep up a high level of application efficiency. An adequate workload optimization method should take into account two aspects: (1) The application characteristics , such as the amount of data transferred between the processes, application communication structure, amount of floating point operations, memory requirements, hard disk or other I/O activity, etc. (2) The resource characteristics , like computational power and memory of the worker nodes, network links bandwidth, disk I/O speed, and the level of heterogeneity of the resources randomly assigned to the application by the Grid resource broker. The method should be (a) self-adapting and flexible with respect to the type of application, (b) computationally inexpensive not to induce a large overhead on the application performance, and (c) should not require significant modifications in the code. On top of that, the load balancing shall be (d) dynamic and fully automated since the complexity of Grid environment should be hidden from end-users. Generally studies on load balancing consider distribution of processes to computational resources on the system/library level with no modifications in the application code  [16]  and  [17] . Less often, load balancing code is included into the application source-code to improve performance in specific cases  [18]  and  [19] . Some research projects concern load balancing techniques that use source code transformations to speedup the execution of the application  [20] . Traditionally there are two approaches to workload balancing of parallel applications: (1) to carefully calculate the distribution of the workload, taking into account all the properties of the environment and application — a time and resource consuming task requiring expert knowledge of the application structure and algorithms used; and (2) distribute the workload in a straight forward way, at best considering only the processing power of the worker nodes — a fast but not very efficient way in terms of parallel performance. We propose an intermediate approach that iteratively refines the workload distribution  [5] . In the integrated system proposed here a hybrid approach is employed, where the balancing decision is taken in interaction of the application with the execution environment. The paper is organized as follows: Section  2 introduces the basic ideas and steps of a hybrid resource management approach with automated load balancing technique and user-level scheduling for parallel applications on the Grid; Section  3 summarizes the algorithm for adaptive workload balancing (AWLB) introduced in  [5] ; Section  4 presents the results of AWLB implementation, describes a synthetic model application developed for experiments, and shows the trends of the load balancing speedup and the influence of the resource heterogeneity level. Section  5 concludes the paper with discussion and summary of results. 2. Automated load balancing with user-level scheduling Based on our previous experience  [4]  and  [5] , we developed a load balancing technique that takes into account the heterogeneity and the dynamics of Grid resources, estimates the initially unknown application requirements, and provides resource selection and optimal mapping of parallel processes to the available resources. This section describes a hybrid resource management environment, operating on both application and system levels: scheduling decisions are taken in interaction of the application with the execution environment. On the application level the Adaptive Workload Balancing algorithm (AWLB)  [5] is employed, which ensures optimal workload distribution based on the discovered application requirements and measured resource parameters. The execution on the system level is controlled by a User-Level Scheduling (ULS) environment that maintains the user-level resource pool and enables resource selection. One of the most widely used types of parallel applications consists of a set of parallel tasks that process the workload scheduled by the Master task. In the proposed system the latter is bound to the ULS environment to establish the interaction between system and application levels. The ULS operates information about the available resources and monitors the application response. In dynamic environment the ULS responds to changing application or resource conditions: more suitable resource set can be selected to execute the application at a given time. This is a distinctive feature, in contrast to the traditional parallel programs where resources are allocated once and fixed during the execution (unless special migration libraries are used like Dynamite  [17] ). To support the replacement of resources during run-time, the concept of user-level resource pool is employed. This resource pool is maintained and supplied by the ULS environment which dynamically selects the resources most suitable for the application. The suitability of resources is determined by the application requirements; for traditional parallel computing applications considered here as a test case, it depends on the processing power and network connectivity correlated with the application communication to computation ratio. After resources have been selected and assigned to the tasks, the workload balancing on the application level is performed using the AWLB algorithm summarized in Section  3 . The computation is performed as an iterative process; in each iteration the distribution of the workload is re-evaluated on a new set of resources, and the AWLB parameters are re-estimated. The outline of adaptive workload balancing in ULS environment is presented in Fig. 1 as a meta-algorithm. All the processing is performed iteratively within the framework of the ULS environment, and two levels are distinguished: the resource pool level and the application level. The ULS environment is responsible for managing the resource pool to supply the application with appropriate resources. In turn, the application updates the environment with its changing requirements. Explanation of the steps in Fig. 1 is provided below.