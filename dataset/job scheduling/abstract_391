Dynamic processor allocation for adaptively parallel jobs (2004) by Siddhartha Sen , Charles E. Leiserson , Siddhartha Sen Venue: Massachusetts Institute of technology Citations: 6 - 0 self @TECHREPORT{Sen04dynamicprocessor,     author = {Siddhartha Sen and Charles E. Leiserson and Siddhartha Sen},     title = {Dynamic processor allocation for adaptively parallel jobs},     institution = {Massachusetts Institute of technology},     year = {2004} } This thesis addresses the problem of scheduling multiple, concurrent, adaptively parallel jobs on a multiprogrammed shared-memory multiprocessor. Adaptively parallel jobs are jobs for which the number of processors that can be used without waste varies during execution. We focus on the specific case of parallel jobs that are scheduled using a randomized work-stealing algorithm, as is used in the Cilk multithreaded language. We begin by developing a theoretical model for two-level scheduling systems, or those in which the operating system allocates processors to jobs, and the jobs schedule their threads on the processors. To analyze the performance of a job scheduling algorithm, we model the operating system as an adversary. We show that a greedy scheduler achieves an execution time that is within a factor of 2 of optimal under these conditions. Guided by our model, we present a randomized work-stealing algorithm for adaptively parallel jobs, algorithm WSAP, which takes a unique approach to estimating the processor desire of a job. We show that attempts to directly measure a Citations 4443 Computer Architecture: A Quantitative Approach - HENNESSY, PATTERSON - 1990 735 Linda in context - Carriero, Gelernter - 1989 (Show Context) Citation Context ...arallel jobs in mind. The term “adaptive parallelism” itself seems to have been coined by the designers of Piranha [11, 12], a dynamic processor allocation system based on the Linda programming model =-=[13]-=-. Piranha is considered to be one of the first real implementations of dynamic partitioning on a parallel machine [17]. Most dynamic allocation systems in the past have used the instantaneous parallel... 618 Cilk: an efficient multithreaded runtime system - Blumofe, Joerg, et al. - 1995 (Show Context) Citation Context ...r. We focus on the specific case of parallel jobs that schedule their computation on a given set of processors using a randomized workstealing algorithm, as is used in the Cilk multithreaded language =-=[5,19,47]-=-. The problem of scheduling parallel jobs on multiprogrammed parallel systems is two-fold: first, the processors are allocated to the competing jobs, and second, a thread from a job is chosen to run o... 459 Bounds on multiprocessing timing anomalies - Graham - 1969 (Show Context) Citation Context ...ion of its own job during each time step (regardless of how this allocation is determined). 3.3 Analysis of Greedy Schedules For the case of static processor-allocation policies, early work by Graham =-=[20, 21]-=- and Brent [10] shows that there exist P-processor execution schedules that satisfy TP ≤ T1/P + T∞, where TP is the minimum execution time over all P-processor execution schedules. The greedy-scheduli... 457 Scheduler Activations: Effective Kernel Support for the User-level Management of Parallelism - Anderson, Bershad, et al. - 1992 (Show Context) Citation Context ...stem needs to trust that it will respond to allocation changes in an honest manner. Several mechanisms have been proposed to implement coordinated reallocation policies, such as scheduler activations =-=[1]-=-, first-class user threads [31], and process control [48]. The Cilk-AP system uses the process control mechanism, which we discuss in Section 6.2. 16sChapter 3 A Theoretical Model for Scheduling Adapt... 452 Scheduling multithreaded computations by work stealing - Blumofe, Leiserson - 1994 (Show Context) Citation Context ... to model multiprogrammed environments for their thread scheduler. We define an adaptively parallel job using the graph-theoretic model of multithreaded computation developed by Blumofe and Leiserson =-=[7]-=-. We extend the model’s definition, however, to support the idea of adaptive parallelism when executing a multithreaded computation. In particular, the model can handle a scenario where the operating ... 385 The implementation of the Cilk-5 multithreaded language - Frigo, Leiserson, et al. - 1998 (Show Context) Citation Context ...r. We focus on the specific case of parallel jobs that schedule their computation on a given set of processors using a randomized workstealing algorithm, as is used in the Cilk multithreaded language =-=[5,19,47]-=-. The problem of scheduling parallel jobs on multiprogrammed parallel systems is two-fold: first, the processors are allocated to the competing jobs, and second, a thread from a job is chosen to run o... 354 Bounds for Certain Multiprocessing Anomalies - Graham - 1966 308 Scheduling techniques for concurrent systems - Ousterhout - 1982 (Show Context) Citation Context ....g. to implement the shared workpile) is completely decoupled from the allocation of processors. Previous work has also shown that single-level schedulers tend to work poorly on shared-memory systems =-=[22,38,50,51]-=-. Dynamic Processor Allocation The first level of a two-level scheduling system allocates processors to jobs using either a static or dynamic allocation policy. In a static policy, the number of proce... 253 The parallel evaluation of general arithmetic expressions - Brent - 1974 (Show Context) ...during each time step (regardless of how this allocation is determined). 3.3 Analysis of Greedy Schedules For the case of static processor-allocation policies, early work by Graham [20, 21] and Brent =-=[10]-=- shows that there exist P-processor execution schedules that satisfy TP ≤ T1/P + T∞, where TP is the minimum execution time over all P-processor execution schedules. The greedy-scheduling theorem in [... 207 Process control and scheduling issues for multiprogrammed shared-memory multiprocessors - Tucker, Gupta - 1989 179 Thread scheduling for multiprogrammed multiprocessors - Arora, Blumofe (Show Context) Citation Context ... and second levels of scheduling by playing a game between the operating system and the job scheduler, in which the operating system acts as an adversary. A similar approach is taken by Arora et. al. =-=[2]-=- to model multiprogrammed environments for their thread scheduler. We define an adaptively parallel job using the graph-theoretic model of multithreaded computation developed by Blumofe and Leiserson ... 165 A survey of scheduling in multiprogrammed parallel systems - Feitelson - 1979 (Show Context) Citation Context ... on multiprogrammed parallel systems is two-fold: first, the processors are allocated to the competing jobs, and second, a thread from a job is chosen to run on each of the job’s allocated processors =-=[17]-=-. In single-level scheduling, the decision of where to allocate a processor is combined with the decision of which thread to run on it; in other words, the operating system schedules all threads of al... 157 The Performance of Multiprogrammed Multiprocessor Scheduling Policies - Leutenegger, Vernon - 1990 (Show Context) Citation Context ...e of the allocation. Several studies have shown that algorithm DP outperforms all other space-slicing policies when the reallocation overhead is low, regardless of job workload or overall system load =-=[22,27,33,39,46,48,52]-=-. Most of these studies focus on uniform-access, shared-memory (UMA) machines, where the allocation of processors is decoupled from the allocation of memory (see Chapter 2). Some studies have also sho... 148 A dynamic processor allocation policy for multiprogrammed shared-memory multiprocessors - McCann, Vaswani, et al. - 1993 (Show Context) ...n uncoordinated reallocations, the operating system moves processors without interacting with the application, while in coordinated reallocations, processors are moved in concert with the application =-=[33]-=-. The problem with uncoordinated reallocations is that a processor might get preempted while running a thread that holds a spin lock, for example, causing other threads to spin until the critical thre... 142 The Impact of Operating System Scheduling Policies and Synchronization Methods on the Performance of Parallel Applications - TUCKER, GUPTA, et al. - 1991 (Show Context) Citation Context ....g. to implement the shared workpile) is completely decoupled from the allocation of processors. Previous work has also shown that single-level schedulers tend to work poorly on shared-memory systems =-=[22,38,50,51]-=-. Dynamic Processor Allocation The first level of a two-level scheduling system allocates processors to jobs using either a static or dynamic allocation policy. In a static policy, the number of proce... 122 First-class user-level threads - Marsh, Scott, et al. - 1991 (Show Context) Citation Context ...ll respond to allocation changes in an honest manner. Several mechanisms have been proposed to implement coordinated reallocation policies, such as scheduler activations [1], first-class user threads =-=[31]-=-, and process control [48]. The Cilk-AP system uses the process control mechanism, which we discuss in Section 6.2. 16sChapter 3 A Theoretical Model for Scheduling Adaptively Parallel Jobs In this cha... 108 Characterizations of parallelism in applications and their use in scheduling - Sevcik - 1989 (Show Context) Citation Context .... use runtime measurements of efficiency and/or speedup to tune a job’s allotment [36,37], while others study the effect of using various application characteristics to influence allocation decisions =-=[9, 14, 27, 29, 42, 44, 45]-=-. These systems are either impractical, because they assume that application characteristics are provided to the scheduler beforehand, or based solely on recent measures of a job’s performance. In con... 105 Empirical studies of competitive spinning for a shared-memory multiprocessor - Karlin - 1991 (Show Context) Citation Context ...ficantly deteriorate both application and system performance [17, 33]. While several locking protocols have been proposed to alleviate the problem—for example, “two-phase” or “spinthen-block” locking =-=[24,28]-=-—they neither eliminate the problem nor target threads that are critical for reasons unrelated to locks. To avoid this kind of reallocation overhead, we choose a policy that performs coordinated reall... 100 Processor Scheduling in Shared Memory Multiprocessors - Zahorjan, McCann - 1990 (Show Context) Citation Context ...e of the allocation. Several studies have shown that algorithm DP outperforms all other space-slicing policies when the reallocation overhead is low, regardless of job workload or overall system load =-=[22,27,33,39,46,48,52]-=-. Most of these studies focus on uniform-access, shared-memory (UMA) machines, where the allocation of processors is decoupled from the allocation of memory (see Chapter 2). Some studies have also sho... 92 Space-efficient scheduling of multithreaded computations - Blumofe, Leiserson - 1998 (Show Context) ...s a directed acyclic graph (dag) of tasks connected by continue, spawn, and dependency edges. Since it can be impossible to schedule multithreaded computations with arbitrary dependencies efficiently =-=[6]-=-, we focus on a subclass of multithreaded computations, called fully strict computations, in which all dependency edges from a thread go to its parent. We say the computation is “well-structured” in t... 89 Use of application characteristics and limited preemption for run-to-completion parallel processor scheduling policies - Chiang, Mansharamani, et al. - 1994 (Show Context) Citation Context .... use runtime measurements of efficiency and/or speedup to tune a job’s allotment [36,37], while others study the effect of using various application characteristics to influence allocation decisions =-=[9, 14, 27, 29, 42, 44, 45]-=-. These systems are either impractical, because they assume that application characteristics are provided to the scheduler beforehand, or based solely on recent measures of a job’s performance. In con... 81 Adaptive parallelism and Piranha - Carriero, Freedman, et al. - 1995 (Show Context) Citation Context ...tical model for algorithm DP, including an analysis of its performance across a wide range or parallel system environments, is provided in [46]. Examples of real implementations of DP can be found in =-=[12,32]-=-. In practice, there are a few policy decisions that need to be made when implementing algorithm DP, most of which relate to the way reallocations occur. The first decision is between uncoordinated re... 80 Scheduling in multiprogrammed parallel systems - Majumdar, Eager, et al. - 1988 (Show Context) Citation Context .... use runtime measurements of efficiency and/or speedup to tune a job’s allotment [36,37], while others study the effect of using various application characteristics to influence allocation decisions =-=[9, 14, 27, 29, 42, 44, 45]-=-. These systems are either impractical, because they assume that application characteristics are provided to the scheduler beforehand, or based solely on recent measures of a job’s performance. In con... 71 Executing Multithreaded Programs Efficiently - BLUMOFE - 1995 (Show Context) Citation Context ...ted in a depth-first manner on one processor can be made fully strict by altering the dependency structure—possibly at some cost in lost parallelism—but not affecting the semantics of the computation =-=[4, 7]-=-. The computation depicted in Figure 3-1 is fully strict. An execution schedule for a multithreaded computation determines which pro18 F v 18scessors of a parallel computer execute which tasks at each... 70 Parallel job scheduling — a status report - Feitelson, Rudolph, et al. - 2004 (Show Context) Citation Context ... For a thorough treatment of job scheduling in multiprogrammed parallel systems, the reader is directed to Feitelson’s survey [17]. A more recent report has also been written by Feitelson and Rudolph =-=[18]-=-. For background on the concept of work stealing, the reader is referred to Blumofe’s PhD thesis [4]. Dynamic processor-allocation systems are specifically designed with adaptively parallel jobs in mi... 69 Using queue time predictions for processor allocation - Downey - 1997 (Show Context) Citation Context ...airness. Since job allocations are fixed during runtime, new arrivals are forced to wait in a queue if sufficient processors are not available. Various strategies to reduce queuing have been proposed =-=[16,42,43,49]-=-, but all of these strategies essentially reserve processors for future arrivals, thus wasting system resources and limiting achievable utilization. In addition, static policies are unable to adapt to... 66 Application scheduling and processor allocation in multiprogrammed parallel processing systems. Performance Evaluation - Sevcik - 1994 (Show Context) .... use runtime measurements of efficiency and/or speedup to tune a job’s allotment [36,37], while others study the effect of using various application characteristics to influence allocation decisions =-=[9, 14, 27, 29, 42, 44, 45]-=-. These systems are either impractical, because they assume that application characteristics are provided to the scheduler beforehand, or based solely on recent measures of a job’s performance. In con... 57 The Effect of Scheduling Discipline on Spin Overhead in Shared Memory Parallel Processors - ZAHORJAN, LAZOWSKA, et al. - 1991 (Show Context) Citation Context ....g. to implement the shared workpile) is completely decoupled from the allocation of processors. Previous work has also shown that single-level schedulers tend to work poorly on shared-memory systems =-=[22,38,50,51]-=-. Dynamic Processor Allocation The first level of a two-level scheduling system allocates processors to jobs using either a static or dynamic allocation policy. In a static policy, the number of proce... 46 Performance analysis of job scheduling policies in parallel supercomputing environments - Naik, Setia, et al. - 1993 (Show Context) Citation Context ...g system load [52]. 40sThe performance of DP decreases, however, when the number of jobs in the system exceeds the number of processors (i.e. during high loads), since some of the jobs must be queued =-=[35,52]-=-. While queuing is not expected to be a problem in large parallel machines [17], various strategies can be used to reduce its effect on the response time of jobs [16,42,43,49]. A mathematical model fo... 45 Spinning versus blocking in parallel systems with uncertainty - Zahorjan, Lazowska, et al. - 1988 (Show Context) Citation Context ....g. to implement the shared workpile) is completely decoupled from the allocation of processors. Previous work has also shown that single-level schedulers tend to work poorly on shared-memory systems =-=[22,38,50,51]-=-. Dynamic Processor Allocation The first level of a two-level scheduling system allocates processors to jobs using either a static or dynamic allocation policy. In a static policy, the number of proce... 33 Using parallel program characteristics in dynamic processor allocation policies - Brecht, Guha - 1996 (Show Context) Citation Context .... use runtime measurements of efficiency and/or speedup to tune a job’s allotment [36,37], while others study the effect of using various application characteristics to influence allocation decisions =-=[9, 14, 27, 29, 42, 44, 45]-=-. These systems are either impractical, because they assume that application characteristics are provided to the scheduler beforehand, or based solely on recent measures of a job’s performance. In con... 33 Using runtime measured workload characteristics in parallel processor scheduling - Nguyen, Vaswani, et al. - 1996 (Show Context) Citation Context ...shown in Section 4.2 that this approach is inherently inaccurate for a large class of parallel programs. Nguyen et. al. use runtime measurements of efficiency and/or speedup to tune a job’s allotment =-=[36,37]-=-, while others study the effect of using various application characteristics to influence allocation decisions [9, 14, 27, 29, 42, 44, 45]. These systems are either impractical, because they assume th... 31 Maximizing speedup through self-tuning of processor allocation - Nguyen, Vaswani, et al. - 1996 (Show Context) ...shown in Section 4.2 that this approach is inherently inaccurate for a large class of parallel programs. Nguyen et. al. use runtime measurements of efficiency and/or speedup to tune a job’s allotment =-=[36,37]-=-, while others study the effect of using various application characteristics to influence allocation decisions [9, 14, 27, 29, 42, 44, 45]. These systems are either impractical, because they assume th... 30 A type-checking preprocessor for Cilk 2, a multithreaded C language - Miller - 1995 26 A Comparative Analysis of Multiprocessor Scheduling Algorithms - Lo, Gligor - 1987 (Show Context) Citation Context ...ficantly deteriorate both application and system performance [17, 33]. While several locking protocols have been proposed to alleviate the problem—for example, “two-phase” or “spinthen-block” locking =-=[24,28]-=-—they neither eliminate the problem nor target threads that are critical for reasons unrelated to locks. To avoid this kind of reallocation overhead, we choose a policy that performs coordinated reall... 26 Implementing multiprocessor scheduling disciplines - Parsons, Sevcik - 1997 25 Dynamic vs. static quantum-based parallel processor allocation - Chiang, Vernon - 1996 (Show Context) ...n of processors is decoupled from the allocation of memory (see Chapter 2). Some studies have also shown that DP performs better than static allocation policies under realistic reallocation overheads =-=[15]-=-, and for some classes of workloads, under a wide range of overheads [52]. In general, the advantage of using algorithm DP increases with larger and more rapid changes in the parallelism of the worklo... 24 Characterization of programs for scheduling in multiprogrammed parallel systems - Majumdar, Eager, et al. - 1991 23 and deterministic rules of thumb for probabilistic problems in computer communications - Kleinrock, “Power - 1979 (Show Context) Citation Context ...compare the mean response time and throughput achieved by the Cilk and Cilk-AP systems in both of these experiments. We use the notion of power, defined as the throughput divided by the response time =-=[25, 26]-=-, to compare the overall performance. Power is a suitable metric for comparison because it reflects our goal of maximizing the throughput while minimizing the response time. In the last experiment, we... 23 Multiprocessor scheduling for high-variability service time distributions - Parsons, Sevcik 23 Analysis of non-work-conserving processor partitioning policies - Rosti, Smirni, et al. (Show Context) ...airness. Since job allocations are fixed during runtime, new arrivals are forced to wait in a queue if sufficient processors are not available. Various strategies to reduce queuing have been proposed =-=[16,42,43,49]-=-, but all of these strategies essentially reserve processors for future arrivals, thus wasting system resources and limiting achievable utilization. In addition, static policies are unable to adapt to... 17 An experimental evaluation of processor pool-based scheduling for sharedmemory NUMA multiprocessors - Brecht - 1997 17 On the benefits and limitations of dynamic partitioning in parallel computer systems - Squillante - 1995 (Show Context) Citation Context ...e of the allocation. Several studies have shown that algorithm DP outperforms all other space-slicing policies when the reallocation overhead is low, regardless of job workload or overall system load =-=[22,27,33,39,46,48,52]-=-. Most of these studies focus on uniform-access, shared-memory (UMA) machines, where the allocation of processors is decoupled from the allocation of memory (see Chapter 2). Some studies have also sho... 12 On parallel processing systems: Amdahl’s law generalized and some results on optimal design - Kleinrock, Huang - 1992 (Show Context) Citation Context ...compare the mean response time and throughput achieved by the Cilk and Cilk-AP systems in both of these experiments. We use the notion of power, defined as the throughput divided by the response time =-=[25, 26]-=-, to compare the overall performance. Power is a suitable metric for comparison because it reflects our goal of maximizing the throughput while minimizing the response time. In the last experiment, we... 11 Adaptive parallelism on multiprocessors: preliminary experience with Piranha on the CM-5 - Carriero, Freeman, et al. - 1993 (Show Context) Citation Context ...[4]. Dynamic processor-allocation systems are specifically designed with adaptively parallel jobs in mind. The term “adaptive parallelism” itself seems to have been coined by the designers of Piranha =-=[11, 12]-=-, a dynamic processor allocation system based on the Linda programming model [13]. Piranha is considered to be one of the first real implementations of dynamic partitioning on a parallel machine [17].... 11 Limit allocation: An efficient processor management scheme for hypercubes - Yu, Das - 1994 (Show Context) Citation Context ...airness. Since job allocations are fixed during runtime, new arrivals are forced to wait in a queue if sufficient processors are not available. Various strategies to reduce queuing have been proposed =-=[16,42,43,49]-=-, but all of these strategies essentially reserve processors for future arrivals, thus wasting system resources and limiting achievable utilization. In addition, static policies are unable to adapt to... 7 Robust partitioning schemes of multiprocessor systems. Performance Evaluation - Rosti, Smirni, et al. - 1994 (Show Context) ...airness. Since job allocations are fixed during runtime, new arrivals are forced to wait in a queue if sufficient processors are not available. Various strategies to reduce queuing have been proposed =-=[16,42,43,49]-=-, but all of these strategies essentially reserve processors for future arrivals, thus wasting system resources and limiting achievable utilization. In addition, static policies are unable to adapt to... 6 Scheduling Cilk multithreaded computations on processors of different speeds - Bender, Rabin - 2000 5 Dynamic versus Adaptive Processor Allocation Policies for Message Passing Parallel Computers: An Empirical Comparison - Padhye, Dowdy - 1996 (Show Context) Citation Context ...e of the allocation. Several studies have shown that algorithm DP outperforms all other space-slicing policies when the reallocation overhead is low, regardless of job workload or overall system load =-=[22,27,33,39,46,48,52]-=-. Most of these studies focus on uniform-access, shared-memory (UMA) machines, where the allocation of processors is decoupled from the allocation of memory (see Chapter 2). Some studies have also sho...