Models are heavily used in software engineering and together with their
systems they evolve over time. Thus, managing their changes is an important
challenge for system maintainability. Existing approaches to model differencing
concentrate on heuristics matching between model elements and on finding and
presenting differences at a concrete or abstract syntactic level. While showing
some success, these approaches are inherently limited to comparing syntactic
structures. This paper is a manifesto for research on semantic model
differencing. We present our vision to develop semantic diff operators for
model comparisons: operators whose input consists of two models and whose
output is a set of diff witnesses, instances of one model that are not
instances of the other. In particular, if the models are syntactically
different but there are no diff witnesses, the models are semantically
equivalent. We demonstrate our vision using two concrete diff operators, for
class diagrams and for activity diagrams. We motivate the use of semantic diff
operators, brie y discuss the algorithms to compute them, list related
challenges, and show their application and potential use as new fundamental
building blocks for change management in model-driven engineering.