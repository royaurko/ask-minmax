A comparison of Landin's form of lambda calculus with Church's shows that,
independently of the lambda calculus, there exists a mechanism for converting
functions with arguments indexed by variables to the usual kind of function
where the arguments are indexed numerically. We call this the "lambda
mechanism" and show how it can be used in other calculi. In first-order
predicate logic it can be used to define new functions and new predicates in
terms of existing ones. In a purely imperative programming language it can be
used to provide an Algol-like procedure facility.