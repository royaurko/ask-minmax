This paper details a simple approach to the implementation of Optimality
Theory (OT, Prince and Smolensky 1993) on a computer, in part reusing standard
system software. In a nutshell, OT's GENerating source is implemented as a
BinProlog program interpreting a context-free specification of a GEN structural
grammar according to a user-supplied input form. The resulting set of textually
flattened candidate tree representations is passed to the CONstraint stage.
Constraints are implemented by finite-state transducers specified as `sed'
stream editor scripts that typically map ill-formed portions of the candidate
to violation marks. EVALuation of candidates reduces to simple sorting: the
violation-mark-annotated output leaving CON is fed into `sort', which orders
candidates on the basis of the violation vector column of each line, thereby
bringing the optimal candidate to the top. This approach gave rise to OT
SIMPLE, the first freely available software tool for the OT framework to
provide generic facilities for both GEN and CONstraint definition. Its
practical applicability is demonstrated by modelling the OT analysis of
apparent subtractive pluralization in Upper Hessian presented in Golston and
Wiese (1996).