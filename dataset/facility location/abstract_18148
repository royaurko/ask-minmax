Recent compilers allow a general-purpose program (written in a conventional
programming language) that handles private data to be translated into secure
distributed implementation of the corresponding functionality. The resulting
program is then guaranteed to provably protect private data using secure
multi-party computation techniques. The goals of such compilers are generality,
usability, and efficiency, but the complete set of features of a modern
programming language has not been supported to date by the existing compilers.
In particular, recent compilers PICCO and the two-party ANSI C compiler strive
to translate any C program into its secure multi-party implementation, but
currently lack pointer support, which is an important component of many C
programs. In this work, we mitigate the limitation and add support for pointers
to private data to the PICCO compiler, enabling it to handle a program of any
type over private data. Because doing so opens up a new design space, we
investigate the use of pointers to private data (with known as well as private
locations stored in them) in programs and report our findings. We also examine
important topics associated with common pointer use such as dynamic memory
allocation, reference by pointer/address, casting, and building various data
structures in the context of secure multi-party computation. This results in
enabling the compiler to automatically translate a user program that uses
pointers to private data into its distributed implementation that provably
protects private data throughout the computation. We empirically evaluate the
constructions and report on performance of representative programs.