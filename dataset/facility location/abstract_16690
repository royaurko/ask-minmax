Among the components contributing to particle transport, geometry navigation
is an important consumer of CPU cycles. The tasks performed to get answers to
"basic" queries such as locating a point within a geometry hierarchy or
computing accurately the distance to the next boundary can become very
computing intensive for complex detector setups. So far, the existing geometry
algorithms employ mainly scalar optimisation strategies (voxelization, caching)
to reduce their CPU consumption. In this paper, we would like to take a
different approach and investigate how geometry navigation can benefit from the
vector instruction set extensions that are one of the primary source of
performance enhancements on current and future hardware. While on paper, this
form of microparallelism promises increasing performance opportunities,
applying this technology to the highly hierarchical and multiply branched
geometry code is a difficult challenge. We refer to the current work done to
vectorise an important part of the critical navigation algorithms in the ROOT
geometry library. Starting from a short critical discussion about the
programming model, we present the current status and first benchmark results of
the vectorisation of some elementary geometry shape algorithms. On the path
towards a full vector-based geometry navigator, we also investigate the
performance benefits in connecting these elementary functions together to
develop algorithms which are entirely based on the flow of vector-data. To this
end, we discuss core components of a simple vector navigator that is tested and
evaluated on a toy detector setup.