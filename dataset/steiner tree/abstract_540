Most controlled natural languages (CNLs) are processed with the help of a
pipeline architecture that relies on different software components. We
investigate in this paper in an experimental way how well answer set
programming (ASP) is suited as a unifying framework for parsing a CNL, deriving
a formal representation for the resulting syntax trees, and for reasoning with
that representation. We start from a list of input tokens in ASP notation and
show how this input can be transformed into a syntax tree using an ASP grammar
and then into reified ASP rules in form of a set of facts. These facts are then
processed by an ASP meta-interpreter that allows us to infer new knowledge.