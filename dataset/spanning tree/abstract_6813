Identifying intersections among a set of d-dimensional rectangular regions
(d-rectangles) is a common problem in many simulation and modeling
applications. Since algorithms for computing intersections over a large number
of regions can be computationally demanding, an obvious solution is to take
advantage of the multiprocessing capabilities of modern multicore processors.
Unfortunately, many solutions employed for the Data Distribution Management
service of the High Level Architecture are either inefficient, or can only
partially be parallelized. In this paper we propose the Interval Tree Matching
(ITM) algorithm for computing intersections among d-rectangles. ITM is based on
a simple Interval Tree data structure, and exhibits an embarrassingly parallel
structure. We implement the ITM algorithm, and compare its sequential
performance with two widely used solutions (brute force and sort-based
matching). We also analyze the scalability of ITM on shared-memory multicore
processors. The results show that the sequential implementation of ITM is
competitive with sort-based matching; moreover, the parallel implementation
provides good speedup on multicore processors.