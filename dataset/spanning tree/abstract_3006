Can we do arithmetic in a completely different way, with a radically
different data structure? Could this approach provide practical benefits, like
operations on giant numbers while having an average performance similar to
traditional bitstring representations?
  While answering these questions positively, our tree based representation
described in this paper comes with a few extra benefits: it compresses giant
numbers such that, for instance, the largest known prime number as well as its
related perfect number are represented as trees of small sizes. The same also
applies to Fermat numbers and important computations like exponentiation of two
become constant time operations.
  At the same time, succinct representations of sparse sets, multisets and
sequences become possible through bijections to our tree-represented natural
numbers.