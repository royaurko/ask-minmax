Password: The travelling salesman problem (TSP) is a classic problem of combinatorial optimization and has applications in planning, scheduling, and searching in many scientific and engineering fields. Ant colony optimization (ACO) has been successfully used to solve TSPs and many associated applications in the last two decades. However, ACO has problem in regularly reaching the global optimal solutions for TSPs due to enormity of the search space and numerous local optima within the space. In this paper, we propose a new hybrid algorithm, cooperative genetic ant system (CGAS) to deal with this problem. Unlike other previous studies that regarded GA as a sequential part of the whole searching process and only used the result from GA as the input to subsequent ACO iterations, this new approach combines both GA and ACO together in a cooperative manner to improve the performance of ACO for solving TSPs. The mutual information exchange between ACO and GA in the end of the current iteration ensures the selection of the best solutions for next iteration. This cooperative approach creates a better chance in reaching the global optimal solution because independent running of GA maintains a high level of diversity in next generation of solutions. Compared with results from other GA/ACO algorithms, our simulation shows that CGAS has superior performance over other GA and ACO algorithms for solving TSPs in terms of capability and consistency of achieving the global optimal solution, and quality of average optimal solutions, particularly for small TSPs. Keywords Ant colony optimization ; Ant system ; Genetic algorithm ; Traveling salesman problem Given a list of cities and their pair-wise distances, the traveling salesman problem (TSP) is to find the shortest tour that visits each city once and returns to its original city ( Flood, 1955 ). TSP is a classic problem in combinatorial optimization and belongs to the class of NP -complete problems. This type of problems is hardly solvable through finding the exact solution directly ( Lawer, Lenstra, Kan, & Shmoys, 1985 ). Consequently, various heuristics and approximation algorithms have been devised to produce useable solutions for TSPs ( Bhattacharyya and Bandyopadhyay, 2009 , Reinelt, 1994  and  Rego et al., 2011 ). With rapid evolution in computing technology in the last two decades, many computational techniques have been used in producing acceptable solutions for TSPs, such as neural networks ( Leung et al., 2004  and  Masutti and de Castro, 2009 ), simulated annealing ( Lo & Hus, 1998 ), genetic algorithms (GA) ( Albayrak and Allahverdi, 2011 , Jayalakshmi and Sathiamoorthy, 2001  and  Tsai et al., 2003 ), ant colony optimization (ACO) ( Dorigo and Gambardella, 1997 , Liu, 2005  and  Puris et al., 2010 ). ACO is a multi-agent system inspired by the foraging behavior of some ant species ( Dorigo & Gambardella, 1997 ). These ants deposit pheromone on the ground in order to mark some favorable paths that can be followed by other members of the colony. The shortest path will be eventually taken by most ants through which food can be efficiently transported from the food source to their nest. In ACO, a number of artificial ants build solutions to the considered optimization problem and exchange information based on quality of these solutions via a communication scheme similar to that adopted by real ants. Attempts have been made in improving performance of ACO algorithms since their introduction. The ACO with multiple ant clans (ACOMAC) allows different groups of ants to exchange information at the time of pheromone update, and to incorporate other search strategies during execution ( Tsai, Tsai, & Tseng, 2004 ). The cunning ant system (cAS) allows an ant to construct a solution according to both the pheromone density and part of a solution from a previous iteration so as to reduce premature stagnation and thus improve performance of AS algorithms ( Tsutsui, 2007 ). The rank-based ACO uses a nonlinear selection function and a modified Q -learning method to enhance convergence of the basic ACO ( Liu, 2005 ). The two-stage ACO approaches the final solution based on the previous partial solutions for TSPs ( Puris et al., 2010 ). Other intelligent approaches have also been combined with ACO to solve TSPs in various ways. Pilat and White (2002) investigated the performance of embedding GA into ACO (ACSGA and MetaACS) for solving TSPs but the trail did not yield improved results. However, their experiments confirmed that GA is useful in selecting the parameters used in ACO for TSPs that are usually chosen randomly. Hao, Cai, and Huang (2006) used a particle swarm optimization (PSO) as an adaptive controller to adjust some ACO parameters after a single iteration for the next round so that the best solution from each iteration kept evolving for fast convergence. Although these ACO algorithms are able to produce satisfactory solutions to various TSPs under different conditions, consistency of finding the known optimal solutions by these algorithms has always been a challenge due to enormity of the solution space to search through and frequent stagnation at local optima during searching. This paper reports our effort on combining both GA and ACO together in a cooperative fashion to improve the consistency of finding the known optimal solutions to TSPs using ACO. Unlike previous studies that regarded GA as a sequential part of the whole searching process and only used the selected result from GA as the input to subsequent ACO iterations or vice versa ( Jayalakshmi and Sathiamoorthy, 2001 , Takahashi, 2009  and  Zhao et al., 2008 ), our approach is to run both GA and ACO concurrently, and mutual information exchange between them in terms of choosing the best solution is made after each iteration. This cooperative approach creates a better chance for reaching the global optimal solution for TSPs because the independent running of GA provides assurance of diversity in population (or solutions) during the entire process. We firstly describe some widely used ACO algorithms for TSPs, which should point out where our new approach differs from the others. Our proposed algorithm, the cooperative genetic ant system (CGAS), will be described next, followed by the presentation of results from using this new algorithm to solve some selected benchmark TSPs. Based on these results, comparisons and discussions are then made with the outcomes of other GA/ACO algorithms for TSPs. 2. The ACO metaheuristic and main algorithms for TSPs 2.1. The ant colony optimization metaheuristic The general TSP can be represented by a complete graph G  = ( C ,  E ) with C being a set of cities to be visited and E being a set of edges fully connecting all the cities. Each edge ( i ,  j ) between cities i and j is assigned a distance value d ij . The TSP then becomes the problem of finding the shortest closed tour visiting each of the n nodes in G exactly once. Since the late 1990s, many ACO algorithms have been devised for solving TSPs ( Dorigo and Gambardella, 1997 , Montgomery and Randall, 2003 , Stutzle and Hoos, 1997 , Tsai et al., 2004  and  Tsutsui, 2007 ). These attempts have been formalized as a metaheuristic for combinatorial optimization problems by Dorigo et al., 2006  and  Dorigo and Gambardella, 1997 , which is summarized in Algorithm 1. After initialization, the metaheuristic iterates over three phases: a number of solutions being constructed by the ants in a single iteration; these solutions being then improved through an optional local search; finally the pheromone being updated. Given this generalized metaheuristic process, it is the local search mechanism, being highly problem-specific, that brings further improvement to the performance of basic ACO, in addition to the required mechanisms in choosing a set of good solutions to update pheromones for next iteration. In chronological order, the main ACO algorithms can be classified into ant system (AS), max–min ant system (MMAS), and ant colony system (ACS) ( Dorigo et al., 2006 ). Set parameters; initialize pheromone trails while termination condition not met do   Construct AntSolutions   Apply LocalSearch (optional)   Update Pheromones endwhile Full-size table