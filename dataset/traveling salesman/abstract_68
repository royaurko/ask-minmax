Password: The traveling salesman problem with precedence constraints (TSPPC) is one of the most difficult combinatorial optimization problems. In this paper, an efficient genetic algorithm (GA) to solve the TSPPC is presented. The key concept of the proposed GA is a topological sort (TS), which is defined as an ordering of vertices in a directed graph. Also, a new crossover operation is developed for the proposed GA. The results of numerical experiments show that the proposed GA produces an optimal solution and shows superior performance compared to the traditional algorithms. Keywords Traveling salesman problem with precedence constraints ; Genetic algorithm ; Topological sort ; Optimization 1. Introduction The traveling salesman problem (TSP) is a typical example of a very hard combinatorial optimization problem. The problem is to find the shortest tour that passes through each vertex in a given graph exactly once. The TSP has received considerable attention over the last two decades and various approaches are proposed to solve the problem, such as branch-and-bound [6] , cutting planes [14] , 2-opt [12] , simulated annealing [9] , neural network [19] , and tabu search [7] . Some of these methods are exact algorithms, while the others are near-optimal or approximate algorithms. The exact algorithms include the integer linear programming approaches with additional linear constraints to eliminate infeasible subtours [1] , [5] , [8] , [13] , [16]  and  [21] . On the other hand, network models yield appropriate methods that are flexible enough to include the precedence constraints [6]  and  [11] . More recently, genetic algorithm (GA) approaches are successfully implemented to the TSP [3] . Potvin [16] presents survey of GA approaches for the general TSP. When there exist an order in which the vertex should be visited, the problem is referred to as the traveling salesman problem with precedence constraints (TSPPC). The TSPPC can be applied to many industrial problems, such as scheduling, routing decision, process sequencing, etc. But, as pointed out by Savelsbergh and Sol [18] , much less attention has been devoted to the TSPPC. The TSPPC is harder than the general TSP because the model formulations are too complex and the algorithms for solving these models are difficult to implement. Since the TSPPC belongs to the class of NP-hard problem, optimal solution to the problem cannot be obtained within a reasonable computational time for a large size problem. Savelsbergh and Sol [18] present the TSPPC model to solve the Dial-A-Ride problem where a vehicle should transport a number of passengers. Each passenger should be transported from a given location to a given destination. Kusiak and Finke [10] presents a branch-and-bound technique for the flexible forging machine scheduling problem with sequence-dependent changeover costs and precedence constraints. Renaud et al. [17] propose a heuristic model to solve the pickup and delivery TSP which is formulated as the TSPPC model. Mingozzi et al. [15] present dynamic programming strategies for the TSP with time windows and precedence constraints. Fagerholt and Christiansen [4] consider a TSPPC with time window and allocation to solve the bulk ship scheduling problem. The model is solved as a shortest path problem on a graph. In this paper we propose an efficient GA approach to solve the TSPPC which is formulated by network model. Despite the abundance of contributions to the TPS in the GA research area, we cannot find any results for the TSPPC. The traditional GA approaches are not suitable to solve the TSPPC because the precedence constraints cannot be handled adequately. In order to efficiently handle the precedence constraints, a new encoding scheme is developed. The key concept of the new encoding to use a topological sort (TS), which is defined as an ordering of vertices in a directed graph. The merit of the new encoding is that any common genetic operations on this encoding will not generate infeasible solution so that it need not any modification both for the initial population and for the offspring generated in the evolutionary process. Therefore, the proposed GA approach does not generate any infeasible solutions for the TSPPC. A new crossover operator is also developed to efficiently search towards the optimal solution. 2. Network model for TSPPC To formulate the TSPPC, the two-commodity network flow model can be used [6] . Let c ij be the travel time from vertex v i to v j and s be the first selected vertex in the graph. Suppose that there are two distinct commodities p and q in the network with J nodes or cities. While commodity p is supplied by ( J −1) units at a selected starting node and used by one unit at each node that is not the starting node, commodity q is consumed by ( J −1) units at the starting node and supplied by one unit at the other nodes. Such network flow of the commodities are characterized by two properties: First, the sum of commodities p and q in any feasible tour should be equal to J −1. And, the quantity of commodity p (or q ) outbounded from a node is decreasing as the tour proceeds. These properties are used to model the precedence relations for the TSPPC. Three variables are introduced for the two-commodity network flow model: y ij p are the quantity of commodity p from vertex v i to v j , y ij q are the quantity of commodity q from vertex v i to v j . The two-commodity network flow model for the TSPPC can be described as follows: The objective function (1) expresses total travel times for all vertices, since the sum of commodities p and q between vertices v i to v j on any feasible sequence (i.e., y ij =1) is equal to J −1 (i.e., y ij p + y ij q = J −1). Constraints  and  are used to ensure the feasibility of flow of commodity p . Similarly, constraints  and  are for feasibility of commodity q . Constraint (4) ensures a feasible tour, i.e., feasible sequence. Constraint (5) explains that, if y ij =1, the sum of commodities p and q between v i and v j be J −1. From constraint (5) , we see that the (1/( J −1)) c ij ( y ij p + y ij q ) in objective function is the same meaning as the c ij y ij . Constraint (6) is for the precedence relationship between vertices. 3. Development of solution method A GA approach based on TS is presented in this section. GA is one of the evolutionary search methods that can provide optimal or near optimal solutions for the combinatorial optimization problems. The most attractive features of GA is the flexibility of handling various kinds of objective functions with fewer requirements on fine mathematical properties [3] . It has been applied to a number of fields like engineering, biology, computer science, and social sciences. The main issues in developing a GA-based algorithm are chromosome representation, initialization of the population, evaluation measure, crossover, mutation, and selection strategy. Also, the genetic parameters such as population size pop _ size , number of generation max _ gen , probability of crossover p c , and probability of mutation p m , should be determined before execution of a GA. Since the TSPPC has many precedence constraints, the traditional representation schemes generate infeasible solutions. Because most sequences in the search space would not correspond to feasible tours. To resolve this problem, fitness function with penalty terms, and repair operators to transform infeasible solutions into feasible ones, have been presented to handle infeasible solutions. However, these methods cannot handle the precedence constraints efficiently and are not satisfactory in speed and in accuracy of the generated solution. In this section, we developed an efficient representation scheme to resolve this difficulty. 3.1. Topological sort While developing a solution method for TSP using GA, a critical issue we usually encounter is the development of a simple scheme to represent a feasible solution. The simplicity and clarity of the representation scheme can lessen the complexity of algorithm. In order to be a good representation scheme, it should be able to generate all possible topological orders for a given network.