Password:   This paper addresses a variation of the traveling salesman problem with pickup and delivery in which loading and unloading operations have to be executed in a first-in-first-out fashion. It provides an integer programming formulation of the problem. It also describes five operators for improving a feasible solution, and two heuristics that utilize these operators: a probabilistic tabu search algorithm, and an iterated local search algorithm. The heuristics are evaluated on data adapted from TSPLIB instances. Keywords Traveling salesman problem ; Pickup and delivery ; First-in-first-out ; Integer programming ; Tabu search ; Iterated local search 1. Introduction The purpose of this paper is to introduce a new variant of the traveling salesman problem with pickup and delivery (TSPPD) called the TSPPD with first-in-first-out loading (TSPPDF). The TSPPD consists of determining a minimum cost circuit traveled by a vehicle to service n requests. Each request is defined by an origin vertex, the pickup location, and a destination vertex, the delivery location. The vehicle starts from the depot and returns to it after all requests have been serviced. Every vertex except the depot must be visited exactly once, subject to the constraint that the pickup vertex of a request must be visited before its corresponding delivery vertex. The TSPPD has several practical applications in freight and passenger transportation. It arises, for example, in urban courier service operations, in less-than-truckload transportation, and in door-to-door transportation services for the elderly and the disabled [1] . The TSPPDF is similar to the TSPPD, with the difference that the pickup and delivery operations must be executed in a first-in-first-out (FIFO) fashion. In other words, if the vehicle picks up request i before request j , then it cannot deliver request j before delivering request i . The TSPPDF has applications in the same areas as the TSPPD when the circumstances dictate that the requests should be processed in a FIFO fashion. One such case occurs in dial-a-ride systems when fairness is a major concern, i.e. when the passengers resent another passenger being picked up after them but dropped off before them. Although there may be special cases where neglecting the FIFO rule is acceptable and increases the efficiency of routing, the issue of equity remains important for the general case. For a study on DARPs where the transportation requests have a FIFO preference order, we refer the reader to the paper by Hauptmeier et al. [2] . These authors describe transportation systems in which queues form at the pickup locations and transportation jobs must be performed in a FIFO fashion. This is also the case of some conveyor belt systems. In addition, adapting a previous example by Levitin and Abezgaouzb [3] , the TSPPDF is equivalent to the routing problem of an autonomous intelligent agent in a computer network, which performs information transfers and has a FIFO memory. The TSPPD has been studied, among others, by Kalantari et al. [4] , Fischetti and Toth [5] , Savelsbergh [6] , Healy and Moll [7] , Ruland and Rodin [8] , Renaud et al. [9] , Renaud et al. [10] , Dumitreschu et al. [11] . We refer the reader to Berbeglia et al. [12] , Cordeau et al. [1]  and  [13] for recent surveys. The largest non-trivial TSPPD instance solved to optimality by Dumitrescu et al. [11] involves 30 requests and required about 2 h of computing time. To the best of our knowledge, the most effective heuristic is the solution perturbation approach developed by Renaud et al. [10] . An interesting variant of TSPPD, which is similar to the TSPPDF, is the TSPPD with last-in-first-out loading (TSPPDL) in which pickup and delivery operations are executed in a last-in-first-out (LIFO) fashion. The TSPPDL and its variants have been studied by Levitin and Abezgaouzb [3] , Cordeau et al. [26] , Ladany and Mehrez [14] , Pacheco [15]  and  [16] , Cassani [17] , Ficarelli [18] and Carrabs et al. [19]  and  [20] . The best exact algorithm is probably that of Cordeau et al. [13] which solves instances of up to 25 requests within an hour of computing time. The most successful heuristic seems to be the variable neighborhood search algorithm of Carrabs et al. [19] which uses new local search operators with complexities not exceeding O(n 3 ) O ( n 3 ) . Our aim is to develop and compare two heuristics for the TSPPDF: a probabilistic tabu search algorithm, and an iterated local search algorithm. The remainder of the paper is organized as follows. In Section 2 we present an NP-hardness proof for the problem, as well as an integer programming formulation. In Section 3 , we develop five operators which are embedded within a probabilistic tabu search heuristic and an iterated local search heuristic, both described in Section 4 . Computational results are presented in Section 5 , followed by our conclusions in Section 6 .