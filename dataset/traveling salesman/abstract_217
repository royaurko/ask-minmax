Password: This paper investigates the development and application of a general meta-heuristic, Meta-RaPS (meta-heuristic for randomized priority search), to the traveling salesman problem (TSP). The Meta-RaPS approach is tested on several established test sets. The Meta-RaPS approach outperformed most other solution methodologies in terms of percent difference from optimal. Additionally, an industry case study that incorporates Meta-RaPS TSP in a large truck route assignment model is presented. The company estimates a more than 50% reduction in engineering time and over $2.5 million annual savings in transportation costs using the automated Meta-RaPS TSP tool compared to their current method. Keywords Meta-heuristic ; TSP ; Cheapest insertion 1. Introduction The well-known traveling salesman problem (TSP), in its simplest form, involves finding an optimal route for visiting N cities and returning to the point of origin, where the inter-city distances are symmetric and known. Regardless of the fact that TSP can be easily formulated, its nature exhibits all aspects of NP-hard combinatorial optimization ( Reinelt, 1994 ). This is the reason why TSP has been intensively studied, because any improvement in finding TSP optimized solutions can be adapted to the entire class of NP-hard problems ( Johnson, 1991 ). This paper investigates the development and application of a general meta-heuristic, Meta-RaPS (meta-heuristic for randomized priority search), to the traveling salesman problem. Past research for the TSP has been extensive. Several good TSP survey papers are available. Melamed et al. (1990) provide various descriptions of the TSP and its formulations are examined in linear and integer linear programming forms. Burkard et al. (1998) review several polynomial time TSP heuristics developed during the decade 1985–1995. Also, Moraga and AlMazid (2000) provide a survey of the TSP and its industrial applications found in the literature from 1980 to 1999. Laporte et al. (1996) review a wide variety of different combinatorial optimization problems that can be formulated as a generalized TSP. Finally, Reinelt (1994) , in his text, provides an excellent treatment to the TSP subject, covering its computational solutions and applications. While the goal of some TSP research is to find an algorithm that gives an optimal solution in polynomial time with respect to the problem size, the main interest in practice is to guarantee a good quality solution (or near-optimal solution) in a reasonable amount of time. Numerous approaches to solve TSP optimization problems have been proposed, varying from brute-force enumeration through highly esoteric optimization methods. The majority of these methods can be broadly classified as either “exact” algorithms or “heuristic” algorithms. Exact algorithms are those that yield an optimal solution. The branch-and-bound method, for example, is a quasi-enumerative approach that has been used in a wide variety of combinatorial problems. Branch-and-bound is reasonably efficient for problems of modest size and, as a general methodology, it constitutes an important part of the set of exact solution methods for the general class of integer linear programming problems ( Ingnizio and Cavalier, 1994 ). Recent TSP studies using the branch and bound approach are Lysgaard (1999) and Fischetti and Toth (1997) . The size of practical problems frequently precludes the application of exact methods and thus heuristic algorithms are often used for real-time solution of the TSP. Much research has been done on heuristic algorithms for the TSP. Johnson and McGeoch (2002) provide a discussion of several TSP heuristics. For the purposes of this paper, TSP heuristics will be classified as either classic construction TSP heuristics or modern TSP heuristics. Several well-know classic construction TSP heuristics include nearest neighbor (see Reinelt, 1994 ), insertion heuristics (see Reinelt, 1994 ), convex hull (see Lawler et al., 1985 ), Delaunay Triangulation (see Krasnogor et al., 1995 ), minimum spanning tree ( Christofides, 1976 ), and savings methods ( Clarke and Wright, 1964 ). Every TSP construction heuristic has, in theory, the chance to find an optimal solution. But, finding the optimal solution typically is a remote event because heuristics often get stuck in a local optimal solution. Modern heuristics deal with this problem by introducing systematic rules to move out of a local minimum or avoid a local minimum. Modern TSP heuristics approaches have appeared during the last two decades. They take an initial solution, which is improved by using improvement heuristics embedded in a more general framework. The common characteristic of these modern heuristics is the use of randomness as a mechanism to avoid local optima. Modern heuristics such as genetic algorithms (GA), simulated annealing (SA), tabu search (TS), and neural networks (NN) succeed in leaving the local optimum by temporarily accepting moves which cause a worsening of the objective function value. For example, in the case of simulating annealing a bad solution can be accepted as appropriate with a certain probability. In addition to the idea of escaping from local optima, genetic algorithms use randomness to generate an initial population of solutions before starting the search. However, when the problem is too unconstrained, as the case of large TSPs, a fully random selection of the initial population is not helpful. Some authors recommend the addition of problem knowledge to the algorithm through choosing the initial population according to a heuristic ( Chatterjee et al., 1996 ). The following articles report the use of modern heuristics for solving the TSP: genetic algorithms ( Chatterjee et al., 1996 ; Schmitt and Amini, 1998 ); neural network ( Altinel et al., 2000 ; Burke, 1996 ; Burke and Damany, 1992 ; Matsuyama, 1992 ; Modares et al., 1999 ; Soylu et al., 2000 ); simulated annealing ( Malek et al., 1989 ; Yip and Pao, 1995 ) and tabu search ( Gendreau et al., 1998 ; Malek et al., 1989 ; Tsubakitani and Evans, 1998 ). These heuristics are often called “meta-heuristics” because the procedure used to generate a new solution out of the current one is embedded in a heuristic that determines the search strategy. This paper details the application of another meta-heuristic, Meta-RaPS, to the traveling salesman problem. Meta-RaPS (meta-heuristic for randomized priority search) is a generic, high level strategy used to modify construction heuristics based on the insertion of randomness. Meta-RaPS integrates priority rules, randomness, and sampling. At each iteration, Meta-RaPS constructs and improves feasible solutions through the utilization of construction heuristic priority rules used in a randomized fashion. After a number of iterations, Meta-RaPS reports the best solution found. As with other meta-heuristics, the randomness represents a device to avoid getting stuck in a local optima. In general, a construction heuristic builds a solution by repeatedly adding feasible components or activities to the current solution until a stopping criteria is met. The order in which the activities are added to the solution is based on their priority values as determined by the construction heuristic's priority rule. The priority value of each feasible activity is calculated and the activity with the best or most desirable priority value is added to the current solution next. For example, a TSP construction heuristic builds a solution by repeatedly adding unvisited cities (i.e. feasible activities) to the route (i.e. solution) until all the cities are included in the route (i.e. stopping criteria). In most TSP construction heuristics the order in which the cities are added to the route is based on minimizing the total route distance (i.e. priority rule) by calculating the increase in route distance (i.e. priority value) for each feasible city and inserting the city with the minimum increase in route distance (i.e. best priority value). Solutions generated using a construction heuristic are usually good, but rarely optimal, as the construction heuristic often generates a local optimum solution. Using Meta-RaPS to include randomness in a construction heuristic frequently allows the global optimum solution to be found as will be demonstrated later in this paper. Meta-RaPS modifies the way a general construction heuristic chooses the next activity to add to the solution by occasionally choosing an activity that does not have the best priority value. Sometimes the next activity is chosen randomly from those feasible activities with good, but not the best, priority values. Meta-RaPS uses two user-defined parameters, % priority and % restriction, to include randomness in a construction heuristic (see Fig. 1 ). The % priority parameter is used to determine how often the next activity added to the solution has the best priority value. The remaining time (100%−% priority) the next activity added to the solution is randomly chosen from an `available list' of those feasible activities with good priority values. Good priority values are determined using the % restriction parameter. Those feasible activities whose priority values are within % restriction of the best priority value are included on the `available list.' Again, an activity is then randomly selected from this list to be added to the solution next. Therefore, each application or iteration of the heuristic will most likely produce a different solution because the same activity will not be randomly selected from the available list each time the heuristic is used. An appropriate methodology to select the % priority and % restriction parameter values is discussed in Section 2.2 .