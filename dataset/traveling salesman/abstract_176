Password: This article describes and compares seven perturbation heuristics for the Pickup and Delivery Traveling Salesman Problem (PDTSP). In this problem, a shortest Hamiltonian cycle is sought through a depot and several pickup and delivery pairs. Perturbation heuristics are diversification schemes which help a local search process move away from a local optimum. Three such schemes have been implemented and compared: Instance Perturbation , Algorithmic Perturbation , and Solution Perturbation . Computational results on PDTSP instances indicate that the latter scheme yields the best results. On instances for which the optimum is known, it consistently produces optimal or near-optimal solutions. Scope and purpose In several distribution management contexts, it is necessary to construct a shortest tour starting at a depot and making several pickup and deliveries. In the Traveling Salesman Problem with Pickup and Delivery, to each pickup point is associated a delivery point later in the tour. Like several routing problems, the PDTSP is very hard to solve to optimality and local search heuristics often get trapped in local optima. Perturbation heuristics provide a means of escaping from local optima. This paper describes and compares three types of perturbation heuristic. It shows that the best scheme consistently yields high-quality solutions. Keywords Pickup and delivery traveling salesman problem ; Perturbation heuristics 1. Introduction The purpose of this article is to describe and compare several perturbation heuristics for the Pickup and Delivery Traveling Salesman Problem (PDTSP) defined as follows. Let G =( V , E ) be an undirected graph where V ={ v 1 ,…, v n } is the vertex set, n is odd, v 1 represents a depot, and is the edge set. The set V ⧹{ v 1 } is partitioned into { P , D } where P is a set of pickup customers, D is a set of delivery customers , and | P |=| D |=( n −1)/2. These two sets are twinned in the sense that to each pickup customer, v i ∈ P corresponds exactly one delivery customer d ( v i )∈ D , and to each delivery customer corresponds exactly one pickup customer. A distance matrix C =( c ij ) is defined on E. In what follows, c ij must be interpreted as c ji whenever i > j . The PDTSP consists of determining a shortest Hamiltonian cycle on G starting and ending at the depot, and such that each pickup customer is visited before its associated delivery customer. The PDTSP is NP-hard since it reduces to the traveling salesman problem (TSP) whenever each pickup customer v i coincides with its associated delivery customer d ( v i ). The PDTSP is related to, but different from, the dial-a-ride problem (DARP) in the following way: in the DARP there may be several capacitated vehicles instead of only one, time windows are often present, and the objective function may be different. For example, one may wish to minimize the total distance traveled between each pickup point and its associated delivery point. For references on the DARP, see, e.g., Psaraftis [1] , [2]  and  [3] , Sexton and Bodin [4]  and  [5] , Sexton and Choi [6] , Desrosiers et al. [7] , Jaw et al. [8] , Dumas et al. [9] , Van der Bruggen et al. [10] , Savelsbergh and Sol [11] . Two other problems related to the PDTSP are the vehicle routing problem with backhauls [12] , [13]  and  [14] , and the TSP with Backhauls [15]  and  [16] . In both problems, all pickup customers must be visited before delivery customers but there is no relationship between these two sets. Relatively few algorithms have been proposed for the PDTSP. Kalantari et al. [17] have described an exact branch-and-bound procedure for this problem and have applied to instances involving no more than 40 vertices. Savelsbergh [18] and Healy and Moll [19] have proposed several heuristic improvement schemes based on edge interchanges. More recently, Renaud Boctor and Ouenniche [20] have implemented an edge-interchange scheme as well as a vertex deletion and reinsertion method. As far as we are aware, no heuristic method has been assessed by making comparisons with optimal solutions. Our aim is to develop several types of perturbation heuristics for the PDTSP. These can be viewed as diversification schemes that can help an improvement algorithm to escape from a local optimum, similar to what is sometimes done in tabu search [21] . A first type of perturbation heuristic, called Instance Perturbation (IP) was introduced by Storer et al. [22] , Charon and Hudry [23] and later implemented by Codenetti et al. [24] in the context of the TSP. In IP, when a local optimum is reached, the instance data are marginally perturbed, an improvement algorithm is then applied to the modified data, and the local optimum of the perturbed instance is translated back into the original data. The same process can be applied iteratively. A second type of perturbation is called Algorithmic Perturbation (AP). This concept can be applied to a construction or to an improvement heuristic. In the first case, the criterion used to generate a feasible solution can be modified from one iteration to the next. In the second case, it is useful to view an improvement algorithm as a process that iteratively moves from a solution to another solution in its neighbourhood. For example, the neighbour of a TSP solution can be any solution reachable by removing and reintroducing k edges. To avoid local optima, one can occasionally modify the rule that governs the definition of the neighbourhood, e.g., by going from 3-opt to 4-opt. Examples of AP are multistart methods [25] and variable neighbourhood search [26]  and  [27] . A third type of perturbation is Solution Perturbation (SP). Here, a local optimum is modified and the improvement procedure is reapplied to the perturbed solution. A common example of SP is the mutation process in genetic algorithms [28] . For an interesting application of SP to the Quadratic Assignment Problem , see Fleurent and Ferland [29] . The remainder of this article is organized as follows. In Section 2 , we describe several implementations of IP, AP and SP to the PDTSP. Extensive computational results are presented in Section 3 , followed by the conclusion in Section 4 . 2. Perturbation heuristics We have developed a total of seven perturbation heuristics for the PDTSP. All proceed according to the following general framework: