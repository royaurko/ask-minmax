Password:   We propose a heuristic algorithm for the solution of the period traveling salesman problem. Computational results obtained on the classical test instances of the literature show that the total distance obtained by the algorithm is not worse than the best-known total distance in 95% of the instances and is strictly better in 18 of the 40 tested instances. Keywords Period traveling salesman problem ; Heuristic algorithms ; Computational results 1. Introduction In the period traveling salesman problem (PTSP) a traveling salesman has to visit r i times each city i of a given set I ={1,2,…, n } over a given planning period of length m . Each city i specifies a set of possible combinations of visit days. Each combination for city i is composed of r i days. The traveling salesman has to leave his home city (city 0), visit at least one city and then go back to city 0 every day of the planning period. A symmetric distance, or length, d ij is given for each arc ( i , j ), with i , j ∈ I ∪{0}. This problem can be seen as the problem of simultaneously assigning the visit days, i.e. selecting a combination, to each city and designing m tours, where each tour connects the home city and the cities to be visited on the same day, that minimize the total distance traveled over the planning period. Therefore, it includes both temporal and spatial decisions (see [1] ). This problem arises in various applications such as mail delivery or lawn-care service (see [2] ). Since it is a generalization of the classic TSP (see [3] ), it is NP–hard and several heuristic algorithms have been developed for its solution (see [2] , [4] , [5] , [6]  and  [7] ). In particular, Chao et al. [6] have proposed an algorithm that first generates an initial solution and then uses an improvement procedure based on the record-to-record approach of Dueck [8] . Cordeau et al. [2] have proposed a tabu search based on the GENI procedure proposed by Gendreau et al. [9] . Finally, Paletta [7] has proposed a heuristic algorithm based on an improvement procedure embedded within a tour construction procedure. We propose a new improvement procedure that successfully replaces the one used in the algorithm by Paletta [7] . Computational results obtained on the classical test instances of the literature (see http://www.crt.umontreal.ca/~cordeau/ ) show that the total distance obtained by the algorithm is not worse than the best-known total distance in 95% of the instances and is strictly better in 45% of the instances, with an average decrease of about 0.6%. The algorithm is described in Section 2 and the computational results are shown in Section 3 . 2. The algorithm The heuristic algorithm we propose is a construction type algorithm with an embedded improvement procedure. At each iteration, a procedure (named City Processing procedure ) selects a not yet processed city, assigns to it a combination of visit days and, for each day of the combination, inserts the city into the corresponding current tour. This iteration process is temporarily interrupted every time the number of processed cities is a multiple of a given integer parameter ⌊ n / p 1 ⌋, where p 1 is the number of times the procedure is interrupted. Whenever the interruption condition occurs, the algorithm performs an iterative procedure (named Improvement procedure ) which tries to improve the current solution by removing at each iteration a given number p 2 of processed cities from the tours in which they are currently inserted, assigning to each of them a new combination of visit days and then inserting each of them into the tours corresponding to the new combination of visit days. At the end of the Improvement procedure, the iteration process is performed on the not yet processed cities until the interruption condition occurs again. At the end of this phase, referred to as tour construction phase , if the current solution is infeasible with respect to the constraint that at least one city has to be visited every day of the planning period, the algorithm performs a procedure (named Feasibility procedure ) that starts with an infeasible solution and returns a feasible one. Finally, a further improvement procedure (named Modified Improvement procedure ) is performed. The algorithm, which depends on the two given parameters p 1 and p 2 and on the city f ∈ I (first processed city), can be described as follows: Start with m initial tours (one for each day of the planning period) containing the home city only. Set Z ={ f }, where Z is the ordered set of the currently selected cities. 2. Assign to city f the first combination of visit days in V ( f ), insert f into the tours designed for the days of the selected combination by applying the Insertion rule . 3. For z =2,3,…, n : (a) Perform the City Processing procedure . Let s be the selected city. Set Z = Z ∪{ s }. (b) If z is a multiple of ⌊ n / p 1 ⌋, perform the Improvement procedure IP ( p 2 ). 4. If there exists at least one empty tour, perform the Feasibility procedure . 5. Perform the Modified Improvement procedure . The rule used to insert and remove a city from a tour, the City Processing and the Feasibility procedures are taken from Paletta [7] . Instead, the Improvement procedure and the Modified Improvement procedure are new. Therefore, in the following, in order to make the paper self–contained we briefly describe the insertion and removal rules, the City Processing and the Feasibility procedures, for which we refer to Paletta [7] for a detailed description. Then, we describe in details the new Improvement procedure and the new Modified Improvement procedure. 2.1. Insertion rule Method I: Delete the arcs ( i , su ( i )) and ( u , su ( u )) from H t , insert the arcs ( i , s ), ( s , u ) and ( su ( i ), su ( u )) and reverse the path between the city u and the city su ( i ). • Method II: Delete the arcs ( i , su ( i )) and ( u , su ( u )) from H t , insert the arcs ( su ( i ), s ), ( s , su ( u )) and ( i , u ) and reverse the path between the city u and the city su ( i ).