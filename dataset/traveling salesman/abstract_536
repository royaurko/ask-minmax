Password: This paper introduces a branch-and-cut algorithm for a variant of the pickup and delivery traveling salesman problem in which pickups and deliveries must obey the first-in-first-out policy. We propose a new mathematical formulation of the problem and several families of valid inequalities which are used within the branch-and-cut algorithm. Computational experiments on instances from the literature show that this algorithm outperforms existing exact algorithms, and that some instances with up to 25 requests (50 nodes) can be solved in reasonable computing time. Keywords Traveling salesman problem ; Pickup and delivery ; FIFO loading ; Branch-and-cut 1. Introduction In the classical traveling salesman problem with pickup and delivery (TSPPD) each customer request is represented by an origin location and a destination location, and the problem is to find a minimum-cost Hamiltonian cycle visiting all locations with the additional constraint that the origin location of each request is visited before the corresponding destination location. The TSPPD has applications in several areas such as urban courier services, less-than-truckload transportation, and dial-a-ride systems [1] . The TSPPD with FIFO Loading (TSPPDF) is a variant of the TSPPD where the pickup and delivery operations must be done in a first-in-first-out fashion: if the pickup of a request i is performed before that of a request j , then the delivery of request i must be performed before that of request j . The TSPPDF was recently introduced by Erdogan et al. [2] , who mention that the problem arises in dial-a-ride transportation when fairness is a major concern and passengers resent another passenger being pickup up after them but dropped off before them. The problem may also arise in the routing of some automatic guided vehicles that load items on one end and unload them at the other end. Ergodan et al. [2] have proposed an integer linear programming formulation of the problem with a polynomial number of variables and constraints. Using the branch-and-bound algorithm of CPLEX, the authors were able to solve instances with 12 requests to optimality within four hours of computing time. For instances with 37 or more requests, however, even the LP relaxation of the problem could not be solved within the four hour time limit. Local search heuristics were thus proposed and results were reported on instances with up to 375 requests. The authors have also shown that the TSPPDF is NP NP -hard. In another recent paper, Carrabs et al. [3] have used an additive branch-and-bound algorithm to solve the TSPPDF. Using lower bounds from the assignment problem and shortest spanning r -arborescence problem, they were able to solve most instances with up to 13 requests and some instances with 15, 17, and 19 requests. Their algorithm also strongly benefits from the application of elimination rules that gradually remove from the graph arcs that are incompatible with prior branching decisions. The TSPPD has received far more attention in the literature. Several heuristic algorithms have been proposed for this problem (see, e.g., Van der Bruggen et al. [4] , Healy and Moll [5] , Renaud et al. [6]  and  [7] ), while exact algorithms were developed, among others, by Kalantari et al. [8] , Ruland and Rodin [9] , and Dumitrescu et al. [10] . Another closely related problem is the TSPPD with LIFO Loading (TSPPDL) in which pickup and delivery operations must obey the last-in-first-out policy (see, e.g., Xu et al. [11] ). Algorithms for the TSPPDL have been suggested, among others, by Carrabs et al. [3]  and  [15] , Pacheco [12]  and  [13] , Cassani [14] , and Cordeau et al. [16] . The best exact algorithm for the TSPPDL is currently that of Cordeau et al. [16] which is able to solve most instances with up to 17 requests as well as some instances with 21 and 25 requests. In this article, we introduce a new formulation of the TSPPDF as well as several families of valid inequalities. These inequalities are used within a branch-and-cut algorithm which is capable of solving some instances with up to 25 requests. The remainder of the article is organized as follows. In the next section, we provide a formal definition of the problem and introduce a mathematical formulation. Section 3 then describes the valid inequalities which are used within the branch-and-cut algorithm introduced in Section 4 . Finally, computational experiments are presented in Section 5 , and this is followed by the conclusions. 2. Problem definition and mathematical formulation