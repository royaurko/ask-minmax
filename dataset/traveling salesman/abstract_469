Password: This paper concerns a generalization of the traveling salesman problem (TSP) called multi-commodity one-to-one pickup-and-delivery traveling salesman problem ( m -PDTSP) in which cities correspond to customers providing or requiring known amounts of m different commodities, and the vehicle has a given upper-limit capacity. Each commodity has exactly one origin and one destination, and the vehicle must visit each customer exactly once. The problem can also be defined as the capacitated version of the classical TSP with precedence constraints. This paper presents two mixed integer linear programming models, and describes a decomposition technique for each model to find the optimal solution. Computational experiments on instances from the literature and randomly generated compare the techniques and show the effectiveness of our implementation. Keywords Traveling salesman ; Pickup-and-delivery ; Branch-and-cut ; Dial-a-Ride 1. Introduction Many practical applications in transportation involve routing and delivery optimization problems. This paper considers the following one. Objects are located at points (sources) on a surface. Each object is associated with another point (destination), different from its source, where it must be delivered. A vehicle is available at a specific point (depot) to execute the pickups and deliveries of the objects. The weight of each object is known and the vehicle is capacitated. The travel distance between two points is also known. The multi-commodity one-to-one pickup-and-delivery traveling salesman problem ( m -PDTSP) is the problem of finding a route for the vehicle, starting and ending at the depot, so that it pickups and delivers all the objects respecting the vehicle weight limitation and minimizing the total travel distance. We will assume in this paper that once an object is loaded onto the vehicle it stays on it until the vehicle reaches the destination of the object. In other words, an object cannot be dropped at intermediate locations to be later picked up again by the vehicle. This is called the non-preemptive version of the m -PDTSP. Another hypothesis in this paper is that each location point is the source or destination of one or more objects. We allow a point to be the source of some objects and the destination of others. The same location point cannot be visited more than once by the vehicle. This implies that the route of the vehicle must be a Hamiltonian cycle. Clearly it depends on the weights of the objects and the vehicle capacity whether a problem instance is feasible or not. The term “commodity” in the name of this routing problem is used to keep the terminology used in other similar telecommunication problems or in network design. However, since each commodity has only one source and one destination, and since the commodity will be moved along a single path from the source to the destination, it is sometimes identified as an object in this paper. We maintain the assumption that all the objects are different, and this justifies the term “multi-commodity” in the name by which the problem is called. The literature contains many articles on similar problems involving the delivery of different objects (or people) using a single vehicle. These problems are typically called Dial-a-Ride problems (DARP) when they also consider time-window constraints (see, e.g., Psaraftis [22]  and  [23] ). There are variants depending on different requirements, features and optimization functions. We next summarize some of them. In the simplest capacitated version a single vehicle with a limited capacity should transport a set of objects, all with the same weight, and each one going from one origin to one destination. This is the case, for example, of a bus transporting people. When there are also time windows constraints, it is called Capacitated Dial-a-Ride Problem (CDARP). Psaraftis [22] gives a dynamic programming algorithm. He also considers the version where the commodity requests are introduced in the model in real-time, the dynamic version of the DARP. Guan [13] studies the preemptive and non-preemptive CDARP on some graphs (paths, cycles and trees). When the capacity is one unit, the non-preemptive CDARP is known as the Stacker Crane Problem . Fredericson et al. [9] show a worst-case heuristic algorithm for this problem. When there is no vehicle capacity and no time windows, the non-preemptive CDARP is called the Pickup and Delivery Traveling Salesman Problem (PDTSP). It assumes that one point is only the origin or the destination of a single object. Some references about PDTSP are Kalantari et al. [18] , Kubo and Kasugai [19] , Healy and Moll [14] , Renaud et al. [25] , Renaud et al. [24] , Ruland [26] and Ruland and Rodin [27] . Anily and Hassin [1] introduced the Swapping Problem where one vehicle with a one-unit capacity must move a set of objects, each one from one origin to one destination and with unitary weight, and where the non-preemption constraint is relaxed. See, e.g., Hernández and Salazar [15]  and  [16] for articles on the case where all the objects are identical (i.e., only one commodity is transported from many sources to many destinations), and Berbeglia et al. [5] , Cordeau and Laporte [7] and Cordeau et al. [8] for recent surveys on related problems. The variant where a point can be the origin and/or destination of several objects is called Asymmetric TSP with Precedence Constraints (ATSPPC) or Sequential Ordering Problem . It has been studied by Bianco et al. [6] , Balas et al. [3] , Ascheuer et al. [2] and Gouveia and Pesneau [12] . The m -PDTSP is the capacitated version of the ATSPPC. As far as we know, this is the first paper introducing and solving the m -PDTSP in the literature. The problem subsumes several known pickup and delivery problems, and this was the motivation for the research leading to this paper. No direct real-world application motivated us to work on the m -PDTSP. The paper is structured as follows. Section 2 describes two mathematical models for the m -PDTSP, and a decomposition technique to solve each model. Section 3 shows valid inequalities. Section 4 analyzes the results of computational experiments solving random instances with our implementations.