The analysis of several algorithms and data structures can be framed as a
peeling process on a random hypergraph: vertices with degree less than k and
their adjacent edges are removed until no vertices of degree less than k are
left. Often the question is whether the remaining hypergraph, the k-core, is
empty or not. In some settings, it may be possible to remove either vertices or
edges from the hypergraph before peeling, at some cost. For example, in hashing
applications where keys correspond to edges and buckets to vertices, one might
use an additional side data structure, commonly referred to as a stash, to
separately handle some keys in order to avoid collisions. The natural question
in such cases is to find the minimum number of edges (or vertices) that need to
be stashed in order to realize an empty k-core. We show that both these
problems are NP-complete for all $k \geq 2$ on graphs and regular hypergraphs,
with the sole exception being that the edge variant of stashing is solvable in
polynomial time for $k = 2$ on standard (2-uniform) graphs.